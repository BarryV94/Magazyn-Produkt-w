{
  "\"Dodaj tło\"": "\"Dodaj tło\"",
  "\"Dodaj zdjęcia\"": "\"Dodaj zdjęcia\"",
  "\"Dodaj\"": "\"Dodaj\"",
  "\"Edytuj\"": "\"Edytuj\"",
  "\"Efekty\"": "\"Efekty\"",
  "\"Eksportuj dane\"": "\"Eksportuj dane\"",
  "\"Galeria\"": "\"Galeria\"",
  "\"Importuj dane\"": "\"Importuj dane\"",
  "\"Inne\"": "\"Inne\"",
  "\"Kategorie\"": "\"Kategorie\"",
  "\"Logi\"": "\"Logi\"",
  "\"Paginacja\"": "\"Paginacja\"",
  "\"Pamięć\"": "\"Pamięć\"",
  "\"Resetuj\"": "\"Resetuj\"",
  "\"Rozszerzona statystyka\"": "\"Rozszerzona statystyka\"",
  "\"Sklepy\"": "\"Sklepy\"",
  "\"Statystyki magazynu\"": "\"Statystyki magazynu\"",
  "\"Tła\"": "\"Tła\"",
  "\"Usuń zaznaczone\"": "\"Usuń zaznaczone\"",
  "\"Wyczyść logi\"": "\"Wyczyść logi\"",
  "\"Wyczyść wszystkie dane\"": "\"Wyczyść wszystkie dane\"",
  "\"Zapisz produkt\"": "\"Zapisz produkt\"",
  "\"Zapisz\"": "\"Zapisz\"",
  "\"Zaznacz wiele\"": "\"Zaznacz wiele\"",
  "\"Załaduj z galerii\"": "\"Załaduj z galerii\"",
  "\"Złoto\"": "\"Złoto\"",
  "151 Booster": "151 Booster",
  "151 Booster Bundle": "151 Booster Bundle",
  "151 Elite Trainer Box": "151 Elite Trainer Box",
  "AUD (AUD)": "AUD (AUD)",
  "Akcesoria": "Akcesoria",
  "Aktualizatory innych produktów inwestycyjnych:": "Aktualizatory innych produktów inwestycyjnych:",
  "Aktualizuj kurs złota": "Aktualizuj kurs złota",
  "Aktualizuj kursy": "Aktualizuj kursy",
  "Aktualizuje cenę złota z NBP": "Aktualizuje cenę złota z NBP",
  "Aktualizuje kursy walut co godzinę": "Aktualizuje kursy walut co godzinę",
  "Aktualna cena": "Aktualna cena",
  "Aktualna cena (opcjonalnie)": "Aktualna cena (opcjonalnie)",
  "Aktualna cena (produkty):": "Aktualna cena (produkty):",
  "Aktualna cena jednej sztuki": "Aktualna cena jednej sztuki",
  "Aktualna cena za jedną sztukę": "Aktualna cena za jedną sztukę",
  "Aktualna wartość produktów": "Aktualna wartość produktów",
  "Aktualną wartość": "Aktualną wartość",
  "Analiza danych": "Analiza danych",
  "Analizę cen w kategoriach": "Analizę cen w kategoriach",
  "Analizę zysków i strat": "Analizę zysków i strat",
  "Angielski": "Angielski",
  "Animacje": "Animacje",
  "Animacje i ładowanie": "Animacje i ładowanie",
  "Anuluj": "Anuluj",
  "Anuluj zaznaczenie": "Anuluj zaznaczenie",
  "Aplikacja Magazyn Produktów umożliwia kompleksowe zarządzanie asortymentem, śledzenie wartości magazynu oraz analizę zysków i strat. Poniżej znajdziesz szczegółową instrukcję korzystania z wszystkich funkcji aplikacji.": "Aplikacja Magazyn Produktów umożliwia kompleksowe zarządzanie asortymentem, śledzenie wartości magazynu oraz analizę zysków i strat. Poniżej znajdziesz szczegółową instrukcję korzystania z wszystkich funkcji aplikacji.",
  "Aplikacja automatycznie:": "Aplikacja automatycznie:",
  "Arceus Spring 2022 Collector's Chest": "Arceus Spring 2022 Collector's Chest",
  "Arceus V Figure Collection": "Arceus V Figure Collection",
  "Arial": "Arial",
  "Automatyczna aktualizacja przy zmianie kursów walut": "Automatyczna aktualizacja przy zmianie kursów walut",
  "Automatyczne aktualizacje": "Automatyczne aktualizacje",
  "Automatyczne dodawanie dziennych punktów cenowych": "Automatyczne dodawanie dziennych punktów cenowych",
  "BGN (BGN)": "BGN (BGN)",
  "BRL (BRL)": "BRL (BRL)",
  "Battle Styles Elite Trainer Box (Rapid Strike)": "Battle Styles Elite Trainer Box (Rapid Strike)",
  "Battle Styles Elite Trainer Box (Single Strike)": "Battle Styles Elite Trainer Box (Single Strike)",
  "Blisters": "Blisters",
  "Booster 151": "Booster 151",
  "Booster Acreus": "Booster Acreus",
  "Booster Ancient Origins": "Booster Ancient Origins",
  "Booster Aquapolis": "Booster Aquapolis",
  "Booster Astral Radiance Promo": "Booster Astral Radiance Promo",
  "Booster Box": "Booster Box",
  "Booster Break Point": "Booster Break Point",
  "Booster Crown Zenith": "Booster Crown Zenith",
  "Booster Dark Explorers": "Booster Dark Explorers",
  "Booster Double Crisis": "Booster Double Crisis",
  "Booster Evolving Skies": "Booster Evolving Skies",
  "Booster Flashfire": "Booster Flashfire",
  "Booster Fossil": "Booster Fossil",
  "Booster Guardians Rising": "Booster Guardians Rising",
  "Boosters": "Boosters",
  "Box Sets": "Box Sets",
  "Brilliant Stars Booster Box": "Brilliant Stars Booster Box",
  "CAD (CAD)": "CAD (CAD)",
  "CHF (CHF)": "CHF (CHF)",
  "CLP (CLP)": "CLP (CLP)",
  "CNY (CNY)": "CNY (CNY)",
  "CZK (CZK)": "CZK (CZK)",
  "Celebrations Ultra-Premium Collection": "Celebrations Ultra-Premium Collection",
  "Cena zakupu": "Cena zakupu",
  "Cena zakupu (malejąco)": "Cena zakupu (malejąco)",
  "Cena zakupu (produkty):": "Cena zakupu (produkty):",
  "Cena zakupu (rosnąco)": "Cena zakupu (rosnąco)",
  "Cena zakupu i waluta": "Cena zakupu i waluta",
  "Cena zakupu jednej sztuki": "Cena zakupu jednej sztuki",
  "Cena zakupu jednej sztuki *": "Cena zakupu jednej sztuki *",
  "Comic Sans MS": "Comic Sans MS",
  "Common & Uncommon": "Common & Uncommon",
  "Courier New": "Courier New",
  "Crown Zenith: Galarian Articuno Tin": "Crown Zenith: Galarian Articuno Tin",
  "Crown Zenith: Galarian Moltres Tin": "Crown Zenith: Galarian Moltres Tin",
  "Crown Zenith: Galarian Zapdos Tin": "Crown Zenith: Galarian Zapdos Tin",
  "Cyrus Premium Tournament Collection": "Cyrus Premium Tournament Collection",
  "Czcionka aplikacji": "Czcionka aplikacji",
  "Czy zezwalasz na odtwarzanie dźwięków w tej aplikacji? Dźwięki są używane tylko do powiadomień.": "Czy zezwalasz na odtwarzanie dźwięków w tej aplikacji? Dźwięki są używane tylko do powiadomień.",
  "Czyszczenie danych": "Czyszczenie danych",
  "DKK (DKK)": "DKK (DKK)",
  "Data dodania": "Data dodania",
  "Data dodania (malejąco)": "Data dodania (malejąco)",
  "Data dodania (najnowsze)": "Data dodania (najnowsze)",
  "Data dodania (najstarsze)": "Data dodania (najstarsze)",
  "Data dodania (rosnąco)": "Data dodania (rosnąco)",
  "Dla każdego produktu śledzona jest historia zmian cen:": "Dla każdego produktu śledzona jest historia zmian cen:",
  "Dodaj": "Dodaj",
  "Dodaj nowe tło": "Dodaj nowe tło",
  "Dodaj nowy efekt": "Dodaj nowy efekt",
  "Dodaj nowy efekt:": "Dodaj nowy efekt:",
  "Dodaj nowy produkt": "Dodaj nowy produkt",
  "Dodaj nowy sklep": "Dodaj nowy sklep",
  "Dodaj nową kategorię": "Dodaj nową kategorię",
  "Dodaj nową kategorię:": "Dodaj nową kategorię:",
  "Dodaj pierwszy produkt korzystając z przycisku \"Dodaj nowy produkt\" w sekcji Kontrolki lub sidebar.": "Dodaj pierwszy produkt korzystając z przycisku \"Dodaj nowy produkt\" w sekcji Kontrolki lub sidebar.",
  "Dodaj tło": "Dodaj tło",
  "Dodaj walutę": "Dodaj walutę",
  "Dodaj zdjęcia": "Dodaj zdjęcia",
  "Dodaje dzienne punkty cenowe": "Dodaje dzienne punkty cenowe",
  "Dodawanie i edycja produktów": "Dodawanie i edycja produktów",
  "Domyślna systemowa": "Domyślna systemowa",
  "Domyślny": "Domyślny",
  "Dostosowanie": "Dostosowanie",
  "Dostosuj paginację do swoich preferencji, aby poprawić komfort korzystania z aplikacji.": "Dostosuj paginację do swoich preferencji, aby poprawić komfort korzystania z aplikacji.",
  "Dostosuj ustawienia": "Dostosuj ustawienia",
  "Dostosuj wygląd aplikacji wybierając własne tła. Aplikacja zapamięta twój wybór.": "Dostosuj wygląd aplikacji wybierając własne tła. Aplikacja zapamięta twój wybór.",
  "EUR (€)": "EUR (€)",
  "Edycja istniejących produktów": "Edycja istniejących produktów",
  "Edytuj nazwę tła": "Edytuj nazwę tła",
  "Edytuj nazwę zdjęcia": "Edytuj nazwę zdjęcia",
  "Edytuj sklep": "Edytuj sklep",
  "Edytuj walutę": "Edytuj walutę",
  "Efekt": "Efekt",
  "Efekt (dla kategorii Singles)": "Efekt (dla kategorii Singles)",
  "Efekt zmierzchu (przyciemnienie):": "Efekt zmierzchu (przyciemnienie):",
  "Efekty": "Efekty",
  "Efekty na stronie:": "Efekty na stronie:",
  "Efekty są przypisywane do produktów z kategorii \"Singles\" i wpływają na wygląd karty w podglądzie 3D.": "Efekty są przypisywane do produktów z kategorii \"Singles\" i wpływają na wygląd karty w podglądzie 3D.",
  "Efekty są używane dla kategorii \"Singles\" do określenia rodzaju karty.": "Efekty są używane dla kategorii \"Singles\" do określenia rodzaju karty.",
  "Efektów": "Efektów",
  "Eksport danych": "Eksport danych",
  "Eksportuj dane": "Eksportuj dane",
  "Eksportuj dane przed czyszczeniem pamięci przeglądarki lub zmianą urządzenia. Dzięki temu nie stracisz swoich danych!": "Eksportuj dane przed czyszczeniem pamięci przeglądarki lub zmianą urządzenia. Dzięki temu nie stracisz swoich danych!",
  "Elementów galerii": "Elementów galerii",
  "Elementów tła": "Elementów tła",
  "Elite Trainer Box": "Elite Trainer Box",
  "Enter": "Enter",
  "Excellent": "Excellent",
  "Filtrowanie i sortowanie produktów": "Filtrowanie i sortowanie produktów",
  "Filtrować po kategorii": "Filtrować po kategorii",
  "Filtruj po kategorii:": "Filtruj po kategorii:",
  "Fioletowy": "Fioletowy",
  "Francuski": "Francuski",
  "GBP (GBP)": "GBP (GBP)",
  "Galaxy/Cosmos Holofoil": "Galaxy/Cosmos Holofoil",
  "Galeria na stronie:": "Galeria na stronie:",
  "Galeria zdjęć": "Galeria zdjęć",
  "Gdy zabraknie miejsca w pamięci przeglądarki, aplikacja może przestać działać poprawnie.": "Gdy zabraknie miejsca w pamięci przeglądarki, aplikacja może przestać działać poprawnie.",
  "Georgia": "Georgia",
  "Good": "Good",
  "Gradient nagłówka (do):": "Gradient nagłówka (do):",
  "Gradient nagłówka (od):": "Gradient nagłówka (od):",
  "Grubość obramowania:": "Grubość obramowania:",
  "HKD (HKD)": "HKD (HKD)",
  "HUF (HUF)": "HUF (HUF)",
  "Helvetica": "Helvetica",
  "Historia / Logi": "Historia / Logi",
  "Historia cen": "Historia cen",
  "Historia zdarzeń": "Historia zdarzeń",
  "Historię cen dla poszczególnych produktów": "Historię cen dla poszczególnych produktów",
  "Historię cen produktów": "Historię cen produktów",
  "Hiszpański": "Hiszpański",
  "Holofoil Amazing Rare": "Holofoil Amazing Rare",
  "Holofoil Rare": "Holofoil Rare",
  "IDR (IDR)": "IDR (IDR)",
  "ILS (ILS)": "ILS (ILS)",
  "INR (INR)": "INR (INR)",
  "ISK (ISK)": "ISK (ISK)",
  "Ilość": "Ilość",
  "Ilość (malejąco)": "Ilość (malejąco)",
  "Ilość (rosnąco)": "Ilość (rosnąco)",
  "Ilość *": "Ilość *",
  "Impact": "Impact",
  "Import danych": "Import danych",
  "Import i eksport danych": "Import i eksport danych",
  "Importuj dane": "Importuj dane",
  "IndexedDB": "IndexedDB",
  "Informacja": "Informacja",
  "Inne": "Inne",
  "Inne listy i miejsca:": "Inne listy i miejsca:",
  "Inne ustawienia": "Inne ustawienia",
  "Instrukcja": "Instrukcja",
  "Instrukcja Magazynu Produktów": "Instrukcja Magazynu Produktów",
  "JPY (JPY)": "JPY (JPY)",
  "Jak poprawnie wpisywać nazwę produktu?": "Jak poprawnie wpisywać nazwę produktu?",
  "Japoński": "Japoński",
  "Język *": "Język *",
  "KRW (KRW)": "KRW (KRW)",
  "Kategoria": "Kategoria",
  "Kategoria (A-Z)": "Kategoria (A-Z)",
  "Kategoria (Z-A)": "Kategoria (Z-A)",
  "Kategorie": "Kategorie",
  "Kategorie na stronie:": "Kategorie na stronie:",
  "Kategorii": "Kategorii",
  "Kliknij  aby edytować dane sklepu": "Kliknij  aby edytować dane sklepu",
  "Kliknij  aby edytować nazwę efektu": "Kliknij  aby edytować nazwę efektu",
  "Kliknij  aby edytować nazwę kategorii": "Kliknij  aby edytować nazwę kategorii",
  "Kliknij  aby otworzyć stronę sklepu": "Kliknij  aby otworzyć stronę sklepu",
  "Kliknij  aby usunąć efekt": "Kliknij  aby usunąć efekt",
  "Kliknij  aby usunąć kategorię": "Kliknij  aby usunąć kategorię",
  "Kliknij  aby usunąć sklep": "Kliknij  aby usunąć sklep",
  "Kliknij  aby zmienić kolory kategorii": "Kliknij  aby zmienić kolory kategorii",
  "Kliknij miniaturkę, aby zobaczyć podgląd": "Kliknij miniaturkę, aby zobaczyć podgląd",
  "Kliknij na wykresy w rozszerzonych statystykach, aby zobaczyć szczegółowe wartości procentowe.": "Kliknij na wykresy w rozszerzonych statystykach, aby zobaczyć szczegółowe wartości procentowe.",
  "Kliknij na zdjęcie produktu, aby zobaczyć jego szczegóły, historię cen oraz efekt 3D (dla kart).": "Kliknij na zdjęcie produktu, aby zobaczyć jego szczegóły, historię cen oraz efekt 3D (dla kart).",
  "Kliknij tutaj": "Kliknij tutaj",
  "Kod waluty": "Kod waluty",
  "Kolor akcentu:": "Kolor akcentu:",
  "Kolor główny:": "Kolor główny:",
  "Kolor obramowania:": "Kolor obramowania:",
  "Konfiguracja paginacji": "Konfiguracja paginacji",
  "Konfiguracja walut": "Konfiguracja walut",
  "Konfiguracja walut dla sekcji": "Konfiguracja walut dla sekcji",
  "Konfiguruj paginację": "Konfiguruj paginację",
  "Kontrolki": "Kontrolki NIEMIECKIE",
  "Kurs walut": "Kurs walut",
  "Kurs wymiany:": "Kurs wymiany:",
  "Light Played": "Light Played",
  "Lista efektów": "Lista efektów",
  "Lista kategorii": "Lista kategorii",
  "Lista produktów": "Lista produktów",
  "Lista sklepów": "Lista sklepów",
  "Listę sklepów i efektów": "Listę sklepów i efektów",
  "Logi": "Logi",
  "Logi na stronie:": "Logi na stronie:",
  "Logi pokazują wszystkie ważne operacje wykonane w aplikacji wraz z datami.": "Logi pokazują wszystkie ważne operacje wykonane w aplikacji wraz z datami.",
  "Logi są automatycznie czyszczone co 3 dni.": "Logi są automatycznie czyszczone co 3 dni.",
  "Logi są przydatne do śledzenia zmian i diagnozowania ewentualnych problemów z aplikacją.": "Logi są przydatne do śledzenia zmian i diagnozowania ewentualnych problemów z aplikacją.",
  "Logi zdarzeń": "Logi zdarzeń",
  "Logów": "Logów",
  "Lost Origin Elite Trainer Box": "Lost Origin Elite Trainer Box",
  "MXN (MXN)": "MXN (MXN)",
  "MYR (MYR)": "MYR (MYR)",
  "Magazyn Produktów": "Magazyn Produktów",
  "Magazyn jest pusty": "Magazyn jest pusty",
  "Marnie Premium Tournament Collection Box": "Marnie Premium Tournament Collection Box",
  "Menu": "Menu",
  "Migracja danych": "Migracja danych",
  "Mini Tins": "Mini Tins",
  "Mint": "Mint",
  "Monitoruj dostępne miejsce": "Monitoruj dostępne miejsce",
  "Motywy kolorystyczne": "Motywy kolorystyczne",
  "Możesz dodać wiele zdjęć jednocześnie.": "Możesz dodać wiele zdjęć jednocześnie.",
  "Możesz dodać wiele zdjęć naraz. Nazwa zostanie automatycznie pobrana z nazwy pliku.": "Możesz dodać wiele zdjęć naraz. Nazwa zostanie automatycznie pobrana z nazwy pliku.",
  "Możesz edytować wszystkie pola, w tym zdjęcie produktu i efekt.": "Możesz edytować wszystkie pola, w tym zdjęcie produktu i efekt.",
  "Możesz najpierw dodać zdjęcia do galerii, a następnie wybierać je przy dodawaniu produktów. Dzięki temu oszczędzasz czas!": "Możesz najpierw dodać zdjęcia do galerii, a następnie wybierać je przy dodawaniu produktów. Dzięki temu oszczędzasz czas!",
  "Możesz przełączać między trybem jasnym a ciemnym za pomocą przycisku w prawym dolnym rogu ekranu.": "Możesz przełączać między trybem jasnym a ciemnym za pomocą przycisku w prawym dolnym rogu ekranu.",
  "Możliwość usuwania pojedynczych punktów cenowych": "Możliwość usuwania pojedynczych punktów cenowych",
  "NIE": "NIE",
  "NOK (NOK)": "NOK (NOK)",
  "NZD (NZD)": "NZD (NZD)",
  "Nazwa": "Nazwa",
  "Nazwa (A-Z)": "Nazwa (A-Z)",
  "Nazwa (Z-A)": "Nazwa (Z-A)",
  "Nazwa efektu": "Nazwa efektu",
  "Nazwa kategorii": "Nazwa kategorii",
  "Nazwa produktu": "Nazwa produktu",
  "Nazwa sklepu": "Nazwa sklepu",
  "Nazwa tła (opcjonalnie)": "Nazwa tła (opcjonalnie)",
  "Nazwa zdjęcia": "Nazwa zdjęcia",
  "Nazwa zdjęcia (opcjonalnie)": "Nazwa zdjęcia (opcjonalnie)",
  "Near Mint": "Near Mint",
  "Nie można usunąć kategorii, która jest przypisana do produktów. Najpierw zmień kategorię w produktach lub usuń te produkty.": "Nie można usunąć kategorii, która jest przypisana do produktów. Najpierw zmień kategorię w produktach lub usuń te produkty.",
  "Nie zmieniaj kolejności słów": "Nie zmieniaj kolejności słów",
  "Nie, wyłącz dźwięki": "Nie, wyłącz dźwięki",
  "Niebieski": "Niebieski",
  "Niemiecki": "Niemiecki",
  "Niepoprawnie:": "Niepoprawnie:",
  "Nowa nazwa tła": "Nowa nazwa tła",
  "Nowa nazwa zdjęcia": "Nowa nazwa zdjęcia",
  "OK": "OK",
  "Obraz online": "Obraz online",
  "Obrazy galerii": "Obrazy galerii",
  "Obrazy produktów": "Obrazy produktów",
  "Obsidian Flames Booster": "Obsidian Flames Booster",
  "Odtwórz dźwięk ostrzeżenia": "Odtwórz dźwięk ostrzeżenia",
  "Odtwórz dźwięk sukcesu": "Odtwórz dźwięk sukcesu",
  "Online": "Online",
  "Operacja wymaga potwierdzenia i jest nieodwracalna.": "Operacja wymaga potwierdzenia i jest nieodwracalna.",
  "Ostrzeżenie": "Ostrzeżenie",
  "Otwórz galerię": "Otwórz galerię",
  "Otwórz konfigurację": "Otwórz konfigurację",
  "Otwórz logi": "Otwórz logi",
  "Otwórz panel efektów": "Otwórz panel efektów",
  "Otwórz panel kategorii": "Otwórz panel kategorii",
  "Otwórz panel sklepów": "Otwórz panel sklepów",
  "Otwórz panel tła": "Otwórz panel tła",
  "Otwórz statystyki": "Otwórz statystyki",
  "PHP (PHP)": "PHP (PHP)",
  "PLN (zł)": "PLN (zł)",
  "Pamięć": "Pamięć",
  "Personalizacja": "Personalizacja",
  "Piotr Czechowski": "Piotr Czechowski",
  "Played": "Played",
  "Plik ZIP zawierający wszystkie informacje": "Plik ZIP zawierający wszystkie informacje",
  "Podczas długotrwałych operacji pojawia się animacja ładowania (pokeball).": "Podczas długotrwałych operacji pojawia się animacja ładowania (pokeball).",
  "Podgląd obrazu": "Podgląd obrazu",
  "Podgląd produktu": "Podgląd produktu",
  "Podstawowe statystyki": "Podstawowe statystyki",
  "Podsumowanie": "Podsumowanie",
  "Pokemon V": "Pokemon V",
  "Pokemon V (Alternate Art)": "Pokemon V (Alternate Art)",
  "Pokemon V (Full Art)": "Pokemon V (Full Art)",
  "Pokémon GO Elite Trainer Box": "Pokémon GO Elite Trainer Box",
  "Poor": "Poor",
  "Poprawnie:": "Poprawnie:",
  "Porada": "Porada",
  "Porada dotycząca galerii": "Porada dotycząca galerii",
  "Porada dotycząca zdjęć": "Porada dotycząca zdjęć",
  "Portugalski": "Portugalski",
  "Postęp operacji jest wyświetlany w procentach.": "Postęp operacji jest wyświetlany w procentach.",
  "Potwierdzenia działań": "Potwierdzenia działań",
  "Potwierdzenie": "Potwierdzenie",
  "Powrót do góry": "Powrót do góry",
  "Produkty": "Produkty",
  "Produkty na stronie:": "Produkty na stronie:",
  "Produkty z ceną": "Produkty z ceną",
  "Produktów": "Produktów",
  "Przeglądaj historię zdarzeń": "Przeglądaj historię zdarzeń",
  "Przeglądaj zużycie pamięci": "Przeglądaj zużycie pamięci",
  "Przezroczystość paneli:": "Przezroczystość paneli:",
  "Przykład:": "Przykład:",
  "Przywróć domyślne tło": "Przywróć domyślne tło",
  "Przywróć ustawienia do domyślnych": "Przywróć ustawienia do domyślnych",
  "RON (RON)": "RON (RON)",
  "Radiant Holofoil": "Radiant Holofoil",
  "Rainbow Rare (VMax, VStar)": "Rainbow Rare (VMax, VStar)",
  "Reverse Holo non-rares": "Reverse Holo non-rares",
  "Rok zakupu": "Rok zakupu",
  "Rok zakupu (malejąco)": "Rok zakupu (malejąco)",
  "Rok zakupu (rosnąco)": "Rok zakupu (rosnąco)",
  "Rozkład wartości według kategorii, walut i lat": "Rozkład wartości według kategorii, walut i lat",
  "Rozmiar (malejąco)": "Rozmiar (malejąco)",
  "Rozmiar (rosnąco)": "Rozmiar (rosnąco)",
  "Rozmycie tła:": "Rozmycie tła:",
  "Rozszerzona statystyka": "Rozszerzona statystyka",
  "Rozszerzone statystyki": "Rozszerzone statystyki",
  "Rozszerzone statystyki:": "Rozszerzone statystyki:",
  "Różnica wartości": "Różnica wartości",
  "Różnice cen (zielone/czerwone):": "Różnice cen (zielone/czerwone):",
  "Różnicę wartości": "Różnicę wartości",
  "SEK (SEK)": "SEK (SEK)",
  "SGD (SGD)": "SGD (SGD)",
  "Scarlet & Violet Koraidon Elite Trainer Box": "Scarlet & Violet Koraidon Elite Trainer Box",
  "Secret Rare (Gold)": "Secret Rare (Gold)",
  "Shining Fates Elite Trainer Box": "Shining Fates Elite Trainer Box",
  "Shiny Vault (Basic / Stage 1 / V / VMax)": "Shiny Vault (Basic / Stage 1 / V / VMax)",
  "Singles": "Singles",
  "Sklepy": "Sklepy",
  "Sklepy na stronie:": "Sklepy na stronie:",
  "Sklepów": "Sklepów",
  "Skopiuj dokładną nazwę z Cardmarket": "Skopiuj dokładną nazwę z Cardmarket",
  "Skróty klawiaturowe": "Skróty klawiaturowe",
  "Skąd brać nazwę:": "Skąd brać nazwę:",
  "Sortować po nazwie, cenie, roku itp.": "Sortować po nazwie, cenie, roku itp.",
  "Sortuj": "Sortuj",
  "Sortuj zdjęcia po dacie, nazwie lub rozmiarze": "Sortuj zdjęcia po dacie, nazwie lub rozmiarze",
  "Sortuj:": "Sortuj:",
  "Spis treści": "Spis treści",
  "Sprawdza połączenie internetowe": "Sprawdza połączenie internetowe",
  "Sprawdź zużycie pamięci localStorage i IndexedDB.": "Sprawdź zużycie pamięci localStorage i IndexedDB.",
  "Stan karty *": "Stan karty *",
  "Statystyki główne (strona główna):": "Statystyki główne (strona główna):",
  "Statystyki i analiza": "Statystyki i analiza",
  "Statystyki magazynu": "Statystyki magazynu",
  "Statystyki pamięci": "Statystyki pamięci",
  "Sword & Shield Ultra-Premium Collection - Charizard": "Sword & Shield Ultra-Premium Collection - Charizard",
  "Symbol (np. C$)": "Symbol (np. C$)",
  "Symbol waluty": "Symbol waluty",
  "System automatycznie pobierze ikonę sklepu.": "System automatycznie pobierze ikonę sklepu.",
  "System automatycznie wykryje duplikaty nazw i zaproponuje unikalną nazwę.": "System automatycznie wykryje duplikaty nazw i zaproponuje unikalną nazwę.",
  "System automatycznie zaimportuje wszystkie dane i zdjęcia.": "System automatycznie zaimportuje wszystkie dane i zdjęcia.",
  "Szczegółowa instrukcja obsługi aplikacji Magazyn Produktów — spis treści i instrukcje krok po kroku dotyczące dodawania produktów,\n      zarządzania kategoriami, galerii, efektów, kursów walut, importu/eksportu oraz innych funkcji aplikacji.": "Szczegółowa instrukcja obsługi aplikacji Magazyn Produktów — spis treści i instrukcje krok po kroku dotyczące dodawania produktów,\n      zarządzania kategoriami, galerii, efektów, kursów walut, importu/eksportu oraz innych funkcji aplikacji.",
  "TAK": "TAK",
  "THB (THB)": "THB (THB)",
  "TRY (TRY)": "TRY (TRY)",
  "Tahoma": "Tahoma",
  "Tak, włącz dźwięki": "Tak, włącz dźwięki",
  "Theme Decks": "Theme Decks",
  "Times New Roman": "Times New Roman",
  "Tins": "Tins",
  "Top produkty pod względem zysku/straty": "Top produkty pod względem zysku/straty",
  "Trainer Gallery (V / VMax)": "Trainer Gallery (V / VMax)",
  "Trainer Gallery Holofoil": "Trainer Gallery Holofoil",
  "Trainer Holo (Full Art / Trainer Gallery)": "Trainer Holo (Full Art / Trainer Gallery)",
  "Trainer Kits": "Trainer Kits",
  "Trebuchet MS": "Trebuchet MS",
  "Trick or Trade 2023 BOOster Bundle": "Trick or Trade 2023 BOOster Bundle",
  "Tryb nocny": "Tryb nocny",
  "Tła na stronie:": "Tła na stronie:",
  "UAH (UAH)": "UAH (UAH)",
  "URL sklepu": "URL sklepu",
  "USD ($)": "USD ($)",
  "Ultra Premium": "Ultra Premium",
  "Ustaw kursy walut": "Ustaw kursy walut",
  "Ustaw liczbę elementów wyświetlanych na stronach dla:": "Ustaw liczbę elementów wyświetlanych na stronach dla:",
  "Ustawienia": "Ustawienia",
  "Ustawienia kategorii i kursów walut": "Ustawienia kategorii i kursów walut",
  "Usuń zaznaczone": "Usuń zaznaczone",
  "Uwaga:": "Uwaga:",
  "Uwzględnij wielkość liter i znaki specjalne": "Uwzględnij wielkość liter i znaki specjalne",
  "Użyj filtrów i opcji sortowania nad listą produktów aby:": "Użyj filtrów i opcji sortowania nad listą produktów aby:",
  "Użyj przycisku  aby usunąć tło": "Użyj przycisku  aby usunąć tło",
  "Użyj przycisku  aby zmienić nazwę tła": "Użyj przycisku  aby zmienić nazwę tła",
  "Użyj przycisku  aby zmienić nazwę zdjęcia": "Użyj przycisku  aby zmienić nazwę zdjęcia",
  "Użyj przycisku  w prawym górnym rogu, aby usunąć zdjęcie": "Użyj przycisku  w prawym górnym rogu, aby usunąć zdjęcie",
  "Użyj zdjęć w produktach": "Użyj zdjęć w produktach",
  "VMax": "VMax",
  "VMax (Alternate/Rainbow)": "VMax (Alternate/Rainbow)",
  "VStar": "VStar",
  "Verdana": "Verdana",
  "W podglądzie możesz również przeszukać ceny na Cardmarket lub Mennicy Polskiej (dla złota).": "W podglądzie możesz również przeszukać ceny na Cardmarket lub Mennicy Polskiej (dla złota).",
  "Walut": "Walut",
  "Waluta aktualna": "Waluta aktualna",
  "Waluta zakupu": "Waluta zakupu",
  "Waluty na stronie:": "Waluty na stronie:",
  "Wartość magazynu (podczas zakupu)": "Wartość magazynu (podczas zakupu)",
  "Wartość w PLN": "Wartość w PLN",
  "Wartość zakupu": "Wartość zakupu",
  "Wartość zakupu produktów": "Wartość zakupu produktów",
  "Widoczność hamburger menu": "Widoczność hamburger menu",
  "Widoczność powiadomień": "Widoczność powiadomień",
  "Widoczność przycisku Instrukcji": "Widoczność przycisku Instrukcji",
  "Widoczność sekcji kontrolki": "Widoczność sekcji kontrolki",
  "Wpisz szukany element...": "Wpisz szukany element...",
  "Wprowadzenie": "Wprowadzenie",
  "Wskazówki:": "Wskazówki:",
  "Wszystkie kategorie": "Wszystkie kategorie",
  "Wszystkie operacje usuwania wymagają potwierdzenia w oknie dialogowym.": "Wszystkie operacje usuwania wymagają potwierdzenia w oknie dialogowym.",
  "Wszystkie produkty z ich danymi": "Wszystkie produkty z ich danymi",
  "Wszystkie zdjęcia z galerii": "Wszystkie zdjęcia z galerii",
  "Wybierz efekt": "Wybierz efekt",
  "Wybierz język": "Wybierz język",
  "Wybierz plik z dysku": "Wybierz plik z dysku",
  "Wybierz stan karty": "Wybierz stan karty",
  "Wybierz tło": "Wybierz tło",
  "Wybierz tło z dysku by dodać": "Wybierz tło z dysku by dodać",
  "Wybierz zdjęcia": "Wybierz zdjęcia",
  "Wyczyszczenie spowoduje usunięcie wszystkich wprowadzonych danych, czy chcesz kontynuować?": "Wyczyszczenie spowoduje usunięcie wszystkich wprowadzonych danych, czy chcesz kontynuować?",
  "Wyczyść logi": "Wyczyść logi",
  "Wyczyść wszystkie dane": "Wyczyść wszystkie dane",
  "Wykres historii cen:": "Wykres historii cen:",
  "Wykresy i tabele podsumowujące": "Wykresy i tabele podsumowujące",
  "Wykresy zmian cen w czasie": "Wykresy zmian cen w czasie",
  "Wypełnij formularz dodawania produktu": "Wypełnij formularz dodawania produktu",
  "Wyszukaj zdjęcia po nazwie w polu wyszukiwania": "Wyszukaj zdjęcia po nazwie w polu wyszukiwania",
  "Wyszukaj zdjęcia po nazwie...": "Wyszukaj zdjęcia po nazwie...",
  "Wyszukiwać produkty po różnych kryteriach": "Wyszukiwać produkty po różnych kryteriach",
  "Włoski": "Włoski",
  "XDR (XDR)": "XDR (XDR)",
  "ZAR (ZAR)": "ZAR (ZAR)",
  "Zaawansowane funkcje": "Zaawansowane funkcje",
  "Zaawansowane przyciski": "Zaawansowane przyciski",
  "Zachowaj oryginalną pisownię": "Zachowaj oryginalną pisownię",
  "Zamknij instrukcję": "Zamknij instrukcję",
  "Zaokrąglenie rogów:": "Zaokrąglenie rogów:",
  "Zapisz": "Zapisz",
  "Zapisz konfigurację": "Zapisz konfigurację",
  "Zapisz kursy": "Zapisz kursy",
  "Zapisz produkt": "Zapisz produkt",
  "Zapisz wszystko": "Zapisz wszystko",
  "Zapisz zmiany": "Zapisz zmiany",
  "Zarządzaj efektami": "Zarządzaj efektami",
  "Zarządzaj istniejącymi efektami": "Zarządzaj istniejącymi efektami",
  "Zarządzaj istniejącymi kategoriami": "Zarządzaj istniejącymi kategoriami",
  "Zarządzaj kategoriami": "Zarządzaj kategoriami",
  "Zarządzaj sklepami": "Zarządzaj sklepami",
  "Zarządzaj tłami": "Zarządzaj tłami",
  "Zarządzaj zdjęciami": "Zarządzaj zdjęciami",
  "Zarządzanie efektami": "Zarządzanie efektami",
  "Zarządzanie galerią zdjęć": "Zarządzanie galerią zdjęć",
  "Zarządzanie kategoriami": "Zarządzanie kategoriami",
  "Zarządzanie kursami walut": "Zarządzanie kursami walut",
  "Zarządzanie sklepami": "Zarządzanie sklepami",
  "Zarządzanie tłami": "Zarządzanie tłami",
  "Zastosuj tło": "Zastosuj tło",
  "Zaznacz wiele": "Zaznacz wiele",
  "Zaznacz wybrane tło, aby zmienić tło aplikacji.": "Zaznacz wybrane tło, aby zmienić tło aplikacji.",
  "Zaznaczanie wielu produktów": "Zaznaczanie wielu produktów",
  "Załaduj z galerii": "Załaduj z galerii",
  "Zdjęcia dodane do galerii są zapisywane lokalnie w przeglądarce. Eksportując dane, możesz zachować całą galerię.": "Zdjęcia dodane do galerii są zapisywane lokalnie w przeglądarce. Eksportując dane, możesz zachować całą galerię.",
  "Zdjęcie produktu": "Zdjęcie produktu",
  "Zgoda na dźwięki": "Zgoda na dźwięki",
  "Zielony": "Zielony",
  "Zmień ustawienia dźwięków": "Zmień ustawienia dźwięków",
  "Zmień wygląd aplikacji": "Zmień wygląd aplikacji",
  "Zobacz szczegółowy podział na:": "Zobacz szczegółowy podział na:",
  "Zresetuj zgodę na czcionki systemowe": "Zresetuj zgodę na czcionki systemowe",
  "Zysk (malejąco)": "Zysk (malejąco)",
  "Zysk (rosnąco)": "Zysk (rosnąco)",
  "Złoto": "Złoto",
  "cardmarket": "cardmarket",
  "https://...": "https://...",
  "let currentTranslations = {};\nlet currentLanguage = 'PL';\n\nconst availableLanguages = {\n    'PL': {\n        name: 'Polski',\n        flag: '🇵🇱',\n        file: 'https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/lang/PL.json'\n    },\n    'EN': {\n        name: 'English', \n        flag: '🇬🇧',\n        file: 'https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/lang/EN.json'\n    },\n    'DE': {\n        name: 'Deutsch',\n        flag: '🇩🇪', \n        file: 'https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/lang/DE.json'\n    }\n};\n\n// Funkcja ładowania tłumaczenia\nasync function loadLanguage(langCode) {\n    if (!availableLanguages[langCode]) {\n        console.error('Language not supported:', langCode);\n        return;\n    }\n\n    try {\n        showLoader('Ładowanie tłumaczenia...');\n        const response = await fetch(availableLanguages[langCode].file);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        currentTranslations = await response.json();\n        currentLanguage = langCode;\n        \n        applyTranslations();\n        updateLanguageButton();\n        saveLanguagePreference();\n        hideLoader();\n        \n        showNotification(`Język zmieniony na ${availableLanguages[langCode].name}`, 'success');\n        \n    } catch (error) {\n        console.error('Error loading language file:', error);\n        hideLoader();\n        showNotification('Błąd ładowania tłumaczenia', 'danger');\n        // Fallback do domyślnego języka\n        if (langCode !== 'PL') {\n            loadLanguage('PL');\n        }\n    }\n}\n\n// Funkcja aplikująca tłumaczenia\nfunction applyTranslations() {\n    // Tłumaczenie elementów z atrybutem data-translate\n    document.querySelectorAll('[data-translate]').forEach(element => {\n        const key = element.getAttribute('data-translate');\n        if (currentTranslations[key]) {\n            element.textContent = currentTranslations[key];\n        }\n    });\n\n    // Tłumaczenie placeholderów\n    document.querySelectorAll('[data-translate-placeholder]').forEach(element => {\n        const key = element.getAttribute('data-translate-placeholder');\n        if (currentTranslations[key]) {\n            element.setAttribute('placeholder', currentTranslations[key]);\n        }\n    });\n\n    // Tłumaczenie tytułów\n    document.querySelectorAll('[data-translate-title]').forEach(element => {\n        const key = element.getAttribute('data-translate-title');\n        if (currentTranslations[key]) {\n            element.setAttribute('title', currentTranslations[key]);\n        }\n    });\n\n    // Tłumaczenie atrybutów alt\n    document.querySelectorAll('[data-translate-alt]').forEach(element => {\n        const key = element.getAttribute('data-translate-alt');\n        if (currentTranslations[key]) {\n            element.setAttribute('alt', currentTranslations[key]);\n        }\n    });\n\n    // Tłumaczenie wartości przycisków\n    document.querySelectorAll('[data-translate-value]').forEach(element => {\n        const key = element.getAttribute('data-translate-value');\n        if (currentTranslations[key]) {\n            element.value = currentTranslations[key];\n        }\n    });\n}\n\n// Aktualizacja przycisku języka\nfunction updateLanguageButton() {\n    const button = document.getElementById('languageToggle');\n    const span = document.getElementById('currentLanguage');\n    if (button && span) {\n        span.textContent = currentLanguage;\n    }\n}\n\n// Zapisywanie preferencji języka\nfunction saveLanguagePreference() {\n    localStorage.setItem('selectedLanguage', currentLanguage);\n}\n\n// Ładowanie preferencji języka\nfunction loadLanguagePreference() {\n    const saved = localStorage.getItem('selectedLanguage');\n    return saved || 'PL';\n}\n\n// Modal języka\nfunction openLanguageModal() {\n    const modal = document.getElementById('languageModal');\n    const list = document.getElementById('languageList');\n    \n    if (!modal || !list) return;\n    \n    // Wypełnij listę języków\n    list.innerHTML = '';\n    Object.entries(availableLanguages).forEach(([code, lang]) => {\n        const li = document.createElement('li');\n        li.innerHTML = `\n            <span class=\"language-flag\">${lang.flag}</span>\n            <span>${lang.name}</span>\n        `;\n        li.onclick = () => loadLanguage(code);\n        \n        if (code === currentLanguage) {\n            li.classList.add('selected');\n        }\n        \n        list.appendChild(li);\n    });\n    \n    modal.style.display = 'flex';\n    setTimeout(() => modal.classList.add('show'), 10);\n}\n\nfunction closeLanguageModal() {\n    const modal = document.getElementById('languageModal');\n    if (modal) {\n        modal.classList.remove('show');\n        setTimeout(() => modal.style.display = 'none', 300);\n    }\n}\n\n// Inicjalizacja systemu tłumaczeń\nasync function initLanguageSystem() {\n    const lang = loadLanguagePreference();\n    await loadLanguage(lang);\n    \n    // Event listener dla przycisku języka\n    const languageToggle = document.getElementById('languageToggle');\n    if (languageToggle) {\n        languageToggle.addEventListener('click', openLanguageModal);\n    }\n}\n\nfunction exportTextsForTranslation() {\n    const texts = {};\n    \n    // Selektory elementów, które zawierają dynamiczne treści (ignoruj)\n    const dynamicSelectors = [\n        '.price-difference',\n        '.stat-value',\n        '.summary-value',\n        '.detail-value',\n        '.log-message',\n        '.notification',\n        '#totalValue',\n        '#purchaseValue',\n        '#currentValue',\n        '#valueDifference',\n        '#totalProfit',\n        '#totalLoss',\n        '#productsWithPrice',\n        '#totalProducts',\n        '#profitPercentage',\n        '#lossPercentage',\n        '.gallery-count',\n        '.selection-counter',\n        '.gallery-pagination-info',\n        '.page-info',\n        '.memory-stats span',\n        '.browser-info',\n        '.progress-text',\n        '.product h3',\n        '.product-content',\n        '.old-product-item',\n        '.empty-state',\n        '.gold-buyback-value',\n        '.preview-detail-value',\n        '.extended-stat-value',\n        '.extended-list-item',\n        '.stat-table td'\n    ];\n\n    // Funkcja sprawdzająca czy element jest dynamiczny\n    function isDynamicElement(element) {\n        // Sprawdź czy element lub jego rodzic jest na liście dynamicznych selektorów\n        return dynamicSelectors.some(selector => element.matches(selector) || element.closest(selector));\n    }\n\n    // Funkcja sprawdzająca czy tekst jest stały (nie dynamiczny)\n    function isStaticText(text) {\n        const dynamicPatterns = [\n            /^\\d+[,.]?\\d*\\s*[zł€$%]$/i, // ceny, procenty\n            /^\\d+[,.]?\\d*$/, // same liczby\n            /^\\d+\\s*\\/\\s*\\d+$/, // format \"10 / 20\"\n            /^[0-9:]+$/, // godziny, daty numeryczne\n            /^\\d{4}-\\d{2}-\\d{2}/, // daty\n            /^[0-9.,]+\\s*[MBKB]$/i, // rozmiary plików\n            /^[0-9.]+%$/, // procenty\n            /^(0|100)%$/ // typowe wartości procentowe\n        ];\n\n        return !dynamicPatterns.some(pattern => pattern.test(text.trim()));\n    }\n\n    // Zbierz teksty z elementów\n    document.querySelectorAll('body *').forEach(element => {\n        // Pomijaj elementy dynamiczne\n        if (isDynamicElement(element)) return;\n\n        // Pomijaj elementy z klasami wskazującymi na dynamiczną zawartość\n        if (element.classList.contains('dynamic') || \n            element.classList.contains('calculated') ||\n            element.id && element.id.includes('Value') ||\n            element.id && element.id.includes('Count') ||\n            element.id && element.id.includes('Total')) {\n            return;\n        }\n\n        // Pomijaj elementy wewnątrz produktów (są dynamiczne)\n        if (element.closest('.product') && !element.closest('.button-group')) {\n            return;\n        }\n\n        // Pomijaj elementy wewnątrz statystyk\n        if (element.closest('.stats-container') && !element.closest('h2')) {\n            return;\n        }\n\n        // Tylko elementy bez dzieci lub z prostą strukturą\n        if (element.children.length === 0 || \n            (element.children.length === 1 && element.children[0].tagName === 'I')) {\n            \n            const text = element.textContent.trim();\n            \n            if (text && \n                text.length > 1 && \n                isStaticText(text) &&\n                !texts[text] &&\n                // Dodatkowe filtry dla polskich tekstów\n                (text.includes(' ') || text.length > 3) && // musi być dłuższy niż 3 znaki lub zawierać spacje\n                !text.match(/^[A-Z]{2,4}$/) && // pomijaj skróty walut\n                !text.match(/^[0-9]+$/) // pomijaj same liczby\n            ) {\n                texts[text] = text;\n            }\n        }\n    });\n    \n    // Zbierz placeholdery (tylko stałe)\n    document.querySelectorAll('[placeholder]').forEach(element => {\n        const text = element.getAttribute('placeholder');\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n    \n    // Zbierz tytuły (tylko stałe)\n    document.querySelectorAll('[title]').forEach(element => {\n        const text = element.getAttribute('title');\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n    \n    // Zbierz wartości przycisków (tylko stałe)\n    document.querySelectorAll('button:not(.product button), input[type=\"submit\"]').forEach(element => {\n        const text = element.textContent.trim() || element.value;\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n\n    // Zbierz etykiety formularzy\n    document.querySelectorAll('label').forEach(element => {\n        const text = element.textContent.trim();\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n\n    // Zbierz nagłówki\n    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(element => {\n        const text = element.textContent.trim();\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n\n    // Ręcznie dodaj kluczowe teksty, które mogły być pominięte\n    const manualTexts = {\n        'Magazyn Produktów': 'Magazyn Produktów',\n        'Kontrolki': 'Kontrolki',\n        'Dodaj nowy produkt': 'Dodaj nowy produkt',\n        'Eksportuj dane': 'Eksportuj dane',\n        'Importuj dane': 'Importuj dane',\n        'Kurs walut': 'Kurs walut',\n        'Kategorie': 'Kategorie',\n        'Galeria zdjęć': 'Galeria zdjęć',\n        'Sklepy': 'Sklepy',\n        'Efekty': 'Efekty',\n        'Pamięć': 'Pamięć',\n        'Historia / Logi': 'Historia / Logi',\n        'Wyczyść wszystkie dane': 'Wyczyść wszystkie dane',\n        'Zapisz wszystko': 'Zapisz wszystko',\n        'Ustawienia': 'Ustawienia',\n        'Instrukcja': 'Instrukcja',\n        'Statystyki magazynu': 'Statystyki magazynu',\n        'Wartość magazynu (podczas zakupu)': 'Wartość magazynu (podczas zakupu)',\n        'Wartość zakupu produktów': 'Wartość zakupu produktów',\n        'Aktualna wartość produktów': 'Aktualna wartość produktów',\n        'Różnica wartości': 'Różnica wartości',\n        'Łączny zysk': 'Łączny zysk',\n        'Łączna strata': 'Łączna strata',\n        'Produkty z ceną': 'Produkty z ceną',\n        'Lista produktów': 'Lista produktów',\n        'Filtruj po kategorii:': 'Filtruj po kategorii:',\n        'Wszystkie kategorie': 'Wszystkie kategorie',\n        'Sortuj:': 'Sortuj:',\n        'Nazwa (A-Z)': 'Nazwa (A-Z)',\n        'Nazwa (Z-A)': 'Nazwa (Z-A)',\n        'Kategoria (A-Z)': 'Kategoria (A-Z)',\n        'Kategoria (Z-A)': 'Kategoria (Z-A)',\n        'Cena zakupu (rosnąco)': 'Cena zakupu (rosnąco)',\n        'Cena zakupu (malejąco)': 'Cena zakupu (malejąco)',\n        'Rok zakupu (rosnąco)': 'Rok zakupu (rosnąco)',\n        'Rok zakupu (malejąco)': 'Rok zakupu (malejąco)',\n        'Ilość (rosnąco)': 'Ilość (rosnąco)',\n        'Ilość (malejąco)': 'Ilość (malejąco)',\n        'Zysk (rosnąco)': 'Zysk (rosnąco)',\n        'Zysk (malejąco)': 'Zysk (malejąco)',\n        'Data dodania (rosnąco)': 'Data dodania (rosnąco)',\n        'Data dodania (malejąco)': 'Data dodania (malejąco)',\n        'Wpisz szukany element...': 'Wpisz szukany element...',\n        'Zaznacz wiele': 'Zaznacz wiele',\n        'Usuń zaznaczone': 'Usuń zaznaczone',\n        'Anuluj zaznaczenie': 'Anuluj zaznaczenie',\n        'Magazyn jest pusty': 'Magazyn jest pusty',\n        'Dodaj pierwszy produkt korzystając z przycisku \"Dodaj nowy produkt\" w sekcji Kontrolki lub sidebar.': 'Dodaj pierwszy produkt korzystając z przycisku \"Dodaj nowy produkt\" w sekcji Kontrolki lub sidebar.'\n    };\n\n    // Połącz ręczne teksty z automatycznie znalezionymi\n    const allTexts = { ...texts, ...manualTexts };\n\n    // Sortuj alfabetycznie dla lepszej czytelności\n    const sortedTexts = {};\n    Object.keys(allTexts).sort().forEach(key => {\n        sortedTexts[key] = allTexts[key];\n    });\n\n    // Stwórz i pobierz plik JSON\n    const dataStr = JSON.stringify(sortedTexts, null, 2);\n    const dataBlob = new Blob([dataStr], {type: 'application/json'});\n    \n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'translation_base_PL.json';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    console.log('Wyeksportowano teksty do tłumaczenia:', sortedTexts);\n    showNotification('Stałe teksty wyeksportowane do pliku JSON', 'success');\n    \n    return sortedTexts;\n}\nwindow.exportTranslations = exportTextsForTranslation;\nwindow.quickExport = quickExportTranslations;\nfunction quickExportTranslations() {\n    console.log('Eksportowanie tekstów do tłumaczenia...');\n    const result = exportTextsForTranslation();\n    console.log('Wyeksportowane teksty:', result);\n}\n// Wywołaj inicjalizację po załadowaniu DOM\ndocument.addEventListener('DOMContentLoaded', initLanguageSystem);\nlet paginationConfig = JSON.parse(localStorage.getItem('paginationConfig')) || {\n  productsPerPage: 20,\n  categoriesPerPage: 10,\n  effectsPerPage: 10,\n  shopsPerPage: 10,\n  currenciesPerPage: 10,\n  logsPerPage: 10,\n  galleryItemsPerPage: 16,\n  backgroundItemsPerPage: 10\n}\nlet currencyConfig = JSON.parse(localStorage.getItem('currencyConfig')) || {\n    extendedStatsCurrency: 'PLN',\n    mainStatsCurrency: 'PLN',\n    priceDiffCurrency: 'PLN', \n    priceHistoryCurrency: 'PLN',\n    otherListsCurrency: 'PLN',\n    goldBuybackCurrency: 'PLN'\n};\nconst SOUND_URLS = {\n  success: \"data:audio/mpeg;base64,n  alert: \"data:audio/mpeg;base64,\"\n};\nlet priceTrendAllow = false;\nlet productsCurrentPage = 1;\nlet categoriesCurrentPage = 1;\nlet effectsCurrentPage = 1;\nlet shopsCurrentPage = 1;\nlet currenciesCurrentPage = 1;\nlet eventLogs = [];\nlet productNameHelpModalTimeout = null;\nlet isHelpModalOpen = false;\nlet logsCurrentPage = 1;\nlet logsPerPage = paginationConfig.logsPerPage;\nlet currentDisplayedProducts = [];\nlet currentFilter = 'all';\nlet currentSort = 'date-asc';\nlet currentSearch = '';\nlet editingProductIndex = null;\nlet priceTrendCache = JSON.parse(localStorage.getItem('priceTrendCache')) || {};\nconst PRICE_TREND_CACHE_DURATION = 3 * 60 * 60 * 1000;\nlet soundAllowed = false;\ndocument.addEventListener('click', () => { soundAllowed = true; }, { once: true });\nlet confirmationCallback = null;\nlet confirmationContext = null;\nlet editingShopId = null;\nlet showControlsPanel = true;\nlet showHamburgerOnDesktop = false;\nlet showInstructionButton = true;\nlet showStatisticsSection = true;\nlet showNotifications = true;\nlet showAdvancedButtons = true;\nlet editingCategoryIndex = null;\nlet editingGalleryImageIndex = null;\nlet editingCurrencyCode = null;\nlet galleryCurrentPage = 1;\nlet galleryTotalPages = 1;\nlet galleryFilteredImages = [];\nlet galleryDisplayedIndexes = [];\nlet notificationQueue = [];\nlet isNotificationVisible = false;\nlet audioContextUnlocked = false;\nlet galleryOpenMode = null;\nlet selectedImageUrl = null;\nlet gallerySearchTerm = '';\nlet gallerySelectionMode = false;\nlet selectedGalleryImages = [];\nlet galleryImages = [];\nlet backgroundImages = [];\nlet backgroundCurrentPage = 1;\nlet backgroundTotalPages = 1;\nlet backgroundSelectionMode = false;\nlet selectedBackgroundImages = [];\nlet selectedBackgroundId = null;\nlet backgroundSearchTerm = '';\nlet editingBackgroundIndex = null;\nconst CARD_CONDITIONS = ['Mint', 'Near Mint', 'Excellent', 'Good', 'Light Played', 'Played', 'Poor'];\nconst LANGUAGES = ['Angielski', 'Japoński', 'Francuski', 'Niemiecki', 'Hiszpański', 'Włoski', 'Portugalski'];\nlet effects = JSON.parse(localStorage.getItem('effects')) || [];\nconst defaultEffects = [\n  \"Common & Uncommon\",\n  \"Reverse Holo non-rares\",\n  \"Holofoil Rare\",\n  \"Galaxy/Cosmos Holofoil\",\n  \"Holofoil Amazing Rare\",\n  \"Radiant Holofoil\",\n  \"Trainer Gallery Holofoil\",\n  \"Pokemon V\",\n  \"Pokemon V (Full Art)\",\n  \"Pokemon V (Alternate Art)\",\n  \"VMax\",\n  \"VMax (Alternate/Rainbow)\",\n  \"VStar\",\n  \"Trainer Holo (Full Art / Trainer Gallery)\",\n  \"Rainbow Rare (VMax, VStar)\",\n  \"Secret Rare (Gold)\",\n  \"Trainer Gallery (V / VMax)\",\n  \"Shiny Vault (Basic / Stage 1 / V / VMax)\"\n];\ndefaultEffects.forEach(defaultEffect => {\n    const exists = effects.some(effect => effect === defaultEffect);\n    if (!exists) {\n        effects.push(defaultEffect);\n    }\n});\nlocalStorage.setItem('effects', JSON.stringify(effects));\nlet editingEffectIndex = null;\nlet goldBuybackInterval = null;\nlet lastGoldBuybackUpdate = null;\nlet systemFontsLoaded = false;\nconst darkModeToggle = document.getElementById('darkModeToggle');\nconst darkModeIcon = document.getElementById('darkModeIcon');\nlet darkMode = localStorage.getItem('darkMode') === 'true';\nlet products = JSON.parse(localStorage.getItem('products')) || [];\nconst productList = document.getElementById('productList');\nconst totalValue = document.getElementById('totalValue');\nconst purchaseValue = document.getElementById('purchaseValue');\nconst currentValue = document.getElementById('currentValue');\nconst valueDifference = document.getElementById('valueDifference');\nconst totalProfit = document.getElementById('totalProfit');\nconst totalLoss = document.getElementById('totalLoss');\nconst profitPercentage = document.getElementById('profitPercentage');\nconst lossPercentage = document.getElementById('lossPercentage');\nconst productsWithPrice = document.getElementById('productsWithPrice');\nconst totalProducts = document.getElementById('totalProducts');\nconst emptyState = document.getElementById('emptyState');\nconst form = document.getElementById('productForm');\nconst notification = document.getElementById('notification');\nconst selectionControls = document.getElementById('selectionControls');\nconst originalShowConfirmation = showConfirmation;\nlet categories = JSON.parse(localStorage.getItem('categories')) || [];\nconst PROTECTED_CATEGORY_NAMES = [\n  'Inne', 'Złoto', 'Singles',\n  'Boosters','Booster Box','Elite Trainer Box','Ultra Premium',\n  'Tins','Mini Tins','Blisters','Trainer Kits','Theme Decks','Box Sets','Akcesoria'\n];\nconst defaultCategories = [\n  { name: 'Inne', bg: '#ededed', text: '#333' },\n  { name: 'Złoto', bg: '#FFD700', text: '#000' },\n  { name: 'Singles', bg: '#6a1b9a', text: '#ffffff' },\n  { name: 'Boosters', bg: '#30e62d', text: '#ffffff' },\n  { name: 'Booster Box', bg: '#d80e0e', text: '#ffffff' },\n  { name: 'Elite Trainer Box', bg: '#577be5', text: '#ffffff' },\n  { name: 'Ultra Premium', bg: '#d35cff', text: '#ffffff' },\n  { name: 'Tins', bg: '#1fd690', text: '#ffffff' },\n  { name: 'Mini Tins', bg: '#4421f2', text: '#ffffff' },\n  { name: 'Blisters', bg: '#c44703', text: '#ffffff' },\n  { name: 'Trainer Kits', bg: '#2ff9eb', text: '#333' },\n  { name: 'Theme Decks', bg: '#f96cd3', text: '#333' },\n  { name: 'Box Sets', bg: '#d7f019', text: '#333' },\n  { name: 'Akcesoria', bg: '#000000', text: '#ffffff' }\n];\ndefaultCategories.forEach(defaultCat => {\n    const exists = categories.some(cat => cat.name === defaultCat.name);\n    if (!exists) {\n        categories.push(defaultCat);\n    }\n});\nlocalStorage.setItem('categories', JSON.stringify(categories));\nconst categorySelect = document.getElementById('category');\nconst categoryFilter = document.getElementById('categoryFilter');\nlet currencySymbols = JSON.parse(localStorage.getItem('currencySymbols')) || { PLN: 'zł', EUR: '€', USD: '$' };\nlet exchangeRates = JSON.parse(localStorage.getItem('exchangeRates')) || { EUR: 4.25, USD: 3.62, PLN: 1.0, lastUpdated: null };\nlet selectedProducts = [];\nlet selectionMode = false;\nconst NBP_API_URL = 'https://api.nbp.pl/api/exchangerates/rates/a/';\nclass PokeballLoader {\n\tconstructor(elementId) {\n\t\tthis.element = document.getElementById(elementId);\n\t\tthis.textElement\t = this.element?.querySelector('.loader-text')\t|| null;\n\t\tthis.pokeballElement = this.element?.querySelector('.pokeball')\t\t|| null;\n\t\tthis.progress\t\t= 0;\n\t\tthis.isAnimating\t = false;\n\t}\n\tstart(progress = 0) {\n\t\tthis.isAnimating = true;\n\t\tif (this.element) {\n\t\t\tthis.element.style.display = 'flex';\n\t\t\tthis.element.classList.add('loading-active');\n\t\t\tthis.element.classList.remove('loading-complete');\n\t\t}\n\t\tdocument.body.classList.add('loading-active');\n\t\tthis.update(progress);\n\t\treturn this;\n\t}\n\tupdate(progress) {\n\t\tif (!this.isAnimating) return this;\n\t\tthis.progress = Math.max(0, Math.min(100, progress));\n\t\tif (this.textElement) {\n\t\t\tthis.textElement.textContent = `${Math.round(this.progress)}%`;\n\t\t}\n\t\treturn this;\n\t}\n\tcomplete() {\n\t\tif (this.element) {\n\t\t\tthis.element.classList.remove('loading-active');\n\t\t\tthis.element.classList.add('loading-complete');\n\t\t}\n\t\tthis.update(100);\n\t\treturn this;\n\t}\n\treset() {\n\t\tthis.progress = 0;\n\t\tif (this.textElement) {\n\t\t\tthis.textElement.textContent = '0%';\n\t\t}\n\t\tif (this.element) {\n\t\t\tthis.element.style.display = 'none';\n\t\t\tthis.element.classList.remove('loading-active', 'loading-complete');\n\t\t}\n\t\tdocument.body.classList.remove('loading-active');\n\t\tthis.isAnimating = false;\n\t\treturn this;\n\t}\n}\nclass PriceHistory {\n  constructor(dbName = 'product_db', storeName = 'price_history') {\n    this.dbName = dbName;\n    this.storeName = storeName;\n    this.dbPromise = this.openDB();\n  }\n  async openDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, 3);\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        const oldVersion = event.oldVersion;\n        if (oldVersion < 1) {\n          const store = db.createObjectStore(this.storeName, {\n            keyPath: 'id',\n            autoIncrement: true\n          });\n          store.createIndex('productId', 'productId', { unique: false });\n        }\n        if (oldVersion < 2) {\n          const transaction = event.target.transaction;\n          const store = transaction.objectStore(this.storeName);\n          \n          if (!store.indexNames.contains('date')) {\n            store.createIndex('date', 'date', { unique: false });\n          }\n        }\n        if (oldVersion < 3) {\n          logEvent(\"Migracja do wersji 3 bazy danych\");\n        }\n      };\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        this.migrateOldRecords(db).then(() => {\n          resolve(db);\n        }).catch(error => {\n          logEvent('Błąd migracji rekordów:', error);\n          resolve(db);\n        });\n      };\n      \n      request.onerror = (event) => reject(event.target.error);\n    });\n  }\n  async migrateOldRecords(db) {\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      const request = store.getAll();\n      request.onsuccess = async () => {\n        const records = request.result;\n        let updatedCount = 0;\n        let needsHistoricalUpdate = false;\n        for (const record of records) {\n          let shouldUpdate = false;\n          if (record.exchangeRate === undefined) {\n            record.exchangeRate = exchangeRates[record.currency] || 1;\n            record.needsHistoricalUpdate = true;\n            shouldUpdate = true;\n            needsHistoricalUpdate = true;\n          }\n          if (record.needsHistoricalUpdate === undefined) {\n            record.needsHistoricalUpdate = false;\n            shouldUpdate = true;\n          }\n          \n          if (shouldUpdate) {\n            await store.put(record);\n            updatedCount++;\n          }\n        }\n\n        if (updatedCount > 0) {\n          if (needsHistoricalUpdate) {\n            this.updateHistoricalRatesInBackground();\n          }\n        }\n        resolve();\n      };\n\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async updateHistoricalRatesInBackground() {\n    setTimeout(async () => {\n      try {\n        const updatedCount = await this.updateHistoricalRates();\n        if (updatedCount > 0) {\n          showNotification(`Zaktualizowano historyczne kursy dla ${updatedCount} rekordów`, 'success');\n        }\n      } catch (error) {\n        logEvent('Błąd aktualizacji historycznych kursów:', error);\n      }\n    }, 5000);\n  }\n\n  async getHistoricalExchangeRate(currency, date) {\n    if (currency === 'PLN') return 1;\n    const formattedDate = date.toISOString().split('T')[0];\n    try {\n      const cacheKey = `historical_rate_${currency}_${formattedDate}`;\n      const cachedRate = localStorage.getItem(cacheKey);\n      \n      if (cachedRate) {\n        return parseFloat(cachedRate);\n      }\n      const response = await fetch(`https://api.nbp.pl/api/exchangerates/rates/a/${currency}/${formattedDate}/?format=json`);\n      if (!response.ok) {\n        return await this.getLastAvailableRate(currency, date);\n      }\n      const data = await response.json();\n      const rate = data.rates[0].mid;\n      localStorage.setItem(cacheKey, rate.toString());\n      return rate;\n    } catch (error) {\n      logEvent(`Błąd pobierania historycznego kursu dla ${currency} z dnia ${formattedDate}:`, error);\n      return await this.getLastAvailableRate(currency, date) || exchangeRates[currency] || 1;\n    }\n  }\n  async getLastAvailableRate(currency, date) {\n    for (let i = 1; i <= 7; i++) {\n      const previousDate = new Date(date);\n      previousDate.setDate(previousDate.getDate() - i);\n      \n      const formattedDate = previousDate.toISOString().split('T')[0];\n      const cacheKey = `historical_rate_${currency}_${formattedDate}`;\n      const cachedRate = localStorage.getItem(cacheKey);\n      \n      if (cachedRate) {\n        return parseFloat(cachedRate);\n      }\n      try {\n        const response = await fetch(`https://api.nbp.pl/api/exchangerates/rates/a/${currency}/${formattedDate}/?format=json`);\n        \n        if (response.ok) {\n          const data = await response.json();\n          const rate = data.rates[0].mid;\n          localStorage.setItem(cacheKey, rate.toString());\n          return rate;\n        }\n      } catch (error) {\n        logEvent(`Błąd pobierania kursu z dnia ${formattedDate}:`, error);\n      }\n    }\n    return null;\n  }\n  async getPriceHistory(productId) {\n    const db = await this.dbPromise;\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readonly');\n      const store = tx.objectStore(this.storeName);\n      const index = store.index('productId');\n      const request = index.getAll(IDBKeyRange.only(productId));\n      request.onsuccess = () => {\n        const data = request.result\n          .map(item => ({ \n            id: item.id,\n            date: new Date(item.date), \n            price: item.price,\n            currency: item.currency,\n            exchangeRate: item.exchangeRate,\n            needsHistoricalUpdate: item.needsHistoricalUpdate || false\n          }))\n          .sort((a, b) => a.date - b.date);\n        resolve(data);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n  async addPricePoint(productId, price, currency, date = new Date()) {\n    const db = await this.dbPromise;\n    const exchangeRate = exchangeRates[currency];\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      const request = store.add({\n        id: generateUniqueId(),\n        productId,\n        price,\n        currency,\n        exchangeRate,\n        needsHistoricalUpdate: false,\n        date: date.toISOString()\n      });\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n  async updateHistoricalRates() {\n    const db = await this.dbPromise;\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      const request = store.getAll();\n      request.onsuccess = async () => {\n        const records = request.result;\n        let updatedCount = 0;\n        for (const record of records) {\n          if (record.needsHistoricalUpdate) {\n            const historicalRate = await this.getHistoricalExchangeRate(\n              record.currency, \n              new Date(record.date)\n            );\n            if (historicalRate && historicalRate !== record.exchangeRate) {\n              record.exchangeRate = historicalRate;\n              record.needsHistoricalUpdate = false;\n              await store.put(record);\n              updatedCount++;\n            }\n          }\n        }\n        resolve(updatedCount);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\nconst priceHistory = new PriceHistory();\nfunction openPaginationConfigModal() {\n  document.getElementById('productsPerPageInput').value = paginationConfig.productsPerPage;\n  document.getElementById('categoriesPerPageInput').value = paginationConfig.categoriesPerPage;\n  document.getElementById('effectsPerPageInput').value = paginationConfig.effectsPerPage;\n  document.getElementById('shopsPerPageInput').value = paginationConfig.shopsPerPage;\n  document.getElementById('currenciesPerPageInput').value = paginationConfig.currenciesPerPage;\n  document.getElementById('logsPerPageInput').value = paginationConfig.logsPerPage;\n  document.getElementById('galleryItemsPerPageInput').value = paginationConfig.galleryItemsPerPage;\n  document.getElementById('backgroundItemsPerPageInput').value = paginationConfig.backgroundItemsPerPage;\n  document.getElementById('paginationConfigModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('paginationConfigModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction closePaginationConfigModal() {\n  document.getElementById('paginationConfigModal').classList.remove('show');\n}\nfunction savePaginationConfig() {\n  paginationConfig.productsPerPage = parseInt(document.getElementById('productsPerPageInput').value) || 20;\n  paginationConfig.categoriesPerPage = parseInt(document.getElementById('categoriesPerPageInput').value) || 10;\n  paginationConfig.effectsPerPage = parseInt(document.getElementById('effectsPerPageInput').value) || 10;\n  paginationConfig.shopsPerPage = parseInt(document.getElementById('shopsPerPageInput').value) || 10;\n  paginationConfig.currenciesPerPage = parseInt(document.getElementById('currenciesPerPageInput').value) || 10;\n  paginationConfig.logsPerPage = parseInt(document.getElementById('logsPerPageInput').value) || 10;\n  paginationConfig.galleryItemsPerPage = parseInt(document.getElementById('galleryItemsPerPageInput').value) || 16;\n  paginationConfig.backgroundItemsPerPage = parseInt(document.getElementById('backgroundItemsPerPageInput').value) || 18;\n  if (paginationConfig.productsPerPage < 5) paginationConfig.productsPerPage = 5;\n  if (paginationConfig.productsPerPage > 100) paginationConfig.productsPerPage = 100;\n  if (paginationConfig.categoriesPerPage < 5) paginationConfig.categoriesPerPage = 5;\n  if (paginationConfig.categoriesPerPage > 50) paginationConfig.categoriesPerPage = 50;\n  if (paginationConfig.effectsPerPage < 5) paginationConfig.effectsPerPage = 5;\n  if (paginationConfig.effectsPerPage > 50) paginationConfig.effectsPerPage = 50;\n  if (paginationConfig.shopsPerPage < 5) paginationConfig.shopsPerPage = 5;\n  if (paginationConfig.shopsPerPage > 50) paginationConfig.shopsPerPage = 50;\n  if (paginationConfig.currenciesPerPage < 5) paginationConfig.currenciesPerPage = 5;\n  if (paginationConfig.currenciesPerPage > 50) paginationConfig.currenciesPerPage = 50;\n  if (paginationConfig.logsPerPage < 5) paginationConfig.logsPerPage = 5;\n  if (paginationConfig.logsPerPage > 50) paginationConfig.logsPerPage = 50;\n  if (paginationConfig.galleryItemsPerPage < 8) paginationConfig.galleryItemsPerPage = 8;\n  if (paginationConfig.galleryItemsPerPage > 48) paginationConfig.galleryItemsPerPage = 48;\n  if (paginationConfig.galleryItemsPerPage % 4 !== 0) {\n    paginationConfig.galleryItemsPerPage = Math.round(paginationConfig.galleryItemsPerPage / 4) * 4;\n  }\n  if (paginationConfig.backgroundItemsPerPage < 6) paginationConfig.backgroundItemsPerPage = 6;\n  if (paginationConfig.backgroundItemsPerPage > 36) paginationConfig.backgroundItemsPerPage = 36;\n  if (paginationConfig.backgroundItemsPerPage % 6 !== 0) {\n    paginationConfig.backgroundItemsPerPage = Math.round(paginationConfig.backgroundItemsPerPage / 6) * 6;\n  }\n  localStorage.setItem('paginationConfig', JSON.stringify(paginationConfig));\n  const refreshModal = (modalId, currentPageVar, renderFunction) => {\n    const modal = document.getElementById(modalId);\n    if (modal && modal.classList.contains('show')) {\n      currentPageVar = 1;\n      renderFunction();\n    }\n  };\n  refreshModal('productsModal', productsCurrentPage, () => renderProducts(applyAllFilters()));\n  refreshModal('categoriesModal', categoriesCurrentPage, renderCategoriesList);\n  refreshModal('effectsModal', effectsCurrentPage, renderEffectsList);\n  refreshModal('shopsModal', shopsCurrentPage, renderShopsList);\n  refreshModal('exchangeModal', currenciesCurrentPage, renderExchangeRates);\n  refreshModal('logsModal', logsCurrentPage, renderLogs);\n  refreshModal('galleryModal', galleryCurrentPage, renderGallery);\n  refreshModal('backgroundModal', backgroundCurrentPage, renderBackgrounds);\n  closePaginationConfigModal();\n  logEvent('Zaktualizowano konfigurację paginacji');\n  showNotification('Konfiguracja paginacji zapisana', 'success');\n  playNotificationSound('success');\n}\nfunction addPaginationInfo() {\n  const containers = [\n    { id: 'productsPagination', type: 'produktów', value: paginationConfig.productsPerPage },\n    { id: 'categoriesPagination', type: 'kategorii', value: paginationConfig.categoriesPerPage },\n    { id: 'effectsPagination', type: 'efektów', value: paginationConfig.effectsPerPage },\n    { id: 'shopsPagination', type: 'sklepów', value: paginationConfig.shopsPerPage },\n    { id: 'currenciesPagination', type: 'walut', value: paginationConfig.currenciesPerPage },\n    { id: 'logsPagination', type: 'logów', value: paginationConfig.logsPerPage }\n  ];\n}\nasync function renderPriceHistoryChart(productId) {\n    const chartContainer = document.querySelector('.price-chart-container');\n    if (!chartContainer) return;\n    chartContainer.innerHTML = '<div class=\"price-chart-loading\"></div>';\n    try {\n        const history = await priceHistory.getPriceHistory(productId);\n        if (!history || history.length < 2) {\n            chartContainer.innerHTML = '<div class=\"no-data-message\">Wymagane minimum 2 punkty danych</div>';\n            return;\n        }\n        const isMobile = window.innerWidth <= 768;\n        const labels = [];\n        const data = [];\n        const needsUpdate = history.some(point => point.needsHistoricalUpdate);\n        if (needsUpdate) {\n            chartContainer.innerHTML = `\n                <div class=\"historical-update-info\">\n                    <p>Trwa aktualizacja historycznych kursów walut...</p>\n                    <div class=\"progress-bar\">\n                        <div class=\"progress\"></div>\n                    </div>\n                    <p>Wykres zostanie odświeżony automatycznie</p>\n                </div>\n            `;\n            setTimeout(() => {\n                renderPriceHistoryChart(productId);\n            }, 3000);\n            return;\n        }\n        const targetCurrency = currencyConfig.priceHistoryCurrency;\n        history.forEach(entry => {\n            const date = new Date(entry.date);\n            labels.push(`${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`);\n            const convertedValue = convertToCurrency(entry.price, entry.currency, targetCurrency);\n            data.push(convertedValue);\n        });\n        chartContainer.innerHTML = '<canvas id=\"priceHistoryChart\"></canvas>';\n        const ctx = document.getElementById('priceHistoryChart').getContext('2d');\n        if (window.priceChartInstance) {\n            window.priceChartInstance.destroy();\n        }\n        window.priceHistoryData = history;\n        window.priceChartInstance = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: `Cena (${getCurrencySymbol(targetCurrency)})`,\n                    data: data,\n                    borderColor: '#4DB6AC',\n                    backgroundColor: 'rgba(77, 182, 172, 0.1)',\n                    borderWidth: 3,\n                    pointBackgroundColor: '#00796B',\n                    pointBorderColor: '#004D40',\n                    pointRadius: isMobile ? 3 : 5,\n                    pointHoverRadius: isMobile ? 5 : 7,\n                    tension: 0.4,\n                    fill: true\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const point = history[context.dataIndex];\n                                const convertedValue = convertToCurrency(point.price, point.currency, targetCurrency);\n                                return `Cena: ${convertedValue.toFixed(2)} ${getCurrencySymbol(targetCurrency)} (${point.price} ${point.currency})`;\n                            },\n                            afterLabel: function(context) {\n                                const point = history[context.dataIndex];\n                                return `Kurs: 1 ${point.currency} = ${point.exchangeRate} PLN`;\n                            }\n                        }\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: false,\n                        grid: {\n                            color: 'rgba(0, 0, 0, 0.05)'\n                        },\n                        ticks: {\n                            display: !isMobile,\n                            callback: function(value) {\n                                return value.toFixed(2) + ` ${getCurrencySymbol(targetCurrency)}`;\n                            }\n                        },\n                        title: {\n                            display: !isMobile,\n                            text: `Aktualna cena (${getCurrencySymbol(targetCurrency)})`\n                        }\n                    },\n                    x: {\n                        grid: {\n                            display: false\n                        },\n                        ticks: {\n                            display: !isMobile\n                        }\n                    }\n                },\n                animation: {\n                    duration: 1000,\n                    easing: 'easeOutQuart'\n                }\n            }\n        });\n        ctx.canvas.onclick = async (event) => {\n            const points = window.priceChartInstance.getElementsAtEventForMode(\n                event, 'nearest', { intersect: true }, true\n            );\n            if (points.length) {\n                const pointIndex = points[0].index;\n                const point = history[pointIndex];\n                showPointDetails(point);\n            }\n        };\n    } catch (error) {\n        logEvent('Błąd renderowania wykresu:', error);\n        chartContainer.innerHTML = '<div class=\"error-message\">Błąd generowania wykresu</div>';\n    }\n}\ndocument.getElementById('reloadSound').addEventListener('click', function(e) {\n  e.preventDefault();\n  const successAudio = new Audio(SOUND_URLS.success);\n  successAudio.load().catch(e => logEvent('Failed to load success sound', e));\n  const alertAudio = new Audio(SOUND_URLS.alert);\n  alertAudio.load().catch(e => logEvent('Failed to load alert sound', e));\n  showNotification('Dźwięki zostały przeładowane. Spróbuj ponownie.', 'info');\n});\nfunction convertToPLN(amount, currency) {\n    if (currency === 'PLN') {\n        return amount;\n    }\n    if (!exchangeRates[currency]) {\n        logEvent(`Nieznana waluta: ${currency}. Dostępne kursy:`, exchangeRates);\n        throw new Error(`Nieznana waluta: ${currency}`);\n    }\n    const rate = exchangeRates[currency];\n    if (isNaN(rate) || rate <= 0) {\n        logEvent(`Nieprawidłowy kurs wymiany dla ${currency}: ${rate}`);\n        throw new Error(`Nieprawidłowy kurs wymiany dla ${currency}`);\n    }\n    return amount * rate;\n}\nfunction handleResponsiveLayout() {\n  const sidebar = document.getElementById('sidebar');\n  const controlsPanel = document.querySelector('.controls-panel');\n  const hamburger = document.getElementById('hamburger');\n  if (window.innerWidth <= 992) {\n    if (hamburger) hamburger.style.display = 'flex';\n    if (controlsPanel) controlsPanel.style.display = 'none';\n    if (sidebar) {\n      sidebar.style.display = 'block';\n      sidebar.classList.remove('show');\n    }\n  } else {\n    if (hamburger) hamburger.style.display = showHamburgerOnDesktop ? 'flex' : 'none';\n    if (controlsPanel) controlsPanel.style.display = showControlsPanel ? 'block' : 'none';\n    if (sidebar) {\n      sidebar.style.display = showHamburgerOnDesktop ? 'block' : 'none';\n      sidebar.classList.remove('show');\n      document.getElementById('sidebarOverlay').classList.remove('show');\n    }\n  }\n}\nasync function migrateExistingProducts() {\n  const loader = new PokeballLoader('pokeballLoader').start(0);\n  try {\n    for (const [index, product] of products.entries()) {\n      loader.update((index / products.length) * 80);\n      if (!product.id) {\n        product.id = generateUniqueId();\n      }\n      const history = await priceHistory.getPriceHistory(product.id);\n      if (history.length === 0) {\n        const initialPrice = product.currentPrice !== null ? \n          product.currentPrice : product.price;\n        const initialCurrency = product.currentPrice !== null ? \n          (product.currentCurrency || product.currency) : product.currency;\n        await priceHistory.addPricePoint(\n          product.id,\n          initialPrice,\n          initialCurrency,\n          new Date(product.dateAdded)\n        );\n        const db = await priceHistory.dbPromise;\n        const tx = db.transaction('price_history', 'readwrite');\n        const store = tx.objectStore('price_history');\n        const allPoints = await store.getAll();\n        for (const point of allPoints) {\n            if (!point.id) {\n                point.id = generateUniqueId();\n                await store.put(point);\n            }\n        }\n      }\n    }\n    showNotification('Zaktualizowano historię cen dla istniejących produktów', 'success');\n    playNotificationSound('success');\n  } catch (error) {\n    logEvent('Błąd migracji produktów:', error);\n    showNotification('Błąd podczas aktualizacji historii cen', 'danger');\n  } finally {\n    loader.complete();\n    setTimeout(() => loader.reset(), 500);\n  }\n}\nfunction initLogs() {\n    const savedLogs = localStorage.getItem('eventLogs');\n    if (savedLogs) {\n        try {\n            eventLogs = JSON.parse(savedLogs);\n            cleanupOldLogs();\n        } catch (e) {\n            eventLogs = [];\n            logEvent('Błąd parsowania logów, zainicjowano nowe');\n        }\n    } else {\n        logEvent('Aplikacja została uruchomiona');\n    }\n}\ndocument.addEventListener('DOMContentLoaded', initLogs);\nfunction saveLogs() {\n  localStorage.setItem('eventLogs', JSON.stringify(eventLogs));\n}\nfunction applyAllFilters() {\n  let result = [...products];\n  if (currentFilter !== 'all') {\n    result = result.filter(p => p.category === currentFilter);\n  }\n  if (currentSearch) {\n    const term = currentSearch.toLowerCase();\n    result = result.filter(p => \n      p.name.toLowerCase().includes(term) || \n      p.category.toLowerCase().includes(term) ||\n      (p.effect && p.effect.toLowerCase().includes(term)) ||\n      String(p.year).includes(term)\n    );\n  }\n  result = sortList(result, currentSort);\n  return result;\n}\nfunction sortList(list, criteria) {\n  return [...list].sort((a, b) => {\n    if (criteria === 'name-asc') return a.name.localeCompare(b.name);\n    if (criteria === 'name-desc') return b.name.localeCompare(a.name);\n    if (criteria === 'category-asc') return a.category.localeCompare(b.category);\n    if (criteria === 'category-desc') return b.category.localeCompare(a.category);\n    if (criteria === 'price-asc') return a.price - b.price;\n    if (criteria === 'price-desc') return b.price - a.price;\n    if (criteria === 'year-asc') return a.year - b.year;\n    if (criteria === 'year-desc') return b.year - a.year;\n    if (criteria === 'quantity-asc') return a.quantity - b.quantity;\n    if (criteria === 'quantity-desc') return b.quantity - a.quantity;\n    if (criteria === 'date-asc') return new Date(a.dateAdded) - new Date(b.dateAdded);\n    if (criteria === 'date-desc') return new Date(b.dateAdded) - new Date(a.dateAdded);\n    if (criteria.includes('profit')) {\n      const calcProfit = (p) => {\n        if (!p.currentPrice) return 0;\n        const purchasePLN = convertToPLN(p.price, p.currency);\n        const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n        return (currentPLN - purchasePLN) * p.quantity;\n      };\n      const profitA = calcProfit(a);\n      const profitB = calcProfit(b);\n      return criteria === 'profit-asc' ? profitA - profitB : profitB - profitA;\n    }\n    return 0;\n  });\n}\nfunction logEvent(message) {\n  const timestamp = new Date().toISOString();\n  eventLogs.push({ timestamp, message });\n  saveLogs();\n}\nfunction renderLogs() {\n  const logsList = document.getElementById('logsList');\n  logsList.innerHTML = '';\n  const reversedLogs = [...eventLogs].reverse();\n  const startIndex = (logsCurrentPage - 1) * logsPerPage;\n  const endIndex = Math.min(startIndex + logsPerPage, reversedLogs.length);\n  const logsToShow = reversedLogs.slice(startIndex, endIndex);\n  \n  if (logsToShow.length === 0) {\n    logsList.innerHTML = '<div class=\"log-entry\">Brak zdarzeń w historii</div>';\n  } else {\n    logsToShow.forEach(log => {\n      const logEntry = document.createElement('div');\n      logEntry.className = 'log-entry';\n      const dateObj = new Date(log.timestamp);\n      const formattedDate = dateObj.toLocaleString('pl-PL', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n      logEntry.innerHTML = `\n        <span class=\"log-date\">${formattedDate}</span>\n        <span class=\"log-message\">${log.message}</span>\n      `;\n      logsList.appendChild(logEntry);\n    });\n  }\n  renderLogsPagination(reversedLogs.length);\n}\nfunction renderLogsPagination(totalLogs) {\n  const paginationContainer = document.getElementById('logsPagination');\n  if (!paginationContainer) return;\n  \n  paginationContainer.innerHTML = '';\n  const totalPages = Math.ceil(totalLogs / logsPerPage);\n  \n  const prevButton = document.createElement('button');\n  prevButton.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevButton.disabled = logsCurrentPage === 1;\n  prevButton.addEventListener('click', () => {\n    if (logsCurrentPage > 1) {\n      logsCurrentPage--;\n      renderLogs();\n    }\n  });\n  \n  const nextButton = document.createElement('button');\n  nextButton.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextButton.disabled = logsCurrentPage === totalPages;\n  nextButton.addEventListener('click', () => {\n    if (logsCurrentPage < totalPages) {\n      logsCurrentPage++;\n      renderLogs();\n    }\n  });\n  \n  const pageInfo = document.createElement('span');\n  pageInfo.className = 'page-info';\n  pageInfo.textContent = `Strona ${logsCurrentPage} z ${totalPages}`;\n  \n  paginationContainer.appendChild(prevButton);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextButton);\n}\nfunction clearLogs() {\n  showConfirmation(\n    'Potwierdzenie',\n    'Czy na pewno chcesz wyczyścić całą historię zdarzeń?',\n    (confirmed) => {\n      if (confirmed) {\n        eventLogs = [];\n        saveLogs();\n        logsCurrentPage = 1;\n        renderLogs();\n        showNotification('Historia zdarzeń została wyczyszczona', 'success');\n\t\tplayNotificationSound('success');\n      }\n    }\n  );\n}\nfunction openLogsModal() {\n  logsCurrentPage = 1;\n  renderLogs();\n  document.getElementById('logsModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('logsModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction closeLogsModal() {\n  logEvent('Historia zdarzeń została zamknięta');\n  document.getElementById('logsModal').classList.remove('show');\n}\nfunction positionConfirmationModal() {\n\tconst confirmationModal = document.getElementById('deleteConfirmationModal');\n\tconst effectsModal = document.getElementById('effectsModal');\n\tif (effectsModal.classList.contains('show')) {\n\t\tconst rect = effectsModal.getBoundingClientRect();\n\t\tconfirmationModal.style.position = 'fixed';\n\t\tconfirmationModal.style.top = `${rect.top + window.scrollY}px`;\n\t\tconfirmationModal.style.left = `${rect.left + window.scrollX}px`;\n\t\tconfirmationModal.style.width = `${rect.width}px`;\n\t}\n}\nfunction startCurrencyEdit(code) {\n\tif (['PLN', 'EUR', 'USD'].includes(code)) {\n\t\tshowNotification('Nie można edytować podstawowych walut', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\teditingCurrencyCode = code;\n\topenExchangeModal();\n}\nfunction openEffectsModal() {\n  if (!document.getElementById('effectsPagination')) {\n    const paginationDiv = document.createElement('div');\n    paginationDiv.id = 'effectsPagination';\n    paginationDiv.className = 'pagination-container';\n    document.querySelector('.effects-modal-content').appendChild(paginationDiv);\n  }\n  \n  effectsCurrentPage = 1;\n  renderEffectsList();\n  document.getElementById('effectsModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('effectsModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction closeEffectsModal() {\n\tdocument.getElementById('effectsModal').classList.remove('show');\n}\nfunction renderEffectsList() {\n  const list = document.getElementById('effectsList');\n  list.innerHTML = '';\n  const startIndex = (effectsCurrentPage - 1) * paginationConfig.effectsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.effectsPerPage, effects.length);\n  const pageEffects = effects.slice(startIndex, endIndex);\n  \n  if (pageEffects.length === 0) {\n    list.innerHTML = '<p class=\"empty-state\">Brak efektów</p>';\n    renderEffectsPagination();\n    return;\n  }\n  \n  pageEffects.forEach((effect, index) => {\n    const globalIndex = startIndex + index;\n    const isEditing = globalIndex === editingEffectIndex;\n    const isDefault = isDefaultEffect(effect);\n    const item = document.createElement('div');\n    item.className = 'effect-item';\n    \n    if (isEditing) {\n      item.innerHTML = `\n        <input type=\"text\" class=\"edit-effect-name\" value=\"${effect}\" placeholder=\"Nowa nazwa efektu\">\n        <div class=\"buttons\">\n          <button class=\"btn-success\" onclick=\"saveEffectEdit(${globalIndex})\">\n            <i class=\"fas fa-save\"></i> Zapisz\n          </button>\n          <button class=\"btn-danger\" onclick=\"cancelEffectEdit()\">\n            <i class=\"fas fa-times\"></i> Anuluj\n          </button>\n        </div>\n      `;\n    } else {\n      item.innerHTML = `\n        <span>${effect} ${isDefault ? '<i class=\"fas fa-lock\" title=\"Domyślny efekt\"></i>' : ''}</span>\n        <div class=\"actions\">\n          ${!isDefault ? `\n            <button class=\"btn-info edit-icon-btn\" onclick=\"startEffectEdit(${globalIndex})\" title=\"Edytuj nazwę\">\n              <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn-danger\" onclick=\"removeEffect(${globalIndex})\" title=\"Usuń efekt\">\n              <i class=\"fas fa-trash\"></i>\n            </button>\n          ` : `\n            <button class=\"btn-info edit-icon-btn\" disabled title=\"Nie można edytować domyślnego efektu\">\n              <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn-danger\" disabled title=\"Nie można usunąć domyślnego efektu\">\n              <i class=\"fas fa-trash\"></i>\n            </button>\n          `}\n        </div>\n      `;\n    }\n    list.appendChild(item);\n  });\n  \n  renderEffectsPagination();\n  addPaginationInfo();\n}\ndocument.addEventListener('deviceready', function() {\n  checkConnection();\n  document.addEventListener('offline', onOffline, false);\n  document.addEventListener('online', onOnline, false);\n});\nfunction checkConnection() {\n  var networkState = navigator.connection.type;\n  var states = {};\n  states[Connection.UNKNOWN] = 'Unknown connection';\n  states[Connection.ETHERNET] = 'Ethernet connection';\n  states[Connection.WIFI] = 'WiFi connection';\n  states[Connection.CELL_2G] = 'Cell 2G connection';\n  states[Connection.CELL_3G] = 'Cell 3G connection';\n  states[Connection.CELL_4G] = 'Cell 4G connection';\n  states[Connection.CELL] = 'Cell generic connection';\n  states[Connection.NONE] = 'No network connection';\n  \n  if (networkState === Connection.NONE) {\n    showNoInternetMessage();\n  } else {\n    hideNoInternetMessage();\n  }\n}\nfunction onOnline() {\n  hideNoInternetMessage();\n  setTimeout(function() {\n    location.reload();\n  }, 2000);\n}\ndocument.getElementById('resetFontPermission').addEventListener('click', resetFontPermission);\nfunction resetFontPermission() {\n    localStorage.removeItem('fontPermission');\n    systemFontsLoaded = false;\n    showNotification('Zgoda została zresetowana. Możesz teraz ponownie wyrazić zgodę na udostępnienie czcionek dla aplikacji.', 'info');\n\tshowFontPermissionDialog(fontSelector);\n}\nasync function checkAndUpdatePriceHistoryOnRateChange() {\n    try {\n        const today = new Date().toISOString().split('T')[0];\n        const productsToUpdate = [];\n        for (const product of products) {\n            if (product.currentPrice !== null && product.currentPrice !== undefined) {\n                const currency = product.currentCurrency || product.currency;\n                const currentRate = exchangeRates[currency];\n                if (currentRate) {\n                    const history = await priceHistory.getPriceHistory(product.id);\n                    const todayEntry = history.find(entry => {\n                        const entryDate = new Date(entry.date).toISOString().split('T')[0];\n                        return entryDate === today;\n                    });\n                    if (todayEntry) {\n                        const entryRate = todayEntry.exchangeRate;\n                        if (entryRate !== currentRate) {\n                            productsToUpdate.push({\n                                productId: product.id,\n                                price: product.currentPrice,\n                                currency: currency,\n                                rate: currentRate\n                            });\n                        }\n                    } else {\n                        productsToUpdate.push({\n                            productId: product.id,\n                            price: product.currentPrice,\n                            currency: currency,\n                            rate: currentRate\n                        });\n                    }\n                }\n            }\n        }\n        for (const item of productsToUpdate) {\n            await priceHistory.addPricePoint(\n                item.productId,\n                item.price,\n                item.currency,\n                new Date()\n            );\n        }\n        if (productsToUpdate.length > 0) {\n        }\n    } catch (error) {\n        logEvent('Błąd podczas aktualizacji historii cen:', error);\n    }\n}\nfunction onOffline() {\n  showNoInternetMessage();\n}\nfunction checkInternetConnection() {\n  if (!navigator.onLine) {\n    return false;\n  }\n  if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {\n    return checkIOSConnection();\n  }\n  return true;\n}\nfunction hideNoInternetMessage() {\n  const messageContainer = document.querySelector('.no-internet-container');\n  if (messageContainer) {\n    messageContainer.remove();\n  }\n  document.querySelector('main').style.display = 'block';\n  document.querySelector('header').style.display = 'flex';\n}\nwindow.addEventListener('online', function() {\n  hideNoInternetMessage();\n  showNotification('Połączenie internetowe zostało przywrócone', 'success');\n});\nwindow.addEventListener('offline', function() {\n  showNoInternetMessage();\n  showNotification('Utracono połączenie internetowe', 'danger');\n  setTimeout(function() {\n      location.reload();\n  }, 2000);\n});\ndocument.addEventListener('DOMContentLoaded', initConnectionMonitoring);\nfunction showNoInternetMessage() {\n  const loader = document.getElementById('pokeballLoader');\n  loader.style.setProperty(\"background-color\", \"black\", \"important\");\n  const loaderText = loader.querySelector('.loader-text');\n  loaderText.style.display = 'none';\n  const messageContainer = document.createElement('div');\n  messageContainer.className = 'no-internet-container';\n  messageContainer.style.textAlign = 'center';\n  messageContainer.style.color = '#fff';\n  const icon = document.createElement('i');\n  icon.className = 'fas fa-wifi';\n  icon.style.fontSize = '3rem';\n  icon.style.marginBottom = '1rem';\n  icon.style.display = 'block';\n  const title = document.createElement('h2');\n  title.textContent = 'Brak połączenia z internetem';\n  title.style.marginBottom = '1rem';\n  title.style.fontSize = '1.5rem';\n  const description = document.createElement('p');\n  description.textContent = 'Aby aplikacja działała, potrzebujesz połączyć urządzenie z internetem.';\n  description.style.marginBottom = '1.5rem';\n  description.style.fontSize = '1rem';\n  description.style.opacity = '0.8';\n  const retryButton = document.createElement('button');\n  retryButton.textContent = 'Spróbuj ponownie';\n  retryButton.className = 'btn-success';\n  retryButton.style.marginTop = '1rem';\n  retryButton.onclick = function() {\n    location.reload();\n  };\n  messageContainer.appendChild(icon);\n  messageContainer.appendChild(title);\n  messageContainer.appendChild(description);\n  messageContainer.appendChild(retryButton);\n  loader.innerHTML = '';\n  loader.appendChild(messageContainer);\n  loader.style.display = 'flex';\n  window.addEventListener('online', function() {\n    location.reload();\n  });\n}\nfunction renderEffectsPagination() {\n  const paginationContainer = document.getElementById('effectsPagination');\n  if (!paginationContainer) return;\n  paginationContainer.innerHTML = '';\n  const totalPages = Math.ceil(effects.length / paginationConfig.effectsPerPage);\n  const prevBtn = document.createElement('button');\n  prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevBtn.disabled = effectsCurrentPage === 1;\n  prevBtn.addEventListener('click', () => {\n    if (effectsCurrentPage > 1) {\n      effectsCurrentPage--;\n      renderEffectsList();\n    }\n  });\n  const nextBtn = document.createElement('button');\n  nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextBtn.disabled = effectsCurrentPage === totalPages;\n  nextBtn.addEventListener('click', () => {\n    if (effectsCurrentPage < totalPages) {\n      effectsCurrentPage++;\n      renderEffectsList();\n    }\n  });\n  const pageInfo = document.createElement('span');\n  pageInfo.textContent = `Strona ${effectsCurrentPage} z ${totalPages}`;\n  paginationContainer.appendChild(prevBtn);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextBtn);\n}\nfunction isPriceOutdated(product) {\n  if (!product.currentPrice || !product.lastPriceUpdate) {\n    return false;\n  }\n  try {\n    const lastUpdate = new Date(product.lastPriceUpdate);\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n    return lastUpdate < sevenDaysAgo;\n  } catch (e) {\n    logEvent('Błąd sprawdzania daty ceny:', e);\n    return false;\n  }\n}\nfunction addEffect() {\n    const newEffect = document.getElementById('newEffect').value.trim();\n    logEvent(`Dodawanie nowego efektu: ${newEffect}`);\n    if (!newEffect) {\n        showNotification('Nazwa efektu nie może być pusta', 'warning');\n        return;\n    }\n    if (isDefaultEffect(newEffect)) {\n        showNotification('Efekt o tej nazwie już istnieje jako domyślny', 'warning');\n        return;\n    }\n    if (effects.includes(newEffect)) {\n        showNotification('Efekt o tej nazwie już istnieje', 'warning');\n        return;\n    }\n    effects.push(newEffect);\n    saveEffects();\n    renderEffectsList();\n    document.getElementById('newEffect').value = '';\n    showNotification(`Dodano efekt: ${newEffect}`, 'success');\n    playNotificationSound('success');\n    if (document.getElementById('effect')) {\n        fillEffectSelect();\n    }\n}\nfunction initVisibilitySettings() {\n  const savedControlsVisibility = localStorage.getItem('showControlsPanel');\n  const savedHamburgerVisibility = localStorage.getItem('showHamburgerOnDesktop');\n  showControlsPanel = savedControlsVisibility !== null ? savedControlsVisibility === 'true' : true;\n  showHamburgerOnDesktop = savedHamburgerVisibility !== null ? savedHamburgerVisibility === 'true' : false;\n  if (!showControlsPanel && !showHamburgerOnDesktop) {\n    showControlsPanel = true;\n    localStorage.setItem('showControlsPanel', 'true');\n  }\n  document.getElementById('controlsVisibilityToggle').checked = showControlsPanel;\n  document.getElementById('hamburgerVisibilityToggle').checked = showHamburgerOnDesktop;\n  applyVisibilitySettings();\n}\nfunction applyVisibilitySettings() {\n  const controlsPanel = document.querySelector('.controls-panel');\n  const hamburger = document.getElementById('hamburger');\n  if (controlsPanel) {\n    controlsPanel.style.display = showControlsPanel ? 'block' : 'none';\n  }\n  if (hamburger) {\n    if (window.innerWidth > 992) {\n      hamburger.style.display = showHamburgerOnDesktop ? 'flex' : 'none';\n    }\n  }\n}\nfunction saveVisibilitySettings() {\n  localStorage.setItem('showControlsPanel', showControlsPanel);\n  localStorage.setItem('showHamburgerOnDesktop', showHamburgerOnDesktop);\n  applyVisibilitySettings();\n  showNotification('Ustawienia widoczności zapisane', 'success');\n}\nfunction cleanupOldPriceTrendCache() {\n    const now = Date.now();\n    let cleanedCount = 0;\n    \n    for (const productName in priceTrendCache) {\n        const cached = priceTrendCache[productName];\n        if ((now - cached.timestamp) > PRICE_TREND_CACHE_DURATION * 2) {\n            delete priceTrendCache[productName];\n            cleanedCount++;\n        }\n    }\n    \n    if (cleanedCount > 0) {\n        localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n        logEvent(`Usunięto ${cleanedCount} starych wpisów z cache Price Trend`);\n    }\n}\nfunction saveVisibilitySettings() {\n  localStorage.setItem('showControlsPanel', showControlsPanel);\n  localStorage.setItem('showHamburgerOnDesktop', showHamburgerOnDesktop);\n  applyVisibilitySettings();\n  showNotification('Ustawienia widoczności zapisane', 'success');\n}\ndocument.getElementById('sidebarOverlay').addEventListener('click', function() {\n  const sidebar = document.getElementById('sidebar');\n  const overlay = document.getElementById('sidebarOverlay');\n  const hamburger = document.getElementById('hamburger');\n  sidebar.classList.remove('show');\n  overlay.classList.remove('show');\n  hamburger.classList.remove('open');\n  if (window.innerWidth > 992 && !showHamburgerOnDesktop) {\n    sidebar.style.display = 'none';\n  }\n});\ndocument.addEventListener('keydown', function(e) {\n  if (e.key === 'Escape') {\n    const sidebar = document.getElementById('sidebar');\n    const overlay = document.getElementById('sidebarOverlay');\n    const hamburger = document.getElementById('hamburger');\n    if (sidebar.classList.contains('show')) {\n      sidebar.classList.remove('show');\n      overlay.classList.remove('show');\n      hamburger.classList.remove('open');\n      if (window.innerWidth > 992 && !showHamburgerOnDesktop) {\n        sidebar.style.display = 'none';\n      }\n    }\n  }\n});\ndocument.getElementById('instructionVisibilityToggle').addEventListener('change', function() {\n    showInstructionButton = this.checked;\n    saveAdditionalVisibilitySettings();\n});\ndocument.getElementById('statisticsVisibilityToggle').addEventListener('change', function() {\n    showStatisticsSection = this.checked;\n    saveAdditionalVisibilitySettings();\n});\n\ndocument.getElementById('notificationsVisibilityToggle').addEventListener('change', function() {\n    showNotifications = this.checked;\n    saveAdditionalVisibilitySettings();\n});\ndocument.addEventListener('DOMContentLoaded', function() {\n  initAllSettings();\n  initAdvancedButtonsSetting();\n  initAdditionalVisibilitySettings();\n  initVisibilitySettings();\n  initProductNameHelp();\n  cleanupOldPriceTrendCache();\n  const controlsToggle = document.getElementById('controlsVisibilityToggle');\n  const hamburgerToggle = document.getElementById('hamburgerVisibilityToggle');\n  if (controlsToggle) {\n    controlsToggle.addEventListener('change', function() {\n      const newValue = this.checked;\n      if (!newValue && !showHamburgerOnDesktop) {\n        this.checked = true;\n        showNotification('Nie można wyłączyć obu opcji widoczności. Musi być widoczna przynajmniej jedna z nich.', 'warning');\n        return;\n      }\n      showControlsPanel = newValue;\n      saveVisibilitySettings();\n    });\n  }\n  if (hamburgerToggle) {\n    hamburgerToggle.addEventListener('change', function() {\n      const newValue = this.checked;\n      if (!newValue && !showControlsPanel) {\n        this.checked = true;\n        showNotification('Nie można wyłączyć obu opcji widoczności. Musi być widoczna przynajmniej jedna z nich.', 'warning');\n        return;\n      }\n      showHamburgerOnDesktop = newValue;\n      saveVisibilitySettings();\n    });\n  }\n  const originalHandleResponsiveLayout = handleResponsiveLayout;\n  handleResponsiveLayout = function() {\n    const sidebar = document.getElementById('sidebar');\n    const controlsPanel = document.querySelector('.controls-panel');\n    const hamburger = document.getElementById('hamburger');\n    if (window.innerWidth <= 992) {\n      if (hamburger) hamburger.style.display = 'flex';\n      if (controlsPanel) controlsPanel.style.display = 'none';\n      if (sidebar) sidebar.style.display = 'block';\n    } else {\n      if (hamburger) hamburger.style.display = showHamburgerOnDesktop ? 'flex' : 'none';\n      if (controlsPanel) controlsPanel.style.display = showControlsPanel ? 'block' : 'none';\n      if (sidebar) {\n        sidebar.style.display = 'none';\n        sidebar.classList.remove('show');\n        document.getElementById('sidebarOverlay').classList.remove('show');\n      }\n    }\n  };\n  window.addEventListener('resize', function() {\n    handleResponsiveLayout();\n    applyVisibilitySettings();\n  });\n});\nwindow.addEventListener('load', function() {\n  initVisibilitySettings();\n  applyVisibilitySettings();\n});\nfunction initSidebar() {\n  var sidebar = document.getElementById('sidebar');\n  var overlay = document.getElementById('sidebarOverlay');\n  var hamburger = document.getElementById('hamburger');\n  var closeBtn = document.getElementById('closeSidebar');\n  if (!sidebar) return;\n  if (hamburger) {\n    hamburger.addEventListener('click', toggleSidebar);\n  }\n  if (closeBtn) {\n    closeBtn.addEventListener('click', function () {\n      sidebar.classList.remove('show');\n      sidebar.style.display = 'none';\n      if (overlay) overlay.classList.remove('show');\n      if (hamburger) hamburger.classList.remove('open');\n    });\n  }\n  if (overlay) {\n    overlay.addEventListener('click', function (e) {\n      if (e.target === overlay) {\n        sidebar.classList.remove('show');\n        sidebar.style.display = 'none';\n        overlay.classList.remove('show');\n        if (hamburger) hamburger.classList.remove('open');\n      }\n    });\n  }\n  document.addEventListener('click', function (e) {\n    if (!sidebar.classList.contains('show')) return;\n    var clickedInside = sidebar.contains(e.target);\n    var clickedHamburger = hamburger && hamburger.contains(e.target);\n    if (!clickedInside && !clickedHamburger) {\n      sidebar.classList.remove('show');\n      sidebar.style.display = 'none';\n      if (overlay) overlay.classList.remove('show');\n      if (hamburger) hamburger.classList.remove('open');\n    }\n  });\n  var menuBtns = sidebar.querySelectorAll('.sidebar-menu button, .sidebar-menu a');\n  menuBtns.forEach(function (btn) {\n    btn.addEventListener('click', function () {\n      sidebar.classList.remove('show');\n      sidebar.style.display = 'none';\n      if (overlay) overlay.classList.remove('show');\n      if (hamburger) hamburger.classList.remove('open');\n    });\n  });\n}\nfunction toggleSidebar() {\n  var sidebar = document.getElementById('sidebar');\n  var overlay = document.getElementById('sidebarOverlay');\n  var hamburger = document.getElementById('hamburger');\n  if (!sidebar) return;\n  if (sidebar.classList.contains('show')) {\n    sidebar.classList.remove('show');\n    sidebar.style.display = 'none';\n    if (overlay) overlay.classList.remove('show');\n    if (hamburger) hamburger.classList.remove('open');\n  } else {\n    sidebar.style.display = 'block';\n    sidebar.classList.add('show');\n    if (overlay) overlay.classList.add('show');\n    if (hamburger) hamburger.classList.add('open');\n  }\n}\nfunction initConnectionMonitoring() {\n  initSidebar();\n  if (isCordova()) {\n    document.addEventListener('deviceready', function() {\n      initCordovaConnectionMonitoring();\n    }, false);\n  } else if (isReactNativeWebView()) {\n    initReactNativeConnectionMonitoring();\n  } else {\n    initStandardConnectionMonitoring();\n  }\n}\nfunction initStandardConnectionMonitoring() {\n  if (!navigator.onLine) {\n    showNoInternetMessage();\n  }\n  window.addEventListener('online', function() {\n    hideNoInternetMessage();\n    setTimeout(function() {\n      location.reload();\n    }, 1000);\n  });\n  window.addEventListener('offline', function() {\n    showNoInternetMessage();\n  });\n}\nfunction isReactNativeWebView() {\n  return !!(window.ReactNativeWebView);\n}\nfunction isCordova() {\n  return !!(window.cordova || window.PhoneGap || window.phonegap);\n}\nfunction startEffectEdit(index) {\n    if (isDefaultEffect(effects[index])) {\n        showNotification('Nie można edytować domyślnego efektu \"' + effects[index] + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    editingEffectIndex = index;\n    renderEffectsList();\n}\nfunction saveEffectEdit(index) {\n    const newName = document.querySelector('.edit-effect-name').value.trim();\n    if (!newName) {\n        showNotification('Nazwa efektu nie może być pusta', 'warning');\n        return;\n    }\n    if (isDefaultEffect(effects[index]) || isDefaultEffect(newName)) {\n        showNotification('Nie można edytować domyślnego efektu', 'warning');\n        return;\n    }\n    if (effects.includes(newName) && effects.indexOf(newName) !== index) {\n        showNotification('Efekt o tej nazwie już istnieje', 'warning');\n        return;\n    }\n    effects[index] = newName;\n    saveEffects();\n    editingEffectIndex = null;\n    renderEffectsList();\n    showNotification('Nazwa efektu została zmieniona', 'success');\n    playNotificationSound('success');\n}\nfunction isDefaultEffect(effectName) {\n    return defaultEffects.includes(effectName);\n}\nfunction cancelEffectEdit() {\n\teditingEffectIndex = null;\n\trenderEffectsList();\n}\nfunction removeEffect(index) {\n    const effectName = effects[index];\n    logEvent(`Próba usunięcia efektu: ${effectName}`);\n    if (isDefaultEffect(effectName)) {\n        showNotification('Nie można usunąć domyślnego efektu \"' + effectName + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć efekt \"${effectName}\"?`,\n        (confirmed) => {\n            if (confirmed) {\n                effects.splice(index, 1);\n                saveEffects();\n                renderEffectsList();\n                showNotification('Efekt został usunięty', 'success');\n                playNotificationSound('success');\n                logEvent(`Usunięto efekt: ${effectName}`);\n            }\n        }\n    );\n}\nfunction saveEffects() {\n\tlocalStorage.setItem('effects', JSON.stringify(effects));\n}\nfunction closeCurrencyEditModal() {\n\tdocument.getElementById('currencyEditModal').classList.remove('show');\n\teditingCurrencyCode = null;\n}\nfunction openCurrencyEdit(code) {\n    const baseCurrencies = ['PLN', 'USD', 'EUR'];\n    const nbpCurrencies = Object.keys(exchangeRates)\n        .filter(c => c !== 'PLN' && c !== 'USD' && c !== 'EUR' && c !== 'lastUpdated');\n    \n    if (baseCurrencies.includes(code) || nbpCurrencies.includes(code)) {\n        showNotification('Nie można edytować waluty ' + code + ' (dostarczana przez NBP)', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    \n    editingCurrencyCode = code;\n    document.getElementById('editCurrencyCode').value = code;\n    document.getElementById('editCurrencySymbol').value = currencySymbols[code] || '';\n    document.getElementById('editCurrencyRate').value = exchangeRates[code] || '';\n    document.getElementById('currencyEditModal').classList.add('show');\n}\nfunction saveCurrencyEdit() {\n\tconst newCode = document.getElementById('editCurrencyCode').value.trim().toUpperCase();\n\tconst newSymbol = document.getElementById('editCurrencySymbol').value.trim();\n\tconst newRate = parseFloat(document.getElementById('editCurrencyRate').value);\n\tif (!newCode || newCode.length !== 3) {\n\t\tshowNotification('Kod waluty musi składać się z 3 liter', 'warning');\n\t\treturn;\n\t}\n\tif (!newSymbol) {\n\t\tshowNotification('Symbol waluty jest wymagany', 'warning');\n\t\treturn;\n\t}\n\tif (isNaN(newRate) || newRate <= 0) {\n\t\tshowNotification('Nieprawidłowy kurs wymiany', 'warning');\n\t\treturn;\n\t}\n\tif (newCode !== editingCurrencyCode) {\n\t\tdelete exchangeRates[editingCurrencyCode];\n\t\tdelete currencySymbols[editingCurrencyCode];\n\t\t\n\t\texchangeRates[newCode] = newRate;\n\t\tcurrencySymbols[newCode] = newSymbol;\n\t} else {\n\t\texchangeRates[newCode] = newRate;\n\t\tcurrencySymbols[newCode] = newSymbol;\n\t}\n\tsaveExchangeRates();\n\tcloseCurrencyEditModal();\n\topenExchangeModal();\n\tshowNotification(`Zaktualizowano walutę ${newCode}`, 'success');\n\tplayNotificationSound('success');\n}\nfunction editGalleryImageName(index) {\n    const imgName = galleryImages[index].name;\n    logEvent(`Rozpoczęto edycję nazwy zdjęcia: ${imgName}`);\n\teditingGalleryImageIndex = index;\n\tconst img = galleryImages[index];\n\tdocument.getElementById('galleryEditImagePreview').src = img.data;\n\tdocument.getElementById('galleryEditImageName').value = img.name;\n\tdocument.getElementById('galleryImageEditModal').classList.add('show');\n}\nfunction closeGalleryImageEditModal() {\n\tdocument.getElementById('galleryImageEditModal').classList.remove('show');\n\teditingGalleryImageIndex = null;\n}\nfunction saveGalleryImageName() {\n    const newName = document.getElementById('galleryEditImageName').value.trim();\n    logEvent(`Zapis nowej nazwy zdjęcia: ${newName}`);\n    if (!newName) {\n        showNotification('Nazwa zdjęcia nie może być pusta', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    const exists = galleryImages.some((img, i) => \n        i !== editingGalleryImageIndex && \n        img.name.toLowerCase() === newName.toLowerCase()\n    );\n    if (exists) {\n        showNotification('Zdjęcie o takiej nazwie już istnieje i nie zostanie dodane do galeri, ani jako miniaturka do produktu', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    galleryImages[editingGalleryImageIndex].name = newName;\n    saveGallery();\n    renderGallery();\n    closeGalleryImageEditModal();\n    showNotification('Nazwa zdjęcia została zmieniona', 'success');\n    playNotificationSound('success');\n    logEvent(`Zaktualizowano nazwę zdjęcia na: ${newName}`);\n}\nfunction startCategoryEdit(index) {\n    if (isProtectedCategory(categories[index].name)) {\n        showNotification('Nie można edytować domyślnej kategorii \"' + categories[index].name + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    editingCategoryIndex = index;\n    renderCategoriesList();\n}\nfunction saveCategoryEdit() {\n    const newName = document.querySelector('.edit-category-name').value.trim();\n    if (!newName) {\n        showNotification('Nazwa kategorii nie może być pusta', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    if (isProtectedCategory(newName)) {\n        showNotification('Nie można użyć nazwy \"' + newName + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    const exists = categories.some((cat, i) =>\n        i !== editingCategoryIndex && cat.name.toLowerCase() === newName.toLowerCase()\n    );\n    if (exists) {\n        showNotification('Kategoria już istnieje', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    categories[editingCategoryIndex].name = newName;\n    saveCategories();\n    editingCategoryIndex = null;\n    renderCategoriesList();\n    showNotification('Nazwa kategorii została zmieniona', 'success');\n    playNotificationSound('success');\n}\nfunction cancelCategoryEdit() {\n\teditingCategoryIndex = null;\n\trenderCategoriesList();\n}\nfunction openShopEditModal(shopId) {\n\tconst shop = shops.find(s => s.id === shopId);\n\tif (!shop) return;\n\teditingShopId = shopId;\n\tdocument.getElementById('editShopName').value = shop.name;\n\tdocument.getElementById('editShopUrl').value = shop.url;\n\tdocument.getElementById('shopEditModal').classList.add('show');\n}\nfunction forceUpdateStatistics() {\n  try {\n    updateSummary();\n  } catch (e) {\n    logEvent('Błąd w updateSummary:', e);\n  }\n  try {\n    generateNewStatistics();\n  } catch (e) {\n    logEvent('Błąd w generateNewStatistics:', e);\n  }\n}\nfunction saveShopEdit() {\n    const name = document.getElementById('editShopName').value.trim();\n    logEvent(`Zapisywanie zmian sklepu: ${name}`);\n\tlet url = document.getElementById('editShopUrl').value.trim();\n\tif (!name || !url) {\n\t\tshowNotification('Wypełnij oba pola', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tif (!url.startsWith('http://') && !url.startsWith('https://')) {\n\t\turl = 'https://' + url;\n\t}\n\ttry {\n\t\tnew URL(url);\n\t} catch (e) {\n\t\tshowNotification('Podaj poprawny adres URL', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tconst shopIndex = shops.findIndex(s => s.id === editingShopId);\n\tif (shopIndex !== -1) {\n\t\tshops[shopIndex].name = name;\n\t\tshops[shopIndex].url = url;\n\t\tsaveShops();\n\t\trenderShopsList();\n\t\tcloseShopEditModal();\n\t\tshowNotification('Zmiany w sklepie zostały zapisane', 'success');\n\t\tplayNotificationSound('success');\n\t}\n    logEvent(`Zaktualizowano sklep: ${name}`);\n}\nasync function updateGoldPrices() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    try {\n        const goldPrice = await fetchGoldPrice();\n        if (goldPrice === null) {\n            showNotification('Nie udało się pobrać ceny złota', 'danger');\n            loader.reset();\n            return;\n        }\n        loader.update(30);\n        let updatedProducts = 0;\n        const today = new Date().toISOString().split('T')[0];\n        for (const product of products) {\n            if (product.category === 'Złoto') {\n                product.currentPrice = goldPrice;\n                product.currentCurrency = 'PLN';\n                product.lastPriceUpdate = new Date().toISOString();\n                await priceHistory.addPricePoint(\n                    product.id,\n                    goldPrice,\n                    'PLN',\n                    new Date()\n                );\n                \n                updatedProducts++;\n            }\n        }\n        loader.update(80);\n        await saveProducts();\n        loader.complete();\n        if (updatedProducts > 0) {\n            showNotification(`Zaktualizowano cenę złota dla ${updatedProducts} produktów`, 'success');\n            playNotificationSound('success');\n            if (document.getElementById('productPreviewModal').classList.contains('show')) {\n                const previewIndex = products.findIndex(p => p.id === currentChartProductId);\n                if (previewIndex !== -1 && products[previewIndex].category === 'Złoto') {\n                    openProductPreview(previewIndex);\n                }\n            }\n        } else {\n            showNotification('Brak produktów ze złotem do aktualizacji', 'info');\n\t\t\tcloseExchangeModal();\n        }\n        setTimeout(() => loader.reset(), 500);\n\t\tcloseExchangeModal();\n    } catch (error) {\n        loader.reset();\n        logEvent('Błąd aktualizacji ceny złota:', error);\n        showNotification('Błąd podczas aktualizacji ceny złota', 'danger');\n    }\n}\nfunction closeShopEditModal() {\n\tdocument.getElementById('shopEditModal').classList.remove('show');\n\teditingShopId = null;\n}\nfunction showInfoModal(message) {\n    document.getElementById('infoMessage').textContent = message;\n    document.getElementById('infoModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('infoModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeInfoModal() {\n\tdocument.getElementById('infoModal').classList.remove('show');\n}\nfunction showConfirmation(title, message, callback, context) {\n    document.getElementById('confirmationTitle').textContent = title;\n    document.getElementById('confirmationMessage').textContent = message;\n    confirmationCallback = callback;\n    confirmationContext = context;\n    document.getElementById('deleteConfirmationModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('deleteConfirmationModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction handleConfirmation(confirmed) {\n\tdocument.getElementById('deleteConfirmationModal').classList.remove('show');\n\tif (confirmationCallback) {\n\t\tconfirmationCallback(confirmed, confirmationContext);\n\t}\n\tconfirmationCallback = null;\n\tconfirmationContext = null;\n}\nlet shops = JSON.parse(localStorage.getItem('shops')) || [];\nfunction openClearDataModal() {\n    document.getElementById('clearDataModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('clearDataModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeClearDataModal() {\n\tdocument.getElementById('clearDataModal').classList.remove('show');\n}\nasync function confirmClearData() {\n    logEvent('Próba wyczyszczenia wszystkich danych');\n\tconst loader = new PokeballLoader('pokeballLoader').start(0);\n\tloader.update(30);\n\ttry {\n\t\tlocalStorage.clear();\n\t\tloader.update(50);\n\t\tconst db = await openDB();\n\t\tdb.close();\n\t\tindexedDB.deleteDatabase('ProductGalleryDB');\n\t\tloader.update(80);\n\t\tshops = [];\n\t\tcategories = [{\n\t\t\tname: 'Inne',\n\t\t\tbg: '#ededed',\n\t\t\ttext: '#333'\n\t\t}];\n\t\tproducts = [];\n\t\tgalleryImages = [];\n\t\texchangeRates = { EUR: 4.25, USD: 3.62, PLN: 1.0, lastUpdated: null };\n\t\tcurrencySymbols = { PLN: 'zł', EUR: '€', USD: '$' };\n\t\t\n\t\tloader.complete();\n\t\tsetTimeout(() => {\n\t\t\tloader.reset();\n\t\t\tshowNotification('Wszystkie dane zostały usunięte', 'success');\n\t\t\tplayNotificationSound('success');\n\t\t\tcloseClearDataModal();\n\t\t\tsetTimeout(() => {\n\t\t\t\tlocation.reload();\n\t\t\t}, 1500);\n\t\t}, 500);\n\t} catch (error) {\n\t\tloader.reset();\n\t\tlogEvent('Błąd podczas czyszczenia danych:', error);\n\t\tshowNotification('Wystąpił błąd podczas czyszczenia danych', 'danger');\n\t}\n    logEvent('Wszystkie dane zostały wyczyszczone');\n}\nfunction saveShops() {\n\tlocalStorage.setItem('shops', JSON.stringify(shops));\n}\nwindow.onerror = function(message, source, lineno, colno, error) {\n    const errorMsg = `Błąd: ${message} w ${source}:${lineno}`;\n    logEvent(errorMsg);\n    logEvent(errorMsg);\n};\nfunction addShop() {\n\tconst name = document.getElementById('newShopName').value.trim();\n    logEvent(`Dodawanie nowego sklepu: ${name}`);\n\tlet url = document.getElementById('newShopUrl').value.trim();\n\tif (!name || !url) {\n\t\tshowNotification('Wypełnij oba pola', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tif (!url.startsWith('http://') && !url.startsWith('https://')) {\n\t\turl = 'https://' + url;\n\t}\n\tif (url.startsWith('http://')) {\n\t\turl = url.replace('http://', 'https://');\n\t}\n\ttry {\n\t\tnew URL(url);\n\t} catch (e) {\n\t\tshowNotification('Podaj poprawny adres URL', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tshops.push({\n\t\tname,\n\t\turl,\n\t\tid: Date.now().toString()\n\t});\n\tsaveShops();\n\trenderShopsList();\n\tdocument.getElementById('newShopName').value = '';\n\tdocument.getElementById('newShopUrl').value = '';\n\tlogEvent(`Dodano sklep: ${name}`);\n\tshowNotification(`Dodano sklep: ${name}`, 'success');\n\tplayNotificationSound('success');\n}\nfunction removeShop(id) {\n    const shop = shops.find(s => s.id === id);\n    logEvent(`Próba usunięcia sklepu: ${shop.name}`);\n\tshowConfirmation(\n\t\t'Potwierdzenie usunięcia',\n\t\t'Czy na pewno chcesz usunąć ten sklep?',\n\t\tfunction(confirmed) {\n\t\t\tif (confirmed) {\n\t\t\t\tshops = shops.filter(shop => shop.id !== id);\n\t\t\t\tsaveShops();\n\t\t\t\trenderShopsList();\n\t\t\t\tlogEvent(`Usunięto sklep: ${shop.name}`);\n\t\t\t\tshowNotification('Sklep został usunięty', 'success');\n\t\t\t\tplayNotificationSound('success');\n\t\t\t}\n\t\t}\n\t);\n    if (confirmed) {\n        logEvent(`Usunięto sklep: ${shop.name}`);\n    }\n}\nfunction renderShopsList() {\n  const list = document.getElementById('shopsList');\n  list.innerHTML = '';\n  const startIndex = (shopsCurrentPage - 1) * paginationConfig.shopsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.shopsPerPage, shops.length);\n  const pageShops = shops.slice(startIndex, endIndex);\n  \n  if (pageShops.length === 0) {\n    list.innerHTML = '<p class=\"empty-state\">Brak sklepów</p>';\n    renderShopsPagination();\n    return;\n  }\n  \n  pageShops.forEach(shop => {\n    let faviconUrl = '';\n    try {\n      const urlObj = new URL(shop.url);\n      faviconUrl = `https://www.google.com/s2/favicons?domain=${urlObj.hostname}&sz=32`;\n    } catch (error) {\n      logEvent('Nieprawidłowy URL sklepu:', shop.url);\n      faviconUrl = '';\n    }\n    \n    const item = document.createElement('div');\n    item.className = 'shop-item';\n    const displayUrl = shop.url.length > 20 \n      ? shop.url.substring(0, 20) + '...' \n      : shop.url;\n    \n    const isFromGitHub = shop.source === 'github' || (shop.id && !shop.id.toString().startsWith('local'));\n    \n    item.innerHTML = `\n      <div class=\"shop-info\">\n        <div class=\"shop-icon\">\n          ${faviconUrl ? \n            `<img src=\"${faviconUrl}\" alt=\"Ikona sklepu\" onerror=\"this.parentNode.innerHTML\">` : \n            `<i class=\"fas fa-store\"></i>`\n          }\n        </div>\n        <div class=\"shop-details\">\n          <span class=\"shop-name\">\n            ${shop.name} \n            ${isFromGitHub ? '<i class=\"fa fa-globe\" title=\"Obraz online\" style=\"margin-left: 5px; color: #333; font-size: 0.9em;\"></i>' : ''}\n          </span>\n          <a href=\"${shop.url}\" target=\"_blank\" class=\"shop-link\" title=\"${shop.url}\">${displayUrl}</a>\n        </div>\n      </div>\n      <div class=\"actions\">\n        <button class=\"btn-info\" onclick=\"window.open('${shop.url}', '_blank')\" title=\"Otwórz sklep\">\n          <i class=\"fas fa-external-link-alt\"></i>\n        </button>\n        <button class=\"btn-info\" onclick=\"openShopEditModal('${shop.id}')\" title=\"Edytuj sklep\">\n          <i class=\"fas fa-edit\"></i>\n        </button>\n        <button class=\"btn-danger\" onclick=\"removeShop('${shop.id}')\" title=\"Usuń sklep\">\n          <i class=\"fas fa-trash\"></i>\n        </button>\n      </div>\n    `;\n    list.appendChild(item);\n  });\n  \n  renderShopsPagination();\n  addPaginationInfo();\n}\nfunction openShopsModal() {\n  if (!document.getElementById('shopsPagination')) {\n    const paginationDiv = document.createElement('div');\n    paginationDiv.id = 'shopsPagination';\n    paginationDiv.className = 'pagination-container';\n    document.querySelector('.shop-modal-content').appendChild(paginationDiv);\n  }\n  shopsCurrentPage = 1;\n  renderShopsList();\n  document.getElementById('shopsModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('shopsModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nasync function fetchShopsFromGitHub() {\n    try {\n        const response = await fetch('https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/shops.json');\n        if (!response.ok) {\n            throw new Error('Nie udało się pobrać sklepów');\n        }\n        const shopsFromGitHub = await response.json();\n        return shopsFromGitHub;\n    } catch (error) {\n        return null;\n    }\n}\nasync function fetchGitHubFiles(folderPath) {\n    try {\n        const response = await fetch(`https://api.github.com/repos/BarryV94/Magazyn-Produkt-w/contents/${folderPath}`);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        const files = await response.json();\n        \n        files.forEach(file => {\n        });\n        \n        return files;\n    } catch (error) {\n        return null;\n    }\n}\nasync function fetchGitHubImage(file) {\n    try {\n        const downloadUrl = file.download_url;\n        return downloadUrl;\n    } catch (error) {\n        logEvent('Błąd pobierania obrazu z GitHub:', error);\n        return null;\n    }\n}\nasync function updateGalleryFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    \n    try {\n        const files = await fetchGitHubFiles('images/gallery');\n        if (!files) {\n            throw new Error('Brak plików w galerii na GitHub');\n        }\n        \n        let addedCount = 0;\n        let updatedCount = 0;\n        let skippedCount = 0;\n        \n        const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.svg'];\n        const imageFiles = files.filter(file => {\n            const fileName = file.name.toLowerCase();\n            return imageExtensions.some(ext => fileName.endsWith(ext));\n        });\n\n        for (let i = 0; i < imageFiles.length; i++) {\n            const file = imageFiles[i];\n            loader.update(10 + (i / imageFiles.length) * 80);\n            \n            const fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n            \n            const existingImageIndex = galleryImages.findIndex(img => \n                img.name.toLowerCase().trim() === fileName.toLowerCase().trim() && \n                img.source === 'github'\n            );\n            \n            if (existingImageIndex !== -1) {\n                galleryImages[existingImageIndex].url = file.download_url;\n                galleryImages[existingImageIndex].dateAdded = new Date().toISOString();\n                updatedCount++;\n            } else {\n                galleryImages.push({\n                    id: generateUniqueId(),\n                    name: fileName,\n                    url: file.download_url,\n                    dateAdded: new Date().toISOString(),\n                    source: 'github'\n                });\n                addedCount++;\n            }\n        }\n\n        if (addedCount > 0 || updatedCount > 0) {\n            await saveGallery();\n            renderGallery();\n            updateGalleryCount();\n            \n            loader.complete();\n            setTimeout(() => loader.reset(), 500);\n            \n            let message = '';\n            \n            playNotificationSound('success');\n        } else {\n            loader.complete();\n            setTimeout(() => loader.reset(), 500);\n            showNotification('Brak nowych obrazów do dodania', 'info');\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji galerii: ' + error.message, 'danger');\n    }\n}\nfunction debugGalleryImages() {\n    galleryImages.forEach((img, index) => {\n    });\n}\nfunction imageExists(images, fileName) {\n    const normalizedName = fileName.toLowerCase().trim().replace(/\\s+/g, ' ');\n    return images.some(img => \n        img.name.toLowerCase().trim().replace(/\\s+/g, ' ') === normalizedName\n    );\n}\nasync function removeDuplicatePricePoints() {\n    const loader = new PokeballLoader('pokeballLoader');\n    loader.start(0);\n    loader.update(10);\n    try {\n        let totalRemoved = 0;\n        for (const product of products) {\n            const history = await priceHistory.getPriceHistory(product.id);\n            const uniqueMap = new Map();\n            const toRemove = [];\n            for (const point of history) {\n                const dateKey = new Date(point.date).toISOString().split('T')[0];\n                const priceKey = parseFloat(point.price).toFixed(2);\n                const key = `${dateKey}-${priceKey}-${point.currency}`;\n                if (uniqueMap.has(key)) {\n                    toRemove.push(point.id);\n                    totalRemoved++;\n                } else {\n                    uniqueMap.set(key, point);\n                }\n            }\n            if (toRemove.length > 0) {\n                const db = await priceHistory.dbPromise;\n                const tx = db.transaction('price_history', 'readwrite');\n                const store = tx.objectStore('price_history');\n                for (const id of toRemove) {\n                    await store.delete(id);\n                }\n                await tx.done;\n            }\n        }\n        if (totalRemoved > 0) {\n            logEvent(`Usunięto ${totalRemoved} zduplikowanych punktów cenowych.`);\n        }\n    } catch (error) {\n        logEvent('Błąd podczas usuwania duplikatów punktów cenowych:', error);\n        logEvent(`Błąd usuwania duplikatów punktów cenowych: ${error.message}`);\n    } finally {\n        loader.complete();\n        setTimeout(() => loader.reset(), 500);\n    }\n}\nfunction renderShopsPagination() {\n  const paginationContainer = document.getElementById('shopsPagination');\n  if (!paginationContainer) return;\n  paginationContainer.innerHTML = '';\n  const totalPages = Math.ceil(shops.length / paginationConfig.shopsPerPage);\n  \n  const prevBtn = document.createElement('button');\n  prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevBtn.disabled = shopsCurrentPage === 1;\n  prevBtn.addEventListener('click', () => {\n    if (shopsCurrentPage > 1) {\n      shopsCurrentPage--;\n      renderShopsList();\n    }\n  });\n  \n  const nextBtn = document.createElement('button');\n  nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextBtn.disabled = shopsCurrentPage === totalPages;\n  nextBtn.addEventListener('click', () => {\n    if (shopsCurrentPage < totalPages) {\n      shopsCurrentPage++;\n      renderShopsList();\n    }\n  });\n  \n  const pageInfo = document.createElement('span');\n  pageInfo.textContent = `Strona ${shopsCurrentPage} z ${totalPages}`;\n  \n  paginationContainer.appendChild(prevBtn);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextBtn);\n}\nfunction closeShopsModal() {\n  logEvent('Modal sklepów został zamknięty');\n  document.getElementById('shopsModal').classList.remove('show');\n}\nasync function openDB() {\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = indexedDB.open('ProductGalleryDB', 10);\n\t\trequest.onupgradeneeded = function(event) {\n\t\t\tconst db = event.target.result;\n\t\t\tconst oldVersion = event.oldVersion;\n\t\t\tif (oldVersion < 1) {\n\t\t\t\tif (!db.objectStoreNames.contains('productImages')) {\n\t\t\t\t\tdb.createObjectStore('productImages', { keyPath: 'id' });\n\t\t\t\t}\n\t\t\t\tif (!db.objectStoreNames.contains('galleryImages')) {\n\t\t\t\t\tdb.createObjectStore('galleryImages', { keyPath: 'id' });\n\t\t\t\t}\n\t\t\t}\n            if (!db.objectStoreNames.contains('backgroundImages')) {\n                db.createObjectStore('backgroundImages', { keyPath: 'id' });\n            }\n\t\t};\n\t\trequest.onsuccess = function(event) {\n\t\t\tresolve(event.target.result);\n\t\t};\n\t\trequest.onerror = function(event) {\n\t\t\treject('Błąd otwierania bazy danych: ' + event.target.error);\n\t\t};\n\t});\n}\nasync function loadBackgrounds() {\n    try {\n        const db = await openDB();\n        const tx = db.transaction('backgroundImages', 'readonly');\n        const store = tx.objectStore('backgroundImages');\n        const request = store.getAll();\n        return new Promise((resolve, reject) => {\n            request.onsuccess = function() {\n                const savedImages = request.result || [];\n                backgroundImages = [];\n                \n                for (const savedImg of savedImages) {\n                    if (savedImg.source === 'github') {\n                        backgroundImages.push({\n                            id: savedImg.id,\n                            name: savedImg.name,\n                            url: savedImg.url,\n                            dateAdded: savedImg.dateAdded,\n                            source: 'github'\n                        });\n                    } else {\n                        backgroundImages.push({\n                            id: savedImg.id,\n                            name: savedImg.name,\n                            data: savedImg.data,\n                            dateAdded: savedImg.dateAdded,\n                            source: 'local'\n                        });\n                    }\n                }\n                \n                updateBackgroundCount();\n                cleanupGalleryDuplicatesAutomatically();\n                resolve();\n            };\n            request.onerror = () => reject('Błąd ładowania tła');\n        });\n    } catch (error) {\n        logEvent('Błąd ładowania tła:', error);\n        backgroundImages = [];\n        updateBackgroundCount();\n    }\n}\nasync function saveBackgrounds() {\n    try {\n        const db = await openDB();\n        const tx = db.transaction('backgroundImages', 'readwrite');\n        const store = tx.objectStore('backgroundImages');\n        await store.clear();\n        \n        for (const img of backgroundImages) {\n            if (!img.id) {\n                img.id = generateUniqueId();\n            }\n            \n            const imageToSave = {\n                id: img.id,\n                name: img.name,\n                dateAdded: img.dateAdded,\n                source: img.source || 'local'\n            };\n            \n            if (img.source === 'github') {\n                imageToSave.url = img.url;\n            } else {\n                imageToSave.data = img.data;\n            }\n            \n            await store.put(imageToSave);\n        }\n        return new Promise(resolve => tx.oncomplete = resolve);\n    } catch (error) {\n        logEvent('Błąd zapisu tła:', error);\n    }\n}\nfunction updateBackgroundCount() {\n    document.getElementById('backgroundCount').textContent = backgroundImages.length;\n}\nfunction renderBackgrounds() {\n  const content = document.getElementById('backgroundContent');\n  content.innerHTML = '';\n  \n  backgroundTotalPages = Math.ceil(backgroundImages.length / paginationConfig.backgroundItemsPerPage);\n  backgroundCurrentPage = Math.min(backgroundCurrentPage, backgroundTotalPages);\n  \n  const startIndex = (backgroundCurrentPage - 1) * paginationConfig.backgroundItemsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.backgroundItemsPerPage, backgroundImages.length);\n  const currentPageImages = backgroundImages.slice(startIndex, endIndex);\n  \n  if (backgroundImages.length === 0) {\n    content.innerHTML = `\n      <div class=\"background-empty\">\n        <i class=\"fas fa-image\"></i>\n        <h3>Brak zdjęć tła</h3>\n        <p>Dodaj tła, aby zmienić wygląd aplikacji</p>\n      </div>\n    `;\n    return;\n  }\n  \n  currentPageImages.forEach((img, index) => {\n    const globalIndex = startIndex + index;\n    const isSelected = selectedBackgroundId === img.id;\n    const isFromGitHub = img.source === 'github';\n    const item = document.createElement('div');\n    item.className = 'background-item';\n    \n    if (isSelected) {\n      item.classList.add('active-background');\n    }\n    \n    const imageSrc = isFromGitHub ? img.url : img.data;\n    \n    item.innerHTML = `\n      <div class=\"background-checkbox\">\n        <input type=\"checkbox\" id=\"bgCheck-${globalIndex}\" \n          ${isSelected ? 'checked' : ''}\n          onchange=\"selectBackground(${globalIndex}, this.checked)\">\n        <label for=\"bgCheck-${globalIndex}\"></label>\n      </div>\n      <div class=\"background-image-container\">\n        <img src=\"${imageSrc}\" alt=\"${img.name}\" \n          onclick=\"openBackgroundPreview(${globalIndex})\"\n          data-source=\"${img.source || 'local'}\"\n          ${isFromGitHub ? 'data-github-url=\"' + img.url + '\"' : ''}>\n      </div>\n      <div style=\"align-items: center;display: flex;justify-content: center;flex-direction: column;\">\n        <span>\n          ${img.name} \n          ${isFromGitHub ? '<i class=\"fa fa-globe\" title=\"Obraz online\" style=\"margin-left: 5px; color: #333; font-size: 0.8em;\"></i>' : ''}\n        </span>\n        <div class=\"background-info\">\n          <div class=\"background-actions\">\n            <button class=\"btn-info edit-icon-btn\" onclick=\"editBackgroundName(${globalIndex})\" ${isFromGitHub ? 'disabled title=\"Nie można edytować obrazu z GitHub\" style=\"opacity: 0.5;\"' : ''}>\n              <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn-info edit-icon-btn\" style=\"background-color:var(--danger); color:white;width: 30px; height: 30px;\" onclick=\"requestDeleteBackground(${globalIndex})\" ${isFromGitHub ? 'disabled title=\"Nie można usunąć obrazu z GitHub\" style=\"opacity: 0.5;\"' : ''}>\n              <i class=\"fas fa-trash\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    content.appendChild(item);\n  });\n  \n  renderBackgroundPagination();\n}\nfunction backgroundImageExists(fileName) {\n    const normalizedName = fileName.toLowerCase().trim().replace(/\\s+/g, ' ');\n    const existingBackground = backgroundImages.find(bg => \n        bg.name.toLowerCase().trim().replace(/\\s+/g, ' ') === normalizedName\n    );\n    if (existingBackground && isFromGitHub(existingBackground)) {\n        return false;\n    }\n    return !existingBackground;\n}\nfunction renderBackgroundPagination() {\n    const container = document.getElementById('backgroundModal').querySelector('.modal-content');\n    const oldPagination = container.querySelector('.pagination-container');\n    if (oldPagination) oldPagination.remove();\n    if (backgroundTotalPages <= 1) return;\n    const pagination = document.createElement('div');\n    pagination.className = 'pagination-container';\n    const prevBtn = document.createElement('button');\n    prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\"></i>';\n    prevBtn.disabled = backgroundCurrentPage === 1;\n    prevBtn.addEventListener('click', () => {\n        if (backgroundCurrentPage > 1) {\n            backgroundCurrentPage--;\n            renderBackgrounds();\n        }\n    });\n    const nextBtn = document.createElement('button');\n    nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\"></i>';\n    nextBtn.disabled = backgroundCurrentPage === backgroundTotalPages;\n    nextBtn.addEventListener('click', () => {\n        if (backgroundCurrentPage < backgroundTotalPages) {\n            backgroundCurrentPage++;\n            renderBackgrounds();\n        }\n    });\n    const pageInfo = document.createElement('span');\n    pageInfo.textContent = `Strona ${backgroundCurrentPage} z ${backgroundTotalPages}`;\n    pagination.appendChild(prevBtn);\n    pagination.appendChild(pageInfo);\n    pagination.appendChild(nextBtn);\n    container.appendChild(pagination);\n}\nfunction openBackgroundPreview(index) {\n    const img = backgroundImages[index];\n    const imageSrc = img.source === 'github' ? img.url : img.data;\n    document.getElementById('fullPreviewImg').src = imageSrc;\n    document.getElementById('imagePreviewModal').classList.add('show');\n}\nasync function fetchGoldPrice() {\n    try {\n        const response = await fetch('https://api.nbp.pl/api/cenyzlota');\n        if (!response.ok) {\n            throw new Error('Błąd pobierania ceny złota');\n        }\n        const data = await response.json();\n        const price = data[0].cena;\n        exchangeRates.GOLD = price;\n        saveExchangeRates();\n        return price;\n    } catch (error) {\n        logEvent('Błąd pobierania ceny złota:', error);\n        return exchangeRates.GOLD || null;\n    }\n}\nasync function calculateGoldBuybackPrice(product, forceUpdate = false) {\n  try {\n    const now = new Date();\n    if (!forceUpdate && lastGoldBuybackUpdate && (now - lastGoldBuybackUpdate) < 300000) {\n      return {\n        buybackPrice: (product.currentPrice * 0.98) * product.quantity,\n        rateInfo: `Kurs z dnia ${lastGoldBuybackUpdate.toLocaleDateString('pl-PL')} ${lastGoldBuybackUpdate.toLocaleTimeString('pl-PL')} (dane z pamięci podręcznej)`,\n        usdRate: exchangeRates.USD || 4.0\n      };\n    }\n    const response = await fetch('https://api.nbp.pl/api/exchangerates/rates/a/usd/?format=json');\n    if (!response.ok) {\n      throw new Error('Nie udało się pobrać kursu USD');\n    }\n    const data = await response.json();\n    const usdPlnRate = data.rates[0].mid;\n    const rateDate = new Date(data.rates[0].effectiveDate);\n    const rateTime = new Date().toLocaleTimeString('pl-PL');\n    exchangeRates.USD = usdPlnRate;\n    exchangeRates.lastUpdated = new Date().toISOString();\n    saveExchangeRates();\n    lastGoldBuybackUpdate = new Date();\n    const totalBuybackPrice = (product.currentPrice * 0.98) * product.quantity;\n    return {\n      buybackPrice: totalBuybackPrice,\n      rateInfo: `Kurs z dnia ${rateDate.toLocaleDateString('pl-PL')} ${rateTime}`,\n      usdRate: usdPlnRate\n    };\n  } catch (error) {\n    logEvent('Błąd obliczania ceny odkupu:', error);\n    return {\n      buybackPrice: (product.currentPrice * 0.98) * product.quantity,\n      rateInfo: `Kurs z dnia ${exchangeRates.lastUpdated ? new Date(exchangeRates.lastUpdated).toLocaleDateString('pl-PL') : 'brak danych'} (używane zapisane dane)`,\n      usdRate: exchangeRates.USD || 4.0\n    };\n  }\n}\nasync function fetchLBMAGoldPrice() {\n    try {\n        const nbpGoldPricePLN = await fetchGoldPrice();\n        const usdToPlnRate = exchangeRates.USD;\n        const lbmaPriceUSD = nbpGoldPricePLN / usdToPlnRate;\n        return lbmaPriceUSD;\n    } catch (error) {\n        logEvent('Błąd pobierania ceny LBMA:', error);\n        return 1800;\n    }\n}\nasync function fetchUSDAverageRate() {\n    try {\n        const response = await fetch('https://api.nbp.pl/api/exchangerates/rates/a/usd/?format=json');\n        if (!response.ok) {\n            throw new Error('Błąd pobierania kursu USD');\n        }\n        const data = await response.json();\n        return data.rates[0].mid;\n    } catch (error) {\n        logEvent('Błąd pobierania kursu USD:', error);\n        return exchangeRates.USD || 4.0;\n    }\n}\nfunction startGoldPriceUpdates() {\n    setInterval(async () => {\n        const goldPrice = await fetchGoldPrice();\n        if (goldPrice !== null) {\n            exchangeRates.GOLD = goldPrice;\n            localStorage.setItem('exchangeRates', JSON.stringify(exchangeRates));\n            products.forEach(p => {\n                if (p.category === 'Złoto') {\n                    p.currentPrice = goldPrice;\n                    p.lastPriceUpdate = new Date().toISOString();\n                }\n            });\n            saveProducts();\n        }\n    }, 1800000);\n}\ndocument.addEventListener('DOMContentLoaded', startGoldPriceUpdates);\nasync function uploadToBackgroundGallery() {\n    const input = document.getElementById('backgroundUploadInput');\n    if (!input.files || !input.files[0]) return;\n    \n    const file = input.files[0];\n    const fileName = document.getElementById('backgroundImageName').value.trim() || \n                     file.name.replace(/\\.[^/.]+$/, \"\");\n    const nameExists = backgroundImages.some(bg => \n        bg.name.toLowerCase() === fileName.toLowerCase()\n    );\n    if (nameExists) {\n        showNotification('Tło o tej nazwie już istnieje', 'warning');\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = async function(e) {\n        backgroundImages.push({\n            id: generateUniqueId(),\n            name: fileName,\n            data: e.target.result,\n            dateAdded: new Date().toISOString()\n        });\n        await saveBackgrounds();\n        renderBackgrounds();\n        updateBackgroundCount();\n        input.value = '';\n        document.getElementById('backgroundImageName').value = '';\n        showNotification('Tło zostało dodane', 'success');\n\t\tplayNotificationSound('success');\n    };\n    reader.readAsDataURL(file);\n}\nfunction applyBackgroundStyle() {\n    const header = document.querySelector('header');\n    const body = document.body;\n    const sidebarHeader = document.querySelector('.sidebar-header');\n    \n    if (selectedBackgroundId) {\n        const img = backgroundImages.find(bg => bg.id === selectedBackgroundId);\n        if (img) {\n            let bgContainer = document.getElementById('bgContainer');\n            if (!bgContainer) {\n                bgContainer = document.createElement('div');\n                bgContainer.id = 'bgContainer';\n                bgContainer.style.position = 'fixed';\n                bgContainer.style.top = '0';\n                bgContainer.style.left = '0';\n                bgContainer.style.width = '100%';\n                bgContainer.style.height = '100%';\n                bgContainer.style.zIndex = '-1';\n                document.body.prepend(bgContainer);\n            }\n            \n            const imageSrc = img.source === 'github' ? img.url : img.data;\n            \n            bgContainer.innerHTML = `\n                <img \n                    src=\"${imageSrc}\" \n                    alt=\"Background\" \n                    id=\"bgImage\"\n                    style=\"\n                        position: absolute;\n                        width: 100%;\n                        height: 100%;\n                        object-fit: cover;\n                        transition: transform 0.3s ease-out;\n                    \"\n                    data-source=\"${img.source || 'local'}\"\n                    ${img.source === 'github' ? 'data-github-url=\"' + img.url + '\"' : ''}\n                >\n                <div id=\"bgOverlay\" style=\"\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background: linear-gradient(\n                        to bottom, \n                        rgba(0,0,0,0.3) 0%, \n                        rgba(0,0,0,0.1) 20%,\n                        rgba(0,0,0,0) 50%\n                    );\n                    z-index: 1;\n                \"></div>\n            `;\n            \n            const resizeBg = () => {\n                const bgImg = document.getElementById('bgImage');\n                if (bgImg) {\n                    const imgRatio = bgImg.naturalWidth / bgImg.naturalHeight;\n                    const screenRatio = window.innerWidth / window.innerHeight;\n                    \n                    if (imgRatio > screenRatio) {\n                        bgImg.style.width = '100%';\n                        bgImg.style.height = 'auto';\n                    } else {\n                        bgImg.style.width = 'auto';\n                        bgImg.style.height = '100%';\n                    }\n                    \n                    bgImg.style.left = '50%';\n                    bgImg.style.top = '50%';\n                    bgImg.style.transform = 'translate(-50%, -50%)';\n                }\n            };\n            \n            const bgImg = document.getElementById('bgImage');\n            if (bgImg.complete) {\n                resizeBg();\n            } else {\n                bgImg.onload = resizeBg;\n            }\n            window.addEventListener('resize', resizeBg);\n            \n            body.style.background = 'none';\n            if(header) {\n                header.style.cssText = `\n                    background: none !important;\n                    border-bottom: none !important;\n                    box-shadow: none !important;\n                `;\n            }\n            \n            if (sidebarHeader) {\n                sidebarHeader.style.backgroundImage = `url(${imageSrc})`;\n                sidebarHeader.style.backgroundSize = 'cover';\n                sidebarHeader.style.backgroundPosition = 'center';\n                sidebarHeader.style.backgroundRepeat = 'no-repeat';\n            }\n        }\n    } else {\n        const bgContainer = document.getElementById('bgContainer');\n        if (bgContainer) bgContainer.remove();\n        body.style.background = 'linear-gradient(135deg, #f5f5f5, #e0e0e0)';\n        if(header) {\n            header.style.cssText = `\n                background: linear-gradient(135deg, #790000, #ff0000);\n                border-bottom: 3px solid rgba(255,255,255,0.2);\n                box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            `;\n        }\n        if (sidebarHeader) {\n            sidebarHeader.style.backgroundImage = '';\n            sidebarHeader.style.background = 'linear-gradient(135deg, #790000, #ff0000)';\n        }\n    }\n}\nasync function selectBackground(index, selected) {\n    if (!selected) {\n        if (selectedBackgroundId === backgroundImages[index].id) {\n            resetToDefaultBackground();\n        }\n        return;\n    }\n    const selectedBackground = backgroundImages[index];\n    selectedBackgroundId = selectedBackground.id;\n    localStorage.setItem('selectedBackground', selectedBackground.id);\n    applyBackgroundStyle();\n    await saveBackgrounds();\n    renderBackgrounds();\n\tlogEvent(`Zmieniono tło aplikacji: ${backgroundImages[index].name}`);\n    showNotification('Tło zostało zapisane', 'success');\n\tplayNotificationSound('success');\n}\nfunction initModalScrollButtons() {\n    const modals = document.querySelectorAll('.modal');\n    \n    modals.forEach(modal => {\n        let scrollButton = modal.querySelector('.modal-scroll-to-top');\n        \n        if (!scrollButton) {\n            scrollButton = document.createElement('button');\n            scrollButton.className = 'modal-scroll-to-top';\n            scrollButton.innerHTML = '↑';\n            scrollButton.title = 'Powrót do góry';\n            modal.appendChild(scrollButton);\n            \n            scrollButton.addEventListener('click', function() {\n                const modalContent = modal.querySelector('.modal-content');\n                if (modalContent) {\n                    modalContent.scrollTo({\n                        top: 0,\n                        behavior: 'smooth'\n                    });\n                }\n            });\n        }\n        \n        const scrollableElement = modal.querySelector('.modal-content') || modal;\n        \n        scrollableElement.addEventListener('scroll', function() {\n            if (this.scrollTop > 50) {\n                scrollButton.classList.add('show');\n            } else {\n                scrollButton.classList.remove('show');\n            }\n        });\n        \n        const observer = new MutationObserver(function(mutations) {\n            mutations.forEach(function(mutation) {\n                if (mutation.attributeName === 'class') {\n                    if (modal.classList.contains('show')) {\n                        const content = modal.querySelector('.modal-content');\n                        if (content) {\n                            content.scrollTop = 0;\n                        }\n                        scrollButton.classList.remove('show');\n                    }\n                }\n            });\n        });\n        \n        observer.observe(modal, { attributes: true });\n    });\n}\ndocument.addEventListener('DOMContentLoaded', function() {\n    initModalScrollButtons();\n});\nfunction updateMainFormFields() {\n    const category = document.getElementById('category').value;\n    const conditionField = document.getElementById('conditionField');\n    const languageField = document.getElementById('languageField');\n    const effectField = document.getElementById('effectField');\n    const currentPriceGroup = document.getElementById('currentPriceGroup');\n    const quantityLabel = document.getElementById('quantityLabel');\n    const priceLabel = document.getElementById('priceLabel');\n    const conditionSelect = document.getElementById('condition');\n    const languageSelect = document.getElementById('language');\n\n    conditionField.style.display = 'none';\n    languageField.style.display = 'none';\n    effectField.style.display = 'none';\n    \n    if (conditionSelect) conditionSelect.required = false;\n    if (languageSelect) languageSelect.required = false;\n\n    if (category === 'Singles') {\n        conditionField.style.display = 'block';\n        effectField.style.display = 'block';\n        if (conditionSelect) conditionSelect.required = true;\n    }\n\n    if (!['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n        languageField.style.display = 'block';\n        if (languageSelect) languageSelect.required = true;\n    } else {\n        languageField.style.display = 'none';\n        if (languageSelect) languageSelect.required = false;\n    }\n\n    if (category === 'Złoto') {\n        if (currentPriceGroup) currentPriceGroup.style.display = 'none';\n        if (quantityLabel) quantityLabel.textContent = 'Ilość (gram) *';\n        if (priceLabel) priceLabel.textContent = 'Cena zakupu za 1 gram *';\n    } else {\n        if (currentPriceGroup) currentPriceGroup.style.display = 'block';\n        if (quantityLabel) quantityLabel.textContent = 'Ilość *';\n        if (priceLabel) priceLabel.textContent = 'Cena zakupu jednej sztuki *';\n    }\n}\nasync function handleProductFormSubmit(e) {\n    e.preventDefault();\n    \n    resetMainFormValidation();\n    \n    const nm = document.getElementById('name').value.trim();\n    const cat = document.getElementById('category').value;\n    const qt = parseInt(document.getElementById('quantity').value);\n    const pr = parseFloat(document.getElementById('price').value);\n    const yr = parseInt(document.getElementById('year').value);\n    \n    let cp = null;\n    let currentCurrency = null;\n    \n    if (cat !== 'Złoto') {\n        cp = document.getElementById('currentPrice').value;\n        currentCurrency = document.getElementById('currentCurrency').value;\n    }\n    \n    const currency = document.getElementById('currency').value;\n    const file = document.getElementById('image').files[0];\n    const effectIn = document.getElementById('effect').value;\n    const conditionIn = cat === 'Singles' ? document.getElementById('condition').value : null;\n    const languageIn = !['Złoto', 'Akcesoria', 'Inne'].includes(cat) ? document.getElementById('language').value : null;\n\n    const errors = [];\n\n    if (!nm) {\n        errors.push('Nazwa produktu jest wymagana');\n        highlightField(document.getElementById('name'));\n    }\n\n    if (!cat) {\n        errors.push('Kategoria jest wymagana');\n        highlightField(document.getElementById('category'));\n    }\n\n    if (isNaN(qt) || qt < 1) {\n        errors.push('Nieprawidłowa ilość');\n        highlightField(document.getElementById('quantity'));\n    }\n\n    if (isNaN(pr) || pr <= 0) {\n        errors.push('Nieprawidłowa cena zakupu');\n        highlightField(document.getElementById('price'));\n    }\n\n    if (isNaN(yr) || yr < 2000 || yr > 2100) {\n        errors.push('Nieprawidłowy rok zakupu');\n        highlightField(document.getElementById('year'));\n    }\n\n    if (!currency) {\n        errors.push('Waluta jest wymagana');\n        highlightField(document.getElementById('currency'));\n    }\n\n    if (cat === 'Singles' && !conditionIn) {\n        errors.push('Stan karty jest wymagany dla kategorii Singles');\n        highlightField(document.getElementById('condition'));\n    }\n\n    if (!['Złoto', 'Akcesoria', 'Inne'].includes(cat) && !languageIn) {\n        errors.push('Język jest wymagany dla tej kategorii');\n        highlightField(document.getElementById('language'));\n    }\n\n    if (cat !== 'Złoto' && cp && cp.trim() !== '') {\n        const currentPriceValue = parseFloat(cp);\n        if (isNaN(currentPriceValue) || currentPriceValue < 0) {\n            errors.push('Nieprawidłowa aktualna cena');\n            highlightField(document.getElementById('currentPrice'));\n        }\n        if (!currentCurrency) {\n            errors.push('Waluta aktualnej ceny jest wymagana');\n            highlightField(document.getElementById('currentCurrency'));\n        }\n    }\n\n    if (errors.length > 0) {\n        showNotification('Popraw następujące błędy: ' + errors.join(', '), 'danger');\n        playNotificationSound('alert');\n        return;\n    }\n\n    let currentPriceValue = null;\n    if (cat !== 'Złoto' && cp && cp.trim() !== '') {\n        currentPriceValue = parseFloat(cp);\n    }\n\n    let finalName = nm;\n\n    let dataUrl = '';\n    if (file) {\n        dataUrl = await new Promise(resolve => {\n            const rd = new FileReader();\n            rd.onload = () => resolve(rd.result);\n            rd.readAsDataURL(file);\n        });\n    }\n    if (!dataUrl && selectedImageUrl) {\n        dataUrl = selectedImageUrl;\n    }\n\n    const productId = generateUniqueId();\n    const lastPriceUpdate = currentPriceValue !== null ? new Date().toISOString() : null;\n\n    if (cat === 'Złoto') {\n        const goldPrice = await fetchGoldPrice();\n        if (goldPrice !== null) {\n            currentPriceValue = goldPrice;\n            currentCurrency = 'PLN';\n        } else {\n            showNotification('Nie udało się pobrać ceny złota. Używam ostatniej znanej ceny.', 'warning');\n            currentPriceValue = exchangeRates.GOLD || pr;\n            currentCurrency = 'PLN';\n        }\n    }\n\n    products.push({\n        id: productId,\n        name: finalName,\n        category: cat,\n        quantity: qt,\n        price: pr,\n        year: yr,\n        currency: currency,\n        currentPrice: currentPriceValue,\n        currentCurrency: currentPriceValue !== null ? currentCurrency : null,\n        image: dataUrl,\n        dateAdded: new Date().toISOString(),\n        effect: cat === 'Singles' ? effectIn || null : null,\n        condition: conditionIn,\n        language: languageIn,\n        lastPriceUpdate: lastPriceUpdate\n    });\n\n    if (currentPriceValue !== null) {\n        try {\n            await priceHistory.addPricePoint(\n                productId,\n                currentPriceValue,\n                currentCurrency\n            );\n        } catch (error) {\n            logEvent('Błąd zapisu początkowego wpisu historii:', error);\n        }\n    }\n\n    await saveProducts();\n    renderProducts(applyAllFilters());\n    \n    form.reset();\n    document.getElementById('currency').value = 'PLN';\n    document.getElementById('currentCurrency').value = 'PLN';\n    document.getElementById('imagePreview').style.display = 'none';\n    \n    document.getElementById('conditionField').style.display = 'none';\n    document.getElementById('languageField').style.display = 'none';\n    \n    const quantityLabel = document.querySelector('label[for=\"quantity\"]');\n    if (quantityLabel) quantityLabel.textContent = 'Ilość';\n    \n    showNotification('Produkt został dodany', 'success');\n    playNotificationSound('success');\n    \n    closeAddNewProductModal();\n}\ndocument.addEventListener('DOMContentLoaded', function() {\n    populateConditionAndLanguageSelects();\n    fillEffectSelect();\n    updateCategorySelects();\n    document.getElementById('category').addEventListener('change', updateMainFormFields);\n    const form = document.getElementById('productForm');\n    form.removeEventListener('submit', handleProductFormSubmit);\n    form.addEventListener('submit', handleProductFormSubmit);\n    updateMainFormFields();\n});\nfunction reinitModalScrollButtons() {\n    initModalScrollButtons();\n}\nfunction resetToDefaultBackground() {\n    selectedBackgroundId = null;\n    localStorage.removeItem('selectedBackground');\n    applyBackgroundStyle();\n    renderBackgrounds();\n    showNotification('Przywrócono domyślne tło', 'success');\n\tplayNotificationSound('success');\n}\nasync function deleteBackground(index) {\n    const img = backgroundImages[index];\n    if (img.id === selectedBackgroundId) {\n        resetToDefaultBackground();\n    }\n    backgroundImages.splice(index, 1);\n    await saveBackgrounds();\n    renderBackgrounds();\n    updateBackgroundCount();\n}\nfunction requestDeleteBackground(index) {\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć tło \"${backgroundImages[index].name}\"?`,\n        (confirmed) => {\n            if (confirmed) {\n                deleteBackground(index);\n            }\n        }\n    );\n}\nfunction toggleBackgroundSelection(index) {\n    const idx = selectedBackgroundImages.indexOf(index);\n    if (idx > -1) {\n        selectedBackgroundImages.splice(idx, 1);\n    } else {\n        selectedBackgroundImages.push(index);\n    }\n    renderBackgrounds();\n    updateBackgroundSelectionCounter();\n}\nfunction updateBackgroundSelectionCounter() {\n    const counter = document.getElementById('backgroundSelectionCounter');\n    if (!counter) {\n        const selectionControls = document.getElementById('backgroundSelectionControls');\n        const counterEl = document.createElement('div');\n        counterEl.id = 'backgroundSelectionCounter';\n        counterEl.className = 'selection-counter';\n        counterEl.innerHTML = `<i class=\"fas fa-check-circle\"></i> Zaznaczono: ${selectedBackgroundImages.length}`;\n        selectionControls.insertBefore(counterEl, selectionControls.firstChild);\n    } else {\n        counter.innerHTML = `<i class=\"fas fa-check-circle\"></i> Zaznaczono: ${selectedBackgroundImages.length}`;\n    }\n}\nasync function deleteSelectedBackgrounds() {\n    if (!selectedBackgroundImages.length) return;\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć ${selectedBackgroundImages.length} zaznaczonych tła?`,\n        async (confirmed) => {\n            if (!confirmed) return;\n            const deletedIds = selectedBackgroundImages.map(i => backgroundImages[i].id);\n            if (deletedIds.includes(selectedBackgroundId)) {\n                selectedBackgroundId = null;\n                localStorage.removeItem('selectedBackground');\n                document.body.style.backgroundImage = '';\n                document.querySelector('.header-wrapper').style.backgroundColor = '';\n            }\n            selectedBackgroundImages.sort((a, b) => b - a).forEach(i => {\n                backgroundImages.splice(i, 1);\n            });\n            \n            await saveBackgrounds();\n            cancelBackgroundSelection();\n            renderBackgrounds();\n            updateBackgroundCount();\n        }\n    );\n}\nfunction cancelBackgroundSelection() {\n    backgroundSelectionMode = false;\n    document.getElementById('backgroundSelectionControls').style.display = 'none';\n    document.getElementById('backgroundSelectBtn').style.display = 'inline-block';\n    document.getElementById('backgroundUploadBtn').style.display = 'inline-block';\n    selectedBackgroundImages = [];\n    renderBackgrounds();\n}\nfunction toggleBackgroundSelectionMode() {\n    backgroundSelectionMode = !backgroundSelectionMode;\n    document.getElementById('backgroundSelectionControls').style.display = \n        backgroundSelectionMode ? 'flex' : 'none';\n    document.getElementById('backgroundSelectBtn').style.display = \n        backgroundSelectionMode ? 'none' : 'inline-block';\n    document.getElementById('backgroundUploadBtn').style.display = \n        backgroundSelectionMode ? 'none' : 'inline-block';\n    selectedBackgroundImages = [];\n    renderBackgrounds();\n}\nfunction toggleBackgroundUploadPanel() {\n    const panel = document.getElementById('backgroundUploadPanel');\n    const uploadBtn = document.getElementById('backgroundUploadBtn');\n    \n    if (panel.style.display === 'none') {\n        panel.style.display = 'block';\n        uploadBtn.innerHTML = '<i class=\"fas fa-times\"></i> Anuluj';\n        uploadBtn.className = 'btn-danger';\n    } else {\n        panel.style.display = 'none';\n        uploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj tło';\n        uploadBtn.className = 'btn-success';\n    }\n}\nfunction editBackgroundName(index) {\n\teditingBackgroundIndex = index;\n    const img = backgroundImages[index];\n    const previewElement = document.getElementById('backgroundEditImagePreview');\n    const nameInput = document.getElementById('backgroundEditImageName');\n    if (previewElement && nameInput) {\n        previewElement.src = img.data;\n        nameInput.value = img.name;\n        document.getElementById('backgroundImageEditModal').classList.add('show');\n    } else {\n        logEvent('Elementy modalne nie zostały znalezione!');\n        showNotification('Błąd: brak elementów edycji tła', 'danger');\n    }\n}\nfunction closeBackgroundImageEditModal() {\n    document.getElementById('backgroundImageEditModal').classList.remove('show');\n}\nfunction saveBackgroundImageName() {\n    const newName = document.getElementById('backgroundEditImageName').value.trim();\n    if (!newName) {\n        showNotification('Nazwa tła nie może być pusta', 'warning');\n        return;\n    }\n    const exists = backgroundImages.some((bg, i) => \n        i !== editingBackgroundIndex && \n        bg.name.toLowerCase() === newName.toLowerCase()\n    );\n    if (exists) {\n        showNotification('Tło o takiej nazwie już istnieje', 'warning');\n        return;\n    }\n    backgroundImages[editingBackgroundIndex].name = newName;\n    saveBackgrounds();\n    renderBackgrounds();\n    closeBackgroundImageEditModal();\n    showNotification('Nazwa tła została zmieniona', 'success');\n\tplayNotificationSound('success');\n}\nasync function refreshPriceTrend(productId) {\n  const product = products.find(p => p.id === productId);\n  if (!product) return;\n  \n  const trendElement = document.getElementById('previewPriceTrend');\n  trendElement.innerHTML = '<div class=\"loading-trend\">Ładowanie...</div>';\n  \n  const trend = await fetchCardmarketPriceTrend(product.name);\n  trendElement.innerHTML = trend ? \n    `<span class=\"price-trend-value\">${trend}</span>` : \n    '<span class=\"no-data\">Brak danych</span>';\n}\nasync function processImportFile(file) {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    try {\n        if (!file) return;\n        loader.update(20);\n        const zip = await JSZip.loadAsync(file);\n        \n        if (zip.file('settings.json')) {\n            const settingsData = await zip.file('settings.json').async('text');\n            const settings = JSON.parse(settingsData);\n            \n            if (settings.version >= 3) {\n                paginationConfig = settings.paginationConfig || paginationConfig;\n                \n                selectedBackgroundId = settings.selectedBackground || null;\n                \n                darkMode = settings.darkMode || false;\n                soundPermissionGiven = settings.soundPermission || false;\n                soundAllowed = settings.soundAllowed || false;\n                \n                if (settings.version >= 4) {\n                    currentFilter = settings.currentFilter || 'all';\n                    currentSort = settings.currentSort || 'date-asc';\n                    currentSearch = settings.currentSearch || '';\n                    productsCurrentPage = settings.productsCurrentPage || 1;\n                    categoriesCurrentPage = settings.categoriesCurrentPage || 1;\n                    effectsCurrentPage = settings.effectsCurrentPage || 1;\n                    shopsCurrentPage = settings.shopsCurrentPage || 1;\n                    currenciesCurrentPage = settings.currenciesCurrentPage || 1;\n                    logsCurrentPage = settings.logsCurrentPage || 1;\n                    galleryCurrentPage = settings.galleryCurrentPage || 1;\n                    backgroundCurrentPage = settings.backgroundCurrentPage || 1;\n                }\n                if (settings.version >= 5) {\n                    currencyConfig = settings.currencyConfig || currencyConfig;\n                    if (settings.visibilitySettings) {\n                        showControlsPanel = settings.visibilitySettings.showControlsPanel !== undefined ? settings.visibilitySettings.showControlsPanel : true;\n                        showHamburgerOnDesktop = settings.visibilitySettings.showHamburgerOnDesktop !== undefined ? settings.visibilitySettings.showHamburgerOnDesktop : false;\n                        showInstructionButton = settings.visibilitySettings.showInstructionButton !== undefined ? settings.visibilitySettings.showInstructionButton : true;\n                        showStatisticsSection = settings.visibilitySettings.showStatisticsSection !== undefined ? settings.visibilitySettings.showStatisticsSection : true;\n                        showNotifications = settings.visibilitySettings.showNotifications !== undefined ? settings.visibilitySettings.showNotifications : true;\n                        showAdvancedButtons = settings.visibilitySettings.showAdvancedButtons !== undefined ? settings.visibilitySettings.showAdvancedButtons : true;\n                    }\n                    if (settings.appearanceSettings) {\n                        localStorage.setItem('panelOpacity', settings.appearanceSettings.panelOpacity);\n                        localStorage.setItem('backgroundBlur', settings.appearanceSettings.backgroundBlur);\n                        localStorage.setItem('darkenEffect', settings.appearanceSettings.darkenEffect);\n                        localStorage.setItem('borderRadius', settings.appearanceSettings.borderRadius);\n                        localStorage.setItem('borderWidth', settings.appearanceSettings.borderWidth);\n                        localStorage.setItem('borderColor', settings.appearanceSettings.borderColor);\n                        if (settings.appearanceSettings.customColors) {\n                            localStorage.setItem('customColors', JSON.stringify(settings.appearanceSettings.customColors));\n                        }\n                        if (settings.appearanceSettings.appFont) {\n                            localStorage.setItem('appFont', settings.appearanceSettings.appFont);\n                        }\n                        localStorage.setItem('animationsEnabled', settings.appearanceSettings.animationsEnabled);\n                    }\n                    \n                    if (settings.priceTrendCache) {\n                        priceTrendCache = settings.priceTrendCache;\n                        localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n                    }\n                }\n                \n                document.body.classList.toggle('dark-mode', darkMode);\n                localStorage.setItem('paginationConfig', JSON.stringify(paginationConfig));\n                localStorage.setItem('selectedBackground', selectedBackgroundId);\n                localStorage.setItem('darkMode', darkMode);\n                localStorage.setItem('soundPermission', soundPermissionGiven);\n                localStorage.setItem('currencyConfig', JSON.stringify(currencyConfig));\n                localStorage.setItem('showControlsPanel', showControlsPanel);\n                localStorage.setItem('showHamburgerOnDesktop', showHamburgerOnDesktop);\n                localStorage.setItem('showInstructionButton', showInstructionButton);\n                localStorage.setItem('showStatisticsSection', showStatisticsSection);\n                localStorage.setItem('showNotifications', showNotifications);\n                localStorage.setItem('showAdvancedButtons', showAdvancedButtons);\n                \n                if (selectedBackgroundId) {\n                    setTimeout(() => {\n                        applyBackgroundStyle();\n                    }, 100);\n                }\n            }\n        }\n\n        if (zip.file('price_trend_cache.json')) {\n            try {\n                const cacheData = await zip.file('price_trend_cache.json').async('text');\n                const cacheObj = JSON.parse(cacheData);\n                if (cacheObj.priceTrendCache) {\n                    priceTrendCache = cacheObj.priceTrendCache;\n                    localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n                }\n            } catch (cacheError) {\n                logEvent('Błąd importu price trend cache:', cacheError);\n            }\n        }\n\n        loader.update(30);\n        \n        if (zip.file('products.json')) {\n            const productsData = await zip.file('products.json').async('text');\n            const productsObj = JSON.parse(productsData);\n            \n            let importedProducts = [];\n            if (productsObj.version === 4 && productsObj.products) {\n                importedProducts = productsObj.products.map(product => {\n                    if (product.imageSource === 'github' && product.imageGitHubName) {\n                        product.image = null;\n                        product.imageId = null;\n                    }\n                    return product;\n                });\n            } else if (productsObj.version === 3 && productsObj.products) {\n                importedProducts = productsObj.products;\n            } else if (productsObj.version === 2 && productsObj.products) {\n                importedProducts = productsObj.products;\n            } else {\n                importedProducts = productsObj;\n            }\n            \n            importedProducts.forEach(importedProduct => {\n                if (!importedProduct.id) {\n                    importedProduct.id = generateUniqueId();\n                }\n                \n                const exists = products.some(p => p.id === importedProduct.id);\n                if (!exists) {\n                    products.push(importedProduct);\n                }\n            });\n        }\n\n        if (zip.file('categories.json')) {\n            const categoriesData = await zip.file('categories.json').async('text');\n            const importedCategories = JSON.parse(categoriesData);\n            categories.push(...importedCategories);\n        }\n\n        if (zip.file('exchange.json')) {\n            const exchangeData = await zip.file('exchange.json').async('text');\n            const exchangeObj = JSON.parse(exchangeData);\n            if (exchangeObj.rates) {\n                Object.assign(exchangeRates, exchangeObj.rates);\n            }\n            if (exchangeObj.symbols) {\n                Object.assign(currencySymbols, exchangeObj.symbols);\n            }\n        }\n\n        if (zip.file('shops.json')) {\n            const shopsData = await zip.file('shops.json').async('text');\n            const importedShops = JSON.parse(shopsData);\n            shops.push(...importedShops);\n        }\n\n        if (zip.file('effects.json')) {\n            const effectsData = await zip.file('effects.json').async('text');\n            const importedEffects = JSON.parse(effectsData);\n            effects.push(...importedEffects);\n        }\n\n        if (zip.file('logs.json')) {\n            const logsData = await zip.file('logs.json').async('text');\n            const importedLogs = JSON.parse(logsData);\n            eventLogs.push(...importedLogs);\n        }\n\n        loader.update(50);\n\n        if (zip.file('price_history.json')) {\n            try {\n                const historyData = await zip.file('price_history.json').async('text');\n                const allHistory = JSON.parse(historyData);\n                const db = await priceHistory.dbPromise;\n                const tx = db.transaction('price_history', 'readwrite');\n                const store = tx.objectStore('price_history');\n                \n                await store.clear();\n                \n                for (const productHistory of allHistory) {\n                    for (const point of productHistory.history) {\n                        await store.add({\n                            id: generateUniqueId(),\n                            productId: productHistory.productId,\n                            date: point.date,\n                            price: point.price,\n                            currency: point.currency,\n                            exchangeRate: point.exchangeRate,\n                            needsHistoricalUpdate: point.needsHistoricalUpdate || false\n                        });\n                    }\n                }\n            } catch (historyError) {\n                logEvent('Błąd importu historii cen:', historyError);\n            }\n        }\n\n        loader.update(70);\n\n        if (zip.folder('images')) {\n            const imgFolder = zip.folder('images');\n            \n            if (imgFolder.folder('products')) {\n                const productImgFolder = imgFolder.folder('products');\n                const productFiles = [];\n                productImgFolder.forEach((relativePath, file) => {\n                    if (!file.dir) {\n                        productFiles.push(file);\n                    }\n                });\n                \n                logEvent(`Znaleziono ${productFiles.length} obrazów produktów`);\n                \n                for (const file of productFiles) {\n                    try {\n                        const base64Data = await file.async('base64');\n                        const imageData = `data:image/png;base64,${base64Data}`;\n                        const productId = file.name.replace('.png', '');\n                        const product = products.find(p => p.id === productId);\n                        if (product) {\n                            product.image = imageData;\n                            logEvent(`Przypisano obraz do produktu: ${product.name}`);\n                        }\n                    } catch (error) {\n                        logEvent('Błąd importu obrazu produktu:', file.name, error);\n                    }\n                }\n            }\n\n            if (imgFolder.folder('gallery')) {\n                const galleryFolder = imgFolder.folder('gallery');\n                const galleryFiles = [];\n                galleryFolder.forEach((relativePath, file) => {\n                    if (!file.dir) {\n                        galleryFiles.push(file);\n                    }\n                });\n                \n                logEvent(`Znaleziono ${galleryFiles.length} obrazów galerii`);\n                \n                for (const file of galleryFiles) {\n                    try {\n                        const base64Data = await file.async('base64');\n                        const imageData = `data:image/png;base64,${base64Data}`;\n                        \n                        let fileName = file.name;\n                        \n                        if (fileName.includes('/')) {\n                            const pathParts = fileName.split('/');\n                            fileName = pathParts[pathParts.length - 1];\n                        }\n                        \n                        fileName = fileName.replace('.png', '');\n                        \n                        logEvent(`Przetwarzanie pliku galerii: \"${file.name}\" -> \"${fileName}\"`);\n\n                        const exists = galleryImages.some(img => \n                            img.name.toLowerCase() === fileName.toLowerCase() && \n                            img.source !== 'github'\n                        );\n                        \n                        if (!exists) {\n                            galleryImages.push({\n                                id: generateUniqueId(),\n                                name: fileName,\n                                data: imageData,\n                                dateAdded: new Date().toISOString(),\n                                source: 'local'\n                            });\n                            logEvent(`Dodano do galerii: \"${fileName}\"`);\n                        } else {\n                            logEvent(`Pominięto istniejący obraz: \"${fileName}\"`);\n                        }\n                    } catch (error) {\n                        logEvent('Błąd importu obrazu galerii:', file.name, error);\n                    }\n                }\n                \n                await saveGallery();\n                logEvent(`Zapisano galerię po imporcie`);\n            }\n\n            if (imgFolder.folder('backgrounds')) {\n                const backgroundFolder = imgFolder.folder('backgrounds');\n                const backgroundFiles = [];\n                backgroundFolder.forEach((relativePath, file) => {\n                    if (!file.dir) {\n                        backgroundFiles.push(file);\n                    }\n                });\n                \n                logEvent(`Znaleziono ${backgroundFiles.length} obrazów tła`);\n                \n                for (const file of backgroundFiles) {\n                    try {\n                        const base64Data = await file.async('base64');\n                        const imageData = `data:image/png;base64,${base64Data}`;\n                        \n                        let fileName = file.name;\n                        \n                        if (fileName.includes('/')) {\n                            const pathParts = fileName.split('/');\n                            fileName = pathParts[pathParts.length - 1];\n                        }\n                        \n                        fileName = fileName.replace('.png', '');\n                        \n                        logEvent(`Przetwarzanie pliku tła: \"${file.name}\" -> \"${fileName}\"`);\n\n                        const exists = backgroundImages.some(bg => \n                            bg.name.toLowerCase() === fileName.toLowerCase() && \n                            bg.source !== 'github'\n                        );\n                        \n                        if (!exists) {\n                            backgroundImages.push({\n                                id: generateUniqueId(),\n                                name: fileName,\n                                data: imageData,\n                                dateAdded: new Date().toISOString(),\n                                source: 'local'\n                            });\n                            logEvent(`Dodano tło: \"${fileName}\"`);\n                        } else {\n                            logEvent(`Pominięto istniejące tło: \"${fileName}\"`);\n                        }\n                    } catch (error) {\n                        logEvent('Błąd importu tła:', file.name, error);\n                    }\n                }\n                \n                await saveBackgrounds();\n            }\n        }\n\n        loader.update(95);\n        \n        if (zip.file('selection_state.json')) {\n            try {\n                const selectionData = await zip.file('selection_state.json').async('text');\n                const selectionState = JSON.parse(selectionData);\n                \n                if (selectionState.selectedBackgroundId && !selectedBackgroundId) {\n                    selectedBackgroundId = selectionState.selectedBackgroundId;\n                    localStorage.setItem('selectedBackground', selectedBackgroundId);\n                }\n            } catch (selectionError) {\n                logEvent('Błąd importu stanu zaznaczeń:', selectionError);\n            }\n        }\n        \n        await saveProducts();\n        await saveCategories();\n        await saveExchangeRates();\n        await saveShops();\n        await saveEffects();\n        await saveLogs();\n        await saveGallery();\n        await saveBackgrounds();\n        \n        if (selectedBackgroundId) {\n            setTimeout(() => {\n                applyBackgroundStyle();\n            }, 500);\n        }\n\n        await updateCurrencySelects();\n        await updateCategorySelects();\n        await fillEffectSelect();\n        await renderProducts(applyAllFilters());\n        await forceUpdateStatistics();\n        await renderGallery();\n        await renderBackgrounds();\n        await removeDuplicatePricePoints();\n        \n        await restoreGitHubImagesAfterImport();\n        \n        document.getElementById('categoryFilter').value = currentFilter;\n        document.getElementById('sortSelect').value = currentSort;\n        document.getElementById('searchInput').value = currentSearch;\n        \n        initAllSettings();\n        applyVisibilitySettings();\n        applyAdditionalVisibilitySettings();\n        applyAdvancedButtonsSetting();\n        forceSaveAll();\n        await cleanupGalleryDuplicatesAutomatically();\n\n        loader.complete();\n        setTimeout(() => {\n            loader.reset();\n            showNotification('Import zakończony pomyślnie', 'success');\n            playNotificationSound('success');\n            \n            if (selectedBackgroundId) {\n                setTimeout(() => {\n                    applyBackgroundStyle();\n                    showNotification('Przywrócono ustawienia tła', 'success');\n                }, 1000);\n            }\n        }, 500);\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd przetwarzania pliku: ' + error.message, 'danger');\n    }\n}\nfunction isImageFromGitHub(imageData) {\n    return galleryImages.some(img => img.data === imageData && img.source === 'github');\n}\nasync function restoreGitHubImagesAfterImport() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    try {\n        let restoredProductImages = 0;\n        \n        for (const product of products) {\n            if (product.imageSource === 'github' && product.imageGitHubName && !product.image) {\n                const galleryImage = galleryImages.find(img => \n                    img.name.toLowerCase().trim() === product.imageGitHubName.toLowerCase().trim() && \n                    img.source === 'github'\n                );\n                \n                if (galleryImage) {\n                    product.image = galleryImage.url;\n                    product.imageId = galleryImage.id;\n                    restoredProductImages++;\n                }\n            }\n        }\n        \n        if (restoredProductImages > 0) {\n            await saveProducts();\n            renderProducts(applyAllFilters());\n            showNotification(`Przywrócono ${restoredProductImages} obrazów produktów z GitHub`, 'success');\n        }\n    } catch (error) {\n        logEvent('Błąd przywracania obrazów z GitHub:', error);\n        showNotification('Część obrazów z GitHub nie została przywrócona.', 'warning');\n    } finally {\n        loader.reset();\n    }\n}\nasync function fetchGitHubImageByName(imageName, type = 'gallery') {\n    try {\n        const folderPath = type === 'background' ? 'images/backgrounds' : 'images/gallery';\n        const files = await fetchGitHubFiles(folderPath);\n        if (files) {\n            const imageFile = files.find(file => {\n                const fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n                return fileName.toLowerCase() === imageName.toLowerCase();\n            });\n            \n            if (imageFile) {\n                return imageFile.download_url;\n            }\n        }\n    } catch (error) {\n        logEvent('Błąd pobierania obrazu z GitHub:', error);\n    }\n    return null;\n}\nfunction handleAndroidFileSelect(fileName, base64Data) {\n    logEvent('Wybieranie pliku z Androida: ' + fileName);\n    const byteCharacters = atob(base64Data);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const blob = new Blob([byteArray], {type: 'application/zip'});\n    const file = new File([blob], fileName, {type: 'application/zip'});\n    processImportFile(file);\n}\nfunction saveBackgroundStyle() {\n    if (selectedBackgroundId) {\n        const img = backgroundImages.find(bg => bg.id === selectedBackgroundId);\n        if (img) {\n            document.body.style.backgroundImage = `url(${img.data})`;\n            document.body.style.backgroundSize = 'cover';\n            document.body.style.backgroundAttachment = 'fixed';\n\t\t\tdocument.querySelector('header').style.background = 'transparent !importnat';\n\t\t\tdocument.querySelector('header').style.borderBottom = 'none !importnat';\n\t\t\tdocument.querySelector('header').style.boxShadow = 'none !importnat';\n            localStorage.setItem('selectedBackground', img.id);\n            showNotification('Tło zostało zapisane', 'success');\n\t\t\tplayNotificationSound('success');\n        }\n    } else {\n        document.body.style.backgroundImage = '';\n\t\tdocument.querySelector('header').style.background = 'linear-gradient(135deg, #790000, #ff0000)';\n\t\tdocument.querySelector('header').style.borderBottom = '3px solid rgba(255,255,255,0.2)';\n\t\tdocument.querySelector('header').style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';\n        localStorage.removeItem('selectedBackground');\n        showNotification('Przywrócono domyślne tło', 'info');\n    }\n    closeBackgroundModal();\n}\nasync function cleanupGalleryDuplicatesAutomatically() {\n    try {\n        const originalGalleryCount = galleryImages.length;\n        const originalBackgroundCount = backgroundImages.length;\n        \n        const uniqueGalleryImages = removeDuplicatesWithGitHubPriority(galleryImages);\n        const uniqueBackgroundImages = removeDuplicatesWithGitHubPriority(backgroundImages);\n        \n        const galleryChanged = originalGalleryCount !== uniqueGalleryImages.length;\n        const backgroundChanged = originalBackgroundCount !== uniqueBackgroundImages.length;\n        \n        if (galleryChanged || backgroundChanged) {\n            galleryImages.length = 0;\n            galleryImages.push(...uniqueGalleryImages);\n            \n            backgroundImages.length = 0;\n            backgroundImages.push(...uniqueBackgroundImages);\n            \n            await saveGallery();\n            await saveBackgrounds();\n            \n            renderGallery();\n            renderBackgrounds();\n            \n            const removedGallery = originalGalleryCount - galleryImages.length;\n            const removedBackground = originalBackgroundCount - backgroundImages.length;\n            \n            logEvent(`Automatyczne czyszczenie duplikatów: Usunięto ${removedGallery} z galerii, ${removedBackground} z tła`);\n            \n            if (removedGallery > 0 || removedBackground > 0) {\n                showNotification(`Automatycznie usunięto duplikaty: ${removedGallery} z galerii, ${removedBackground} z tła`, 'info', 3000);\n            }\n        }\n        \n    } catch (error) {\n        logEvent('Błąd podczas automatycznego czyszczenia duplikatów:', error);\n    }\n}\nfunction removeDuplicatesWithGitHubPriority(images) {\n    const grouped = {};\n    \n    images.forEach(img => {\n        const key = img.name.toLowerCase().trim().replace(/\\s+/g, ' ');\n        \n        if (!grouped[key]) {\n            grouped[key] = [];\n        }\n        grouped[key].push(img);\n    });\n    \n    const result = [];\n    \n    for (const key in grouped) {\n        const group = grouped[key];\n        \n        const githubImage = group.find(img => img.source === 'github');\n        \n        if (githubImage) {\n            result.push(githubImage);\n        } else {\n            const imageToKeep = group.reduce((newest, current) => {\n                const newestDate = new Date(newest.dateAdded || 0);\n                const currentDate = new Date(current.dateAdded || 0);\n                return currentDate > newestDate ? current : newest;\n            });\n            result.push(imageToKeep);\n        }\n    }\n    \n    return result;\n}\nfunction filterUserData(data, defaultData, identifier = 'name') {\n    return data.filter(item => {\n        if (typeof defaultData[0] === 'string') {\n            return !defaultData.includes(item);\n        } else {\n            return !defaultData.some(defaultItem => defaultItem[identifier] === item[identifier]);\n        }\n    });\n}\nfunction initAnimationSettings() {\n    const animationsEnabled = localStorage.getItem('animationsEnabled') !== 'false';\n    const toggle = document.getElementById('animationsToggle');\n    if (toggle) {\n        toggle.checked = animationsEnabled;\n        updateAnimations(animationsEnabled);\n        toggle.addEventListener('change', function() {\n            const enabled = this.checked;\n            localStorage.setItem('animationsEnabled', enabled);\n            updateAnimations(enabled);\n            showNotification(`Animacje ${enabled ? 'włączone' : 'wyłączone'}`, 'success');\n        });\n    }\n}\nfunction updateAnimations(enabled) {\n    if (enabled) {\n        document.body.classList.remove('no-animations');\n    } else {\n        document.body.classList.add('no-animations');\n    }\n}\nasync function loadSystemFonts(force = false) {\n    const fontSelector = document.getElementById('fontSelector');\n    if (!fontSelector) return;\n    const fontPermission = localStorage.getItem('fontPermission');\n    const permissionGranted = fontPermission === 'granted';\n    const permissionDenied = fontPermission === 'denied';\n    if (permissionGranted && !systemFontsLoaded && !force) {\n        showFontPermissionDialog(fontSelector);\n        return;\n    }\n    if (!permissionGranted && !permissionDenied && !force) {\n        showFontPermissionDialog(fontSelector);\n        return;\n    }\n    if (permissionGranted || force) {\n        try {\n            if ('queryLocalFonts' in window) {\n                const availableFonts = await window.queryLocalFonts();\n                const fontFamilies = new Set();\n                \n                fontFamilies.add('Systemowa domyślna');\n                \n                availableFonts.forEach(font => {\n                    fontFamilies.add(font.family);\n                });\n                \n                fontSelector.innerHTML = '';\n                fontFamilies.forEach(font => {\n                    const option = document.createElement('option');\n                    option.value = font === 'Systemowa domyślna' ? '' : font;\n                    option.textContent = font;\n                    fontSelector.appendChild(option);\n                });\n                \n                restoreSavedFont(fontSelector);\n                systemFontsLoaded = true;\n                return;\n            }\n        } catch (error) {\n            logEvent('Błąd pobierania czcionek systemowych:', error);\n        }\n    }\n    addFallbackFonts(fontSelector);\n    restoreSavedFont(fontSelector);\n}\nfunction showFontPermissionDialog(fontSelector) {\n    if (document.getElementById('fontPermissionModal')) return;\n    const modal = document.createElement('div');\n    modal.id = 'fontPermissionModal';\n    modal.className = 'modal';\n    modal.innerHTML = `\n        <div class=\"modal-content\" style=\"max-width: 500px;\">\n            <div class=\"modal-header\" style=\"text-align: center;display:block !important;\">\n                <h3>Dostęp do czcionek systemowych</h3>\n            </div>\n            <div class=\"modal-body\"><center>\n                <p>Aby wyświetlić listę czcionek dostępnych w systemie, aplikacja potrzebuje Twojej zgody na dostęp do nich.</p>\n                <p>Czy chcesz załadować czcionki systemowe?</p></center>\n            </div>\n            <div class=\"modal-footer\" style=\"display: flex; justify-content: space-between; gap: 10px;\">\n                <button id=\"fontPermissionDeny\" class=\"btn-danger\" style=\"flex: 1;\">\n                    <i class=\"fas fa-times\"></i> Nie wyrażam zgody\n                </button>\n                <button id=\"fontPermissionAllow\" class=\"btn-success\" style=\"flex: 1;\">\n                    <i class=\"fas fa-check\"></i> Wyrażam zgodę\n                </button>\n            </div>\n        </div>\n    `;\n    document.body.appendChild(modal);\n    modal.classList.add('show');\n  \n  \n    setTimeout(() => {\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n    document.getElementById('fontPermissionAllow').addEventListener('click', function() {\n        localStorage.setItem('fontPermission', 'granted');\n        modal.classList.remove('show');\n        setTimeout(() => modal.remove(), 300);\n        loadSystemFonts(true);\n    });\n    document.getElementById('fontPermissionDeny').addEventListener('click', function() {\n        localStorage.setItem('fontPermission', 'denied');\n        modal.classList.remove('show');\n        setTimeout(() => modal.remove(), 300);\n        addFallbackFonts(fontSelector);\n        restoreSavedFont(fontSelector);\n    });\n}\nfunction addFallbackFonts(fontSelector) {\n    const fallbackFonts = [\n        'Arial, sans-serif', 'Helvetica, sans-serif', 'Georgia, serif',\n        'Times New Roman, serif', 'Courier New, monospace', 'Verdana, sans-serif',\n        'Tahoma, sans-serif', 'Trebuchet MS, sans-serif', 'Impact, sans-serif', 'Comic Sans MS, cursive'\n    ];\n    if (fontSelector.options.length === 0) {\n        fontSelector.innerHTML = '<option value=\"\">Systemowa domyślna</option>';\n    }\n    fallbackFonts.forEach(font => {\n        const option = document.createElement('option');\n        option.value = font;\n        option.textContent = font.split(',')[0];\n        fontSelector.appendChild(option);\n    });\n}\nfunction restoreSavedFont(fontSelector) {\n    const savedFont = localStorage.getItem('appFont');\n    if (savedFont) {\n        fontSelector.value = savedFont;\n        updateFont(savedFont);\n    }\n}\nfunction showLoadFontsButton(fontSelector) {\n    if (document.getElementById('loadFontsBtn')) return;\n    const btn = document.createElement('button');\n    btn.id = 'loadFontsBtn';\n    btn.type = 'button';\n    btn.textContent = 'Załaduj czcionki systemowe';\n    btn.title = 'Kliknij aby aplikacja mogła uzyskać dostęp do czcionek systemowych';\n    fontSelector.parentNode.insertBefore(btn, fontSelector.nextSibling);\n    btn.addEventListener('click', async () => {\n        try {\n            // await loadSystemFonts();\n            btn.remove();\n        } catch (e) {\n            logEvent('Ponowne pobieranie czcionek nie powiodło się:', e);\n            if (e.name === 'SecurityError') {\n                alert('Przeglądarka nadal blokuje dostęp do czcionek. Spróbuj zaktualizować przeglądarkę lub użyć innej.');\n            }\n        }\n    }, { once: true });\n}\nfunction initFontSettings() {\n    const fontSelector = document.getElementById('fontSelector');\n    if (fontSelector) {\n        addFallbackFonts(fontSelector);\n        restoreSavedFont(fontSelector);\n        // loadSystemFonts();\n        fontSelector.addEventListener('change', function() {\n            const font = this.value;\n            localStorage.setItem('appFont', font);\n            updateFont(font);\n            showNotification(`Czcionka zmieniona`, 'success');\n        });\n    }\n}\nfunction updateFont(font) {\n    if (!font) {\n        document.body.style.fontFamily = '';\n    } else {\n        document.body.style.fontFamily = font;\n    }\n}\nfunction initAllSettings() {\n    initAnimationSettings();\n    initFontSettings();\n    initColorSettings();\n    initVisibilitySettings();\n    initAdditionalVisibilitySettings();\n    initAdvancedButtonsSetting();\n\tinitDarkModeSetting();\n    const savedCurrencyConfig = localStorage.getItem('currencyConfig');\n    if (savedCurrencyConfig) {\n        currencyConfig = JSON.parse(savedCurrencyConfig);\n    }\n}\ndocument.querySelectorAll('.theme-preset').forEach(button => {\n    button.addEventListener('click', function() {\n        const theme = this.dataset.theme;\n        applyThemePreset(theme);\n    });\n});\nfunction applyThemePreset(theme) {\n    const themes = {\n        default: {\n            primary: '#00796b',\n            accent: '#4db6ac',\n            gradientFrom: '#790000',\n            gradientTo: '#ff0000'\n        },\n        blue: {\n            primary: '#1565c0',\n            accent: '#42a5f5',\n            gradientFrom: '#004d7a',\n            gradientTo: '#008793'\n        },\n        green: {\n            primary: '#2e7d32',\n            accent: '#4caf50',\n            gradientFrom: '#2d5016',\n            gradientTo: '#4a7c59'\n        },\n        purple: {\n            primary: '#7b1fa2',\n            accent: '#ba68c8',\n            gradientFrom: '#3f2b96',\n            gradientTo: '#a8c0ff'\n        }\n    };\n    const themeColors = themes[theme];\n    document.getElementById('primaryColorPicker').value = themeColors.primary;\n    document.getElementById('accentColorPicker').value = themeColors.accent;\n    document.getElementById('headerGradientFrom').value = themeColors.gradientFrom;\n    document.getElementById('headerGradientTo').value = themeColors.gradientTo;\n    applyCustomColors();\n}\nfunction initSliders() {\n    const opacitySlider = document.getElementById('panelOpacity');\n    const opacityValue = document.getElementById('opacityValue');\n    if (opacitySlider && opacityValue) {\n        opacitySlider.addEventListener('input', function() {\n            const value = this.value;\n            opacityValue.textContent = `${Math.round(value * 100)}%`;\n            document.documentElement.style.setProperty('--panel-opacity', value);\n            localStorage.setItem('panelOpacity', value);\n            document.querySelectorAll('.panel').forEach(panel => {\n                panel.style.opacity = value;\n            });\n        });\n        const savedOpacity = localStorage.getItem('panelOpacity') || 1;\n        opacitySlider.value = savedOpacity;\n        opacityValue.textContent = `${Math.round(savedOpacity * 100)}%`;\n        document.documentElement.style.setProperty('--panel-opacity', savedOpacity);\n    }\n    const blurSlider = document.getElementById('backgroundBlur');\n    const blurValue = document.getElementById('blurValue');\n    if (blurSlider && blurValue) {\n        blurSlider.addEventListener('input', function() {\n            const value = this.value;\n            blurValue.textContent = `${value}px`;\n            document.documentElement.style.setProperty('--background-blur', `${value}px`);\n            localStorage.setItem('backgroundBlur', value);\n            const bgContainer = document.getElementById('bgContainer');\n            if (bgContainer) {\n                bgContainer.style.backdropFilter = `blur(${value}px)`;\n            }\n        });\n        const savedBlur = localStorage.getItem('backgroundBlur') || 0;\n        blurSlider.value = savedBlur;\n        blurValue.textContent = `${savedBlur}px`;\n        document.documentElement.style.setProperty('--background-blur', `${savedBlur}px`);\n    }\n    const darkenSlider = document.getElementById('darkenEffect');\n    const darkenValue = document.getElementById('darkenValue');\n    if (darkenSlider && darkenValue) {\n        darkenSlider.addEventListener('input', function() {\n            const value = this.value;\n            darkenValue.textContent = `${value}%`;\n            document.documentElement.style.setProperty('--darken-amount', `${value}%`);\n            localStorage.setItem('darkenEffect', value);\n            applyDarkenEffect(value);\n        });\n        const savedDarken = localStorage.getItem('darkenEffect') || 0;\n        darkenSlider.value = savedDarken;\n        darkenValue.textContent = `${savedDarken}%`;\n        document.documentElement.style.setProperty('--darken-amount', `${savedDarken}%`);\n        applyDarkenEffect(savedDarken);\n    }\n    const radiusSlider = document.getElementById('borderRadius');\n    const radiusValue = document.getElementById('radiusValue');\n    if (radiusSlider && radiusValue) {\n        radiusSlider.addEventListener('input', function() {\n            const value = this.value;\n            radiusValue.textContent = `${value}px`;\n            document.documentElement.style.setProperty('--radius', `${value}px`);\n            localStorage.setItem('borderRadius', value);\n            document.querySelectorAll('.panel, .product, .gallery-item, .modal-content, button')\n                .forEach(el => {\n                    el.style.borderRadius = `${value}px`;\n                });\n        });\n        const savedRadius = localStorage.getItem('borderRadius') || 10;\n        radiusSlider.value = savedRadius;\n        radiusValue.textContent = `${savedRadius}px`;\n        document.documentElement.style.setProperty('--radius', `${savedRadius}px`);\n    }\n    const borderWidthSlider = document.getElementById('borderWidth');\n    const borderWidthValue = document.getElementById('borderWidthValue');\n    if (borderWidthSlider && borderWidthValue) {\n        borderWidthSlider.addEventListener('input', function() {\n            const value = this.value;\n            borderWidthValue.textContent = `${value}px`;\n            document.documentElement.style.setProperty('--border-width', `${value}px`);\n            localStorage.setItem('borderWidth', value);\n            document.querySelectorAll('.panel, .product, .gallery-item, .modal-content')\n                .forEach(el => {\n                    el.style.borderWidth = `${value}px`;\n                });\n        });\n        const savedBorderWidth = localStorage.getItem('borderWidth') || 1;\n        borderWidthSlider.value = savedBorderWidth;\n        borderWidthValue.textContent = `${savedBorderWidth}px`;\n        document.documentElement.style.setProperty('--border-width', `${savedBorderWidth}px`);\n    }\n    const borderColorPicker = document.getElementById('borderColorPicker');\n    if (borderColorPicker) {\n        borderColorPicker.addEventListener('input', function() {\n            const value = this.value;\n            document.documentElement.style.setProperty('--border-color', value);\n            localStorage.setItem('borderColor', value);\n            document.querySelectorAll('.panel, .product, .gallery-item, .modal-content')\n                .forEach(el => {\n                    el.style.borderColor = value;\n                });\n        });\n        const savedBorderColor = localStorage.getItem('borderColor') || '#d1d9e2';\n        borderColorPicker.value = savedBorderColor;\n        document.documentElement.style.setProperty('--border-color', savedBorderColor);\n    }\n    const colorPickers = [\n        'primaryColorPicker', 'accentColorPicker', \n        'headerGradientFrom', 'headerGradientTo'\n    ];\n    colorPickers.forEach(pickerId => {\n        const picker = document.getElementById(pickerId);\n        if (picker) {\n            picker.addEventListener('input', function() {\n                applyCustomColors();\n            });\n        }\n    });\n    const savedColors = JSON.parse(localStorage.getItem('customColors'));\n    if (savedColors) {\n        document.getElementById('primaryColorPicker').value = savedColors.primary;\n        document.getElementById('accentColorPicker').value = savedColors.accent;\n        document.getElementById('headerGradientFrom').value = savedColors.gradientFrom;\n        document.getElementById('headerGradientTo').value = savedColors.gradientTo;\n        applyCustomColors();\n    }\n}\nfunction applyDarkenEffect(amount) {\n    let darkenOverlay = document.getElementById('darkenOverlay');\n    if (!darkenOverlay) {\n        darkenOverlay = document.createElement('div');\n        darkenOverlay.id = 'darkenOverlay';\n        darkenOverlay.style.position = 'fixed';\n        darkenOverlay.style.top = '0';\n        darkenOverlay.style.left = '0';\n        darkenOverlay.style.width = '100%';\n        darkenOverlay.style.height = '100%';\n        darkenOverlay.style.backgroundColor = `rgba(0, 0, 0, ${amount/100})`;\n        darkenOverlay.style.pointerEvents = 'none';\n        darkenOverlay.style.zIndex = '9998';\n        document.body.appendChild(darkenOverlay);\n    } else {\n        darkenOverlay.style.backgroundColor = `rgba(0, 0, 0, ${amount/100})`;\n    }\n    darkenOverlay.style.display = amount > 0 ? 'block' : 'none';\n}\nfunction applyCustomColors() {\n    const primaryColor = document.getElementById('primaryColorPicker').value;\n    const accentColor = document.getElementById('accentColorPicker').value;\n    const gradientFrom = document.getElementById('headerGradientFrom').value;\n    const gradientTo = document.getElementById('headerGradientTo').value;\n    document.documentElement.style.setProperty('--primary', primaryColor);\n    document.documentElement.style.setProperty('--accent', accentColor);\n    const header = document.querySelector('header');\n    header.style.background = `linear-gradient(135deg, ${gradientFrom}, ${gradientTo})`;\n    localStorage.setItem('customColors', JSON.stringify({\n        primary: primaryColor,\n        accent: accentColor,\n        gradientFrom: gradientFrom,\n        gradientTo: gradientTo\n    }));\n}\nfunction resetAnimationSettings() {\n    document.getElementById('animationsToggle').checked = true;\n    document.body.classList.remove('no-animations');\n    localStorage.setItem('animationsEnabled', 'true');\n}\nfunction resetFontSettings() {\n    document.getElementById('fontSelector').value = '';\n    document.body.style.fontFamily = '';\n    localStorage.removeItem('appFont');\n}\nfunction resetVisibilitySettings() {\n    const defaults = {\n        controlsVisibility: true,\n        hamburgerVisibility: false,\n        instructionVisibility: true,\n        statisticsVisibility: true,\n        notificationsVisibility: true,\n        advancedButtons: true\n    };\n    document.getElementById('controlsVisibilityToggle').checked = defaults.controlsVisibility;\n    document.getElementById('hamburgerVisibilityToggle').checked = defaults.hamburgerVisibility;\n    document.getElementById('instructionVisibilityToggle').checked = defaults.instructionVisibility;\n    document.getElementById('statisticsVisibilityToggle').checked = defaults.statisticsVisibility;\n    document.getElementById('notificationsVisibilityToggle').checked = defaults.notificationsVisibility;\n    document.getElementById('advancedButtonsVisibilityToggle').checked = defaults.advancedButtons;\n    showControlsPanel = defaults.controlsVisibility;\n    showHamburgerOnDesktop = defaults.hamburgerVisibility;\n    showInstructionButton = defaults.instructionVisibility;\n    showStatisticsSection = defaults.statisticsVisibility;\n    showNotifications = defaults.notificationsVisibility;\n    showAdvancedButtons = defaults.advancedButtons;\n    localStorage.setItem('showControlsPanel', defaults.controlsVisibility);\n    localStorage.setItem('showHamburgerOnDesktop', defaults.hamburgerVisibility);\n    localStorage.setItem('showInstructionButton', defaults.instructionVisibility);\n    localStorage.setItem('showStatisticsSection', defaults.statisticsVisibility);\n    localStorage.setItem('showNotifications', defaults.notificationsVisibility);\n    localStorage.setItem('showAdvancedButtons', defaults.advancedButtons);\n    applyVisibilitySettings();\n    applyAdditionalVisibilitySettings();\n    applyAdvancedButtonsSetting();\n}\nfunction resetAllSettingsToDefault() {\n    showConfirmation(\n        'Resetowanie ustawień',\n        'Czy na pewno chcesz przywrócić wszystkie ustawienia do wartości domyślnych?',\n        function(confirmed) {\n            if (!confirmed) return;\n            resetColors();\n            resetSlidersToDefault();\n            resetVisibilitySettings();\n            resetFontSettings();\n            resetAnimationSettings();\n            resetToDefaultBackground();\n            closeBackgroundModal();\n            showNotification('Przywrócono domyślne ustawienia', 'success');\n            playNotificationSound('success');\n        },\n        null,\n        20000\n    );\n}\nfunction resetSlidersToDefault() {\n    const defaults = {\n        panelOpacity: 1,\n        backgroundBlur: 0,\n        darkenEffect: 0,\n        borderRadius: 10,\n        borderWidth: 1,\n        borderColor: '#d1d9e2'\n    };\n    if (document.getElementById('panelOpacity')) document.getElementById('panelOpacity').value = defaults.panelOpacity;\n    if (document.getElementById('backgroundBlur')) document.getElementById('backgroundBlur').value = defaults.backgroundBlur;\n    if (document.getElementById('darkenEffect')) document.getElementById('darkenEffect').value = defaults.darkenEffect;\n    if (document.getElementById('borderRadius')) document.getElementById('borderRadius').value = defaults.borderRadius;\n    if (document.getElementById('borderWidth')) document.getElementById('borderWidth').value = defaults.borderWidth;\n    if (document.getElementById('borderColorPicker')) document.getElementById('borderColorPicker').value = defaults.borderColor;\n    if (document.getElementById('opacityValue')) document.getElementById('opacityValue').textContent = `${defaults.panelOpacity * 100}%`;\n    if (document.getElementById('blurValue')) document.getElementById('blurValue').textContent = `${defaults.backgroundBlur}px`;\n    if (document.getElementById('darkenValue')) document.getElementById('darkenValue').textContent = `${defaults.darkenEffect}%`;\n    if (document.getElementById('radiusValue')) document.getElementById('radiusValue').textContent = `${defaults.borderRadius}px`;\n    if (document.getElementById('borderWidthValue')) document.getElementById('borderWidthValue').textContent = `${defaults.borderWidth}px`;\n    document.documentElement.style.setProperty('--panel-opacity', defaults.panelOpacity);\n    document.documentElement.style.setProperty('--background-blur', `${defaults.backgroundBlur}px`);\n    document.documentElement.style.setProperty('--darken-amount', `${defaults.darkenEffect}%`);\n    document.documentElement.style.setProperty('--radius', `${defaults.borderRadius}px`);\n    document.documentElement.style.setProperty('--border-width', `${defaults.borderWidth}px`);\n    document.documentElement.style.setProperty('--border-color', defaults.borderColor);\n    if (defaults.darkenEffect === 0) {\n        const darkenOverlay = document.getElementById('darkenOverlay');\n        if (darkenOverlay) darkenOverlay.style.display = 'none';\n    }\n    localStorage.setItem('panelOpacity', defaults.panelOpacity);\n    localStorage.setItem('backgroundBlur', defaults.backgroundBlur);\n    localStorage.setItem('darkenEffect', defaults.darkenEffect);\n    localStorage.setItem('borderRadius', defaults.borderRadius);\n    localStorage.setItem('borderWidth', defaults.borderWidth);\n    localStorage.setItem('borderColor', defaults.borderColor);\n}\nfunction applyCustomColors() {\n    const primaryColor = document.getElementById('primaryColorPicker').value;\n    const accentColor = document.getElementById('accentColorPicker').value;\n    const gradientFrom = document.getElementById('headerGradientFrom').value;\n    const gradientTo = document.getElementById('headerGradientTo').value;\n    document.documentElement.style.setProperty('--primary', primaryColor);\n    document.documentElement.style.setProperty('--accent', accentColor);\n    const header = document.querySelector('header');\n    header.style.background = `linear-gradient(135deg, ${gradientFrom}, ${gradientTo})`;\n    localStorage.setItem('customColors', JSON.stringify({\n        primary: primaryColor,\n        accent: accentColor,\n        gradientFrom: gradientFrom,\n        gradientTo: gradientTo\n    }));\n}\nfunction resetColors() {\n    document.documentElement.style.removeProperty('--primary');\n    document.documentElement.style.removeProperty('--accent');\n    const header = document.querySelector('header');\n    header.style.background = 'linear-gradient(135deg, #790000, #ff0000)';\n    document.getElementById('primaryColorPicker').value = '#00796b';\n    document.getElementById('accentColorPicker').value = '#4db6ac';\n    document.getElementById('headerGradientFrom').value = '#790000';\n    document.getElementById('headerGradientTo').value = '#ff0000';\n    localStorage.removeItem('customColors');\n    showNotification('Przywrócono domyślne kolory', 'success');\n}\nfunction initColorSettings() {\n    const savedColors = JSON.parse(localStorage.getItem('customColors'));\n    if (savedColors) {\n        document.getElementById('primaryColorPicker').value = savedColors.primary;\n        document.getElementById('accentColorPicker').value = savedColors.accent;\n        document.getElementById('headerGradientFrom').value = savedColors.gradientFrom;\n        document.getElementById('headerGradientTo').value = savedColors.gradientTo;\n        applyCustomColors();\n    }\n    initSliders();\n}\nfunction openBackgroundModal() {\n    backgroundCurrentPage = 1;\n    updateBackgroundCount();\n    document.getElementById('backgroundUploadPanel').style.display = 'none';\n    document.getElementById('backgroundImageName').value = '';\n    document.getElementById('backgroundUploadInput').value = '';\n    renderBackgrounds();\n    document.getElementById('backgroundModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('backgroundModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeBackgroundModal() {\n    document.getElementById('backgroundModal').classList.remove('show');\n}\nfunction findProductIndex(product) {\n  return products.findIndex(p => \n    p.name === product.name &&\n    p.category === product.category &&\n    p.price === product.price &&\n    p.quantity === product.quantity &&\n    p.year === product.year\n  );\n}\nasync function loadGallery() {\n    try {\n        const db = await openDB();\n        const tx = db.transaction('galleryImages', 'readonly');\n        const store = tx.objectStore('galleryImages');\n        const request = store.getAll();\n        return new Promise((resolve, reject) => {\n            request.onsuccess = async function() {\n                const savedImages = request.result || [];\n                galleryImages = [];\n                \n                for (const savedImg of savedImages) {\n                    if (savedImg.source === 'github') {\n                        galleryImages.push({\n                            id: savedImg.id,\n                            name: savedImg.name,\n                            url: savedImg.url,\n                            dateAdded: savedImg.dateAdded,\n                            source: 'github'\n                        });\n                    } else {\n                        galleryImages.push({\n                            id: savedImg.id,\n                            name: savedImg.name,\n                            data: savedImg.data,\n                            dateAdded: savedImg.dateAdded,\n                            source: 'local'\n                        });\n                    }\n                }\n                \n                await cleanupGalleryDuplicatesAutomatically();\n                resolve();\n            };\n            request.onerror = () => reject('Błąd ładowania galerii');\n        });\n    } catch (error) {\n        logEvent(error);\n        galleryImages = [];\n    } finally {\n        updateGalleryCount();\n    }\n}\n\nasync function saveGallery() {\n    try {\n        const db = await openDB();\n        const tx = db.transaction('galleryImages', 'readwrite');\n        const store = tx.objectStore('galleryImages');\n        await store.clear();\n        \n        for (const img of galleryImages) {\n            if (!img.id) {\n                img.id = generateUniqueId();\n            }\n            \n            const imageToSave = {\n                id: img.id,\n                name: img.name,\n                dateAdded: img.dateAdded,\n                source: img.source || 'local'\n            };\n            \n            if (img.source === 'github') {\n                imageToSave.url = img.url;\n            } else {\n                imageToSave.data = img.data;\n            }\n            \n            await store.put(imageToSave);\n        }\n        return new Promise(resolve => tx.oncomplete = resolve);\n    } catch (error) {\n        logEvent('Błąd zapisu galerii:', error);\n    }\n}\nconst soundManager = {\n  lastPlayed: {},\n  minInterval: 3000,\n  queue: [],\n  isPlaying: false,\n  play(type) {\n    if (!soundPermissionGiven || !soundAllowed) return;\n    const now = Date.now();\n    if (this.lastPlayed[type] && now - this.lastPlayed[type] < this.minInterval) {\n      return;\n    }\n    this.lastPlayed[type] = now;\n    this.queue.push(type);\n    this.processQueue();\n  },\n  async processQueue() {\n    if (this.isPlaying || this.queue.length === 0) return;\n    this.isPlaying = true;\n    const type = this.queue.shift();\n    try {\n      const audio = new Audio(SOUND_URLS[type]);\n      await audio.play();\n      await new Promise(resolve => {\n        setTimeout(resolve, this.minInterval);\n      });\n    } catch (error) {\n    }\n    this.isPlaying = false;\n    this.processQueue();\n  }\n};\nfunction playNotificationSound(type) {\n  soundManager.play(type);\n}\nfunction playSound(type) {\n  soundManager.play(type);\n}\nfunction playDemoSound(type) {\n  soundManager.play(type);\n}\nfunction unlockAudioContext() {\n  if (audioContextUnlocked) return;\n  const context = new (window.AudioContext || window.webkitAudioContext)();\n  const buffer = context.createBuffer(1, 1, 22050);\n  const source = context.createBufferSource();\n  source.buffer = buffer;\n  source.connect(context.destination);\n  source.start(0);\n  source.onended = () => {\n    audioContextUnlocked = true;\n    context.close();\n  };\n}\nfunction toggleDarkMode() {\n    setDarkMode(!darkMode);\n}\ndarkModeToggle.addEventListener('click', toggleDarkMode);\ndocument.body.classList.toggle('dark-mode', darkMode);\nif (darkMode) {\n\tdarkModeIcon.className = 'fas fa-sun';\n}\nasync function fetchCategoriesFromGitHub() {\n    try {\n        const response = await fetch('https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/categories.json');\n        if (!response.ok) {\n            throw new Error('Nie udało się pobrać kategorii');\n        }\n        const categoriesFromGitHub = await response.json();\n        return categoriesFromGitHub;\n    } catch (error) {\n        logEvent('Błąd pobierania kategorii:', error);\n        return null;\n    }\n}\nasync function updateCategoriesFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(30);\n    \n    try {\n        const githubCategories = await fetchCategoriesFromGitHub();\n        if (githubCategories && githubCategories.length > 0) {\n            const existingCategoryNames = new Set(categories.map(cat => cat.name));\n            const newCategories = githubCategories.filter(cat => !existingCategoryNames.has(cat.name));\n            \n            if (newCategories.length > 0) {\n                categories.push(...newCategories);\n                saveCategories();\n                renderCategoriesList();\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n                showNotification(`Dodano ${newCategories.length} nowych kategorii`, 'success');\n                playNotificationSound('success');\n            } else {\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n            }\n        } else {\n            throw new Error('Nie udało się pobrać kategorii');\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji kategorii: ' + error.message, 'danger');\n    }\n}\nfunction saveCategories() {\n    defaultCategories.forEach(defaultCat => {\n        const exists = categories.some(cat => cat.name.toLowerCase() === defaultCat.name.toLowerCase());\n        if (!exists) {\n            categories.push(defaultCat);\n        }\n    });\n\n    localStorage.setItem('categories', JSON.stringify(categories));\n    updateCategorySelects();\n    renderProducts(applyAllFilters());\n}\nfunction stopGoldBuybackAutoRefresh() {\n  if (goldBuybackInterval) {\n    clearInterval(goldBuybackInterval);\n    goldBuybackInterval = null;\n  }\n}\nfunction startGoldBuybackAutoRefresh(product) {\n  if (goldBuybackInterval) {\n    clearInterval(goldBuybackInterval);\n  }\n  \n  goldBuybackInterval = setInterval(async () => {\n    if (document.getElementById('productPreviewModal').classList.contains('show')) {\n      const result = await calculateGoldBuybackPrice(product, true);\n      \n      const buybackElement = document.getElementById('previewGoldBuybackValue');\n      if (buybackElement) {\n        buybackElement.innerHTML = `\n          <div>${result.buybackPrice.toFixed(2).replace('.', ',')} zł</div>\n          <div style=\"font-size: 0.8em; color: #666; margin-top: 5px;\">\n            ${result.rateInfo}<br>\n            Kurs USD/PLN: ${result.usdRate.toFixed(4)}\n            <br><em>(automatycznie odświeżone)</em>\n          </div>\n        `;\n      }\n    }\n  }, 300000);\n}\nfunction updateCategorySelects() {\n  categorySelect.innerHTML = '';\n  categories.forEach(cat => {\n    const option = document.createElement('option');\n    option.value = cat.name;\n    option.textContent = cat.name;\n    categorySelect.appendChild(option);\n  });\n  categoryFilter.innerHTML = '<option value=\"all\">Wszystkie kategorie</option>';\n  categories.forEach(cat => {\n    const option = document.createElement('option');\n    option.value = cat.name;\n    option.textContent = cat.name;\n    categoryFilter.appendChild(option);\n  });\n}\ndocument.addEventListener('DOMContentLoaded', updateCategorySelects);\nfunction addCategory() {\n    const newCat = document.getElementById('newCategory').value.trim();\n    logEvent(`Dodawanie nowej kategorii: ${newCat}`);\n    if (!newCat) return;\n    if (newCat.length > 50) {\n        showNotification('Nazwa kategorii zbyt długa', 'warning');\n        return;\n    }\n    if (isProtectedCategory(newCat)) {\n        showNotification('Nie można dodać kategorii o nazwie \"' + newCat + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    const exists = categories.some(cat => cat.name.toLowerCase() === newCat.toLowerCase());\n    if (exists) {\n        showNotification('Kategoria już istnieje', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n\n    categories.push({\n        name: newCat,\n        bg: '#ededed',\n        text: '#333'\n    });\n    saveCategories();\n    renderCategoriesList();\n    document.getElementById('newCategory').value = '';\n    logEvent(`Dodano kategorię: ${newCat}`);\n    showNotification(`Dodano kategorię: ${newCat}`, 'success');\n    playNotificationSound('success');\n}\nfunction removeCategory(index) {\n    const catName = categories[index].name;\n    logEvent(`Próba usunięcia kategorii: ${catName}`);\n\n    if (isProtectedCategory(catName)) {\n        showNotification('Nie można usunąć domyślnej kategorii \"' + catName + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n\n    const isUsed = products.some(p => p.category === catName);\n    if (isUsed) {\n        showNotification('Nie można usunąć kategorii, która jest używana', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć kategorię \"${catName}\"?`,\n        function(confirmed, idx) {\n            if (confirmed) {\n                categories.splice(idx, 1);\n                saveCategories();\n                renderCategoriesList();\n                logEvent(`Usunięto kategorię: ${catName}`);\n                showNotification('Kategoria została usunięta', 'success');\n                playNotificationSound('success');\n            }\n        },\n        index\n    );\n}\nfunction moveCategoryUp(index) {\n    logEvent(`Przenoszenie kategorii w górę: ${categories[index].name}`);\n    if (index <= 0) return;\n    const current = categories[index];\n    const above = categories[index - 1];\n    if (isProtectedCategory(current.name) || isProtectedCategory(above.name)) return;\n    const temp = categories[index - 1];\n    categories[index - 1] = categories[index];\n    categories[index] = temp;\n    saveCategories();\n    renderCategoriesList();\n}\nfunction moveCategoryDown(index) {\n    logEvent(`Przenoszenie kategorii w dół: ${categories[index].name}`);\n    if (index >= categories.length - 1) return;\n    const current = categories[index];\n    const below = categories[index + 1];\n    if (isProtectedCategory(current.name) || isProtectedCategory(below.name)) return;\n    const temp = categories[index + 1];\n    categories[index + 1] = categories[index];\n    categories[index] = temp;\n    saveCategories();\n    renderCategoriesList();\n}\nfunction updateCategoryColor(index, type, value) {\n    const catName = categories[index].name;\n    logEvent(`Zmiana koloru kategorii ${catName}: ${type} na ${value}`);\n\tconst current = categories[index];\n\tconst originalBg = current.bg;\n\tconst originalText = current.text;\n\tif (type === 'bg') {\n\t\tcurrent.bg = value;\n\t} else {\n\t\tcurrent.text = value;\n\t}\n\tconst isDuplicate = categories.some((cat, i) =>\n\t\ti !== index &&\n\t\tcat.bg.toLowerCase() === current.bg.toLowerCase() &&\n\t\tcat.text.toLowerCase() === current.text.toLowerCase()\n\t);\n\tif (isDuplicate) {\n\t\tshowInfoModal(\"Inna kategoria już ma taką samą kombinację kolorów tła i tekstu!\");\n\t\tcurrent.bg = originalBg;\n\t\tcurrent.text = originalText;\n\t\tconst inputs = document.querySelectorAll(`input[type=\"color\"]`);\n\t\tconst bgInput = inputs[index * 2];\n\t\tconst textInput = inputs[index * 2 + 1];\n\t\tbgInput.value = originalBg;\n\t\ttextInput.value = originalText;\n\t\tbgInput.parentElement.style.backgroundColor = originalBg;\n\t\ttextInput.parentElement.style.backgroundColor = originalText;\n\t\treturn;\n\t}\n\tsaveCategories();\n\trenderCategoriesList();\n\trenderProducts(applyAllFilters());\n}\nfunction updateGalleryCount() {\n\tdocument.getElementById('galleryCount').textContent = galleryImages.length;\n}\nfunction addShopEditModal() {\n\tconst modal = document.createElement('div');\n\tmodal.id = 'shopEditModal';\n\tmodal.className = 'modal';\n\tmodal.innerHTML = `\n\t\t<div class=\"modal-content\" style=\"max-width: 500px;\">\n\t\t\t<div class=\"modal-header\">\n\t\t\t\t<h3 class=\"modal-title\"><i class=\"fas fa-edit\"></i> Edytuj sklep</h3>\n\t\t\t\t<button class=\"close-modal\" onclick=\"closeShopEditModal()\">&times;</button>\n\t\t\t</div>\n\t\t\t<div class=\"shop-edit-form\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"editShopName\">Nazwa sklepu</label>\n\t\t\t\t\t<input type=\"text\" id=\"editShopName_2\" placeholder=\"Nazwa sklepu\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"editShopUrl\">URL sklepu</label>\n\t\t\t\t\t<input type=\"url\" id=\"editShopUrl_2\" placeholder=\"https://...\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div style=\"margin-top: 1.5rem; display: flex; gap: 1rem;\">\n\t\t\t\t<button class=\"btn-success\" onclick=\"saveShopEdit()\"><i class=\"fas fa-save\"></i> Zapisz zmiany</button>\n\t\t\t\t<button class=\"btn-danger\" onclick=\"closeShopEditModal()\"><i class=\"fas fa-times\"></i> Anuluj</button>\n\t\t\t</div>\n\t\t</div>\n\t`;\n\tdocument.body.appendChild(modal);\n}\nfunction cleanupOldLogs() {\n    const maxPages = 200;\n    const maxLogs = maxPages * logsPerPage;\n    if (eventLogs.length > maxLogs) {\n        eventLogs = eventLogs.slice(-maxLogs);\n        saveLogs();\n        logEvent(`Automatyczne czyszczenie logów: zachowano ${maxLogs} najnowszych wpisów (${maxPages} stron)`);\n    }\n    const now = new Date();\n    const retentionDays = 3;\n    const filteredLogs = eventLogs.filter(log => {\n        const logDate = new Date(log.timestamp);\n        const diffDays = Math.floor((now - logDate) / (1000 * 60 * 60 * 24));\n        return diffDays <= retentionDays;\n    });\n    if (filteredLogs.length !== eventLogs.length) {\n        eventLogs = filteredLogs;\n        saveLogs();\n        logEvent(`Automatyczne czyszczenie logów: usunięto stare wpisy powyżej ${retentionDays} dni`);\n    }\n}\nfunction renderCategoriesList() {\n  const list = document.getElementById('categoriesList');\n  list.innerHTML = '';\n\n  const startIndex = (categoriesCurrentPage - 1) * paginationConfig.categoriesPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.categoriesPerPage, categories.length);\n  const pageCategories = categories.slice(startIndex, endIndex);\n\n  if (pageCategories.length === 0) {\n    list.innerHTML = '<p class=\"empty-state\">Brak kategorii</p>';\n    renderCategoriesPagination();\n    return;\n  }\n\n  pageCategories.forEach((cat, index) => {\n    const globalIndex = startIndex + index;\n    const isEditing = globalIndex === editingCategoryIndex;\n    const item = document.createElement('div');\n    item.className = 'category-item';\n    const isProtected = isProtectedCategory(cat.name);\n\n    if (isEditing) {\n      item.innerHTML = `\n        <div style=\"display: flex; flex-direction: column; width: 100%;\">\n          <input type=\"text\" class=\"edit-category-name\" value=\"${cat.name}\" placeholder=\"Nowa nazwa kategorii\">\n          <div class=\"category-edit-form\">\n            <button class=\"btn-success\" onclick=\"saveCategoryEdit()\">\n              <i class=\"fas fa-save\"></i> Zapisz\n            </button>\n            <button class=\"btn-danger\" onclick=\"cancelCategoryEdit()\">\n              <i class=\"fas fa-times\"></i> Anuluj\n            </button>\n          </div>\n        </div>\n      `;\n    } else {\n      const upDisabled = (globalIndex <= 0) || isProtected || (globalIndex > 0 && isProtectedCategory(categories[globalIndex - 1].name));\n      const downDisabled = (globalIndex >= categories.length - 1) || isProtected || (globalIndex < categories.length - 1 && isProtectedCategory(categories[globalIndex + 1].name));\n\n      item.innerHTML = `\n        <div style=\"display: flex; justify-content: space-between; align-items: center; width: 100%;\">\n          <span>${cat.name}</span>\n          <div class=\"actions\">\n            <label class=\"color-picker\" style=\"background-color: ${cat.bg};\">\n              <input type=\"color\" value=\"${cat.bg}\" title=\"Kolor tła\" onchange=\"updateCategoryColor(${globalIndex}, 'bg', this.value); this.parentElement.style.backgroundColor = this.value;\">\n            </label>\n            <label class=\"color-picker\" style=\"background-color: ${cat.text};\">\n              <input type=\"color\" value=\"${cat.text}\" title=\"Kolor tekstu\" onchange=\"updateCategoryColor(${globalIndex}, 'text', this.value); this.parentElement.style.backgroundColor = this.value;\">\n            </label>\n\n            <button class=\"btn-info ${upDisabled ? 'disabled' : ''}\"\n              onclick=\"${!upDisabled ? `moveCategoryUp(${globalIndex})` : 'return false;'}\"\n              ${upDisabled ? 'disabled' : ''}>\n              <i class=\"fas fa-arrow-up\"></i>\n            </button>\n\n            <button class=\"btn-info ${downDisabled ? 'disabled' : ''}\"\n              onclick=\"${!downDisabled ? `moveCategoryDown(${globalIndex})` : 'return false;'}\"\n              ${downDisabled ? 'disabled' : ''}>\n              <i class=\"fas fa-arrow-down\"></i>\n            </button>\n\n            ${!isProtected ? `\n              <button class=\"btn-info edit-icon-btn\" onclick=\"startCategoryEdit(${globalIndex})\" title=\"Edytuj nazwę\">\n                <i class=\"fas fa-edit\"></i>\n              </button>\n            ` : ''}\n\n            <button class=\"btn-danger ${isProtected ? 'disabled' : ''}\"\n                    onclick=\"${!isProtected ? `removeCategory(${globalIndex})` : 'return false;'}\"\n                    ${isProtected ? 'disabled' : ''}>\n              <i class=\"fas fa-trash\"></i>\n            </button>\n          </div>\n        </div>\n      `;\n    }\n\n    list.appendChild(item);\n  });\n\n  renderCategoriesPagination();\n}\nfunction renderCategoriesPagination() {\n  const paginationContainer = document.getElementById('categoriesPagination');\n  if (!paginationContainer) return;\n  paginationContainer.innerHTML = '';\n  const totalPages = Math.ceil(categories.length / paginationConfig.categoriesPerPage);\n  const prevBtn = document.createElement('button');\n  prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevBtn.disabled = categoriesCurrentPage === 1;\n  prevBtn.addEventListener('click', () => {\n    if (categoriesCurrentPage > 1) {\n      categoriesCurrentPage--;\n      renderCategoriesList();\n    }\n  });\n  const nextBtn = document.createElement('button');\n  nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextBtn.disabled = categoriesCurrentPage === totalPages;\n  nextBtn.addEventListener('click', () => {\n    if (categoriesCurrentPage < totalPages) {\n      categoriesCurrentPage++;\n      renderCategoriesList();\n    }\n  });\n  const pageInfo = document.createElement('span');\n  pageInfo.textContent = `Strona ${categoriesCurrentPage} z ${totalPages}`;\n  paginationContainer.appendChild(prevBtn);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextBtn);\n}\nfunction openMemoryModal() {\n  const modal = document.getElementById('memoryModal');\n  if (!modal) {\n    logEvent(\"Modal pamięci nie istnieje w DOM!\");\n    return;\n  }\n  modal.classList.add('show');\n  setTimeout(() => {\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n  const memoryContent = modal.querySelector('.memory-stats');\n  if (!memoryContent) {\n    modal.innerHTML = `\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h3 class=\"modal-title\"><i class=\"fas fa-microchip\"></i> Statystyki pamięci</h3>\n          <button class=\"close-modal\" onclick=\"closeMemoryModal()\">&times;</button>\n        </div>\n        <div class=\"browser-info\">\n          Wykryta przeglądarka: <span id=\"browserInfo\">Trwa wykrywanie...</span>\n        </div>\n        <div class=\"memory-stats\">\n        </div>\n      </div>\n    `;\n  }\n  calculateMemoryUsage();\n  detectBrowserAndSetLimits();\n}\nfunction closeMemoryModal() {\n  document.getElementById('memoryModal').classList.remove('show');\n}\nfunction detectBrowserAndSetLimits() {\n  const userAgent = navigator.userAgent;\n  let browserName = \"Nieznana przeglądarka\";\n  let indexedDBMax = 10;\n  let indexedDBNote = \"\";\n  let localStorageMax = 5;\n  \n  if (/Chrome|Chromium|Edg|OPR/.test(userAgent)) {\n    browserName = \"Chromium (Chrome, Edge, Opera, Brave, Vivaldi)\";\n    indexedDBMax = 0;\n    indexedDBNote = \"IndexedDB: do 60% miejsca na dysku\";\n  } else if (/Firefox/.test(userAgent)) {\n    browserName = \"Firefox\";\n    indexedDBMax = 10240;\n    indexedDBNote = \"IndexedDB: do 10 GB w trybie best-effort\";\n  } else if (/Safari/.test(userAgent) && !/Chrome/.test(userAgent)) {\n    browserName = \"Apple Safari\";\n    indexedDBMax = navigator.maxTouchPoints ? 50 : 500;\n    indexedDBNote = navigator.maxTouchPoints ? \n      \"IndexedDB: do 50 MB (iOS)\" : \"IndexedDB: do 500 MB (desktop)\";\n  } else if (/Trident|MSIE/.test(userAgent)) {\n    browserName = \"Internet Explorer\";\n    indexedDBMax = 250;\n    indexedDBNote = \"IndexedDB: do 250 MB (możliwość zwiększenia do 1 GB)\";\n  } else {\n    browserName = \"Inna przeglądarka\";\n    indexedDBMax = 5;\n    indexedDBNote = \"IndexedDB: domyślnie do 5 MB\";\n  }\n  const setTextIfExists = (id, text) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.textContent = text;\n    } else {\n      console.warn(`Element o ID '${id}' nie istnieje`);\n    }\n  };\n\n  setTextIfExists('browserInfo', browserName);\n  setTextIfExists('localStorageMax', localStorageMax + ' MB');\n  \n  if (indexedDBMax === 0) {\n    setTextIfExists('indexedDBMax', \"60% dysku\");\n    setTextIfExists('indexedDBAvailable', \"Dynamiczne\");\n  } else {\n    setTextIfExists('indexedDBMax', indexedDBMax + ' MB');\n  }\n\n  setTextIfExists('indexedDBNote', indexedDBNote);\n}\nasync function handleFileImport(filePath) {\n    logEvent('Import pliku z Androida: ' + filePath);\n    \n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    try {\n        const fileUrl = filePath.startsWith('https://app.local/') ? filePath : ('file://' + filePath);\n        const response = await fetch(fileUrl);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const blob = await response.blob();\n        loader.update(30);\n        const file = new File([blob], 'imported_file.zip', { type: 'application/zip' });\n        await processImportFile(file);\n    } catch (fetchError) {\n        try {\n            const file = await new Promise((resolve, reject) => {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', 'file://' + filePath, true);\n                xhr.responseType = 'blob';\n                \n                xhr.onload = function() {\n                    if (xhr.status === 200) {\n                        const blob = xhr.response;\n                        const file = new File([blob], 'imported_file.zip', { type: 'application/zip' });\n                        resolve(file);\n                    } else {\n                        reject(new Error(`XHR error! status: ${xhr.status}`));\n                    }\n                };\n                \n                xhr.onerror = function() {\n                    reject(new Error('XHR network error'));\n                };\n                xhr.send();\n            });\n            loader.update(30);\n            await processImportFile(file);\n        } catch (xhrError) {\n            loader.reset();\n            showNotification('Błąd: Nie można odczytać pliku. Spróbuj ponownie wybrać plik ręcznie.', 'danger');\n            setTimeout(() => {\n                importData();\n            }, 2000);\n        }\n    }\n}\nasync function importDataFromAndroid(filePath) {\n    return await handleFileImport(filePath);\n}\nwindow.addEventListener('import-file', function(event) {\n    if (event.detail && event.detail.filePath) {\n        handleFileImport(event.detail.filePath);\n    }\n});\nwindow.addEventListener('file-import', function(event) {\n    if (event.detail && event.detail.filePath) {\n        handleFileImport(event.detail.filePath);\n    }\n});\nasync function calculateMemoryUsage() {\n  const loader = new PokeballLoader('pokeballLoader').start(0);\n  loader.update(10);\n  try {\n    const userAgent = navigator.userAgent;\n    let browserName = \"Nieznana przeglądarka\";\n    if (/Chrome|Chromium/.test(userAgent)) browserName = \"Google Chrome\";\n    else if (/Firefox/.test(userAgent)) browserName = \"Mozilla Firefox\";\n    else if (/Safari/.test(userAgent)) browserName = \"Apple Safari\";\n    else if (/Edg/.test(userAgent)) browserName = \"Microsoft Edge\";\n    else if (/OPR/.test(userAgent)) browserName = \"Opera\";\n    document.getElementById('browserInfo').textContent = browserName;\n    \n    const localStorageDetails = {\n      products: JSON.parse(localStorage.getItem('products') || '[]'),\n      categories: JSON.parse(localStorage.getItem('categories') || '[]'),\n      exchangeRates: JSON.parse(localStorage.getItem('exchangeRates') || '{}'),\n      currencySymbols: JSON.parse(localStorage.getItem('currencySymbols') || '{}'),\n      shops: JSON.parse(localStorage.getItem('shops') || '[]'),\n      effects: JSON.parse(localStorage.getItem('effects') || '[]'),\n      eventLogs: JSON.parse(localStorage.getItem('eventLogs') || '[]')\n    };\n    \n    let localStorageSize = 0;\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      const value = localStorage.getItem(key);\n      localStorageSize += (key.length + value.length) * 2;\n    }\n    \n    const localStorageMB = localStorageSize / (1024 * 1024);\n    const localStorageMax = 5;\n    const localStoragePercent = (localStorageMB / localStorageMax) * 100;\n    \n    const setTextIfExists = (elementId, text) => {\n      const element = document.getElementById(elementId);\n      if (element) element.textContent = text;\n    };\n    \n    setTextIfExists('localStorageProducts', localStorageDetails.products.length);\n    setTextIfExists('localStorageCategories', localStorageDetails.categories.length);\n    setTextIfExists('localStorageSettings', \n      Object.keys(localStorageDetails.exchangeRates).length + \n      Object.keys(localStorageDetails.currencySymbols).length);\n    setTextIfExists('localStorageShops', localStorageDetails.shops.length);\n    setTextIfExists('localStorageEffects', localStorageDetails.effects.length);\n    setTextIfExists('localStorageLogs', localStorageDetails.eventLogs.length);\n    \n    const db = await openDB();\n    const stores = ['productImages', 'galleryImages', 'backgroundImages'];\n    let productImagesCount = 0;\n    let galleryImagesCount = 0;\n    let backgroundImagesCount = 0;\n    let indexedDBImagesSize = 0;\n\n    for (const storeName of stores) {\n      const tx = db.transaction(storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      const request = store.getAll();\n      const data = await new Promise(resolve => {\n        request.onsuccess = () => resolve(request.result);\n      });\n      \n      if (storeName === 'productImages') {\n        productImagesCount = data.length;\n      } else if (storeName === 'galleryImages') {\n        galleryImagesCount = data.length;\n      } else if (storeName === 'backgroundImages') {\n        backgroundImagesCount = data.length;\n      }\n      \n      for (const item of data) {\n        if (item.source === 'github') continue;\n        \n        if (item.data && typeof item.data === 'string') {\n          try {\n            const base64Data = item.data.split(',')[1] || '';\n            const binarySize = (base64Data.length * 3) / 4;\n            indexedDBImagesSize += binarySize;\n          } catch (error) {\n            logEvent('Błąd przetwarzania danych obrazu:', error);\n          }\n        }\n      }\n    }\n\n    const indexedDBImagesMB = indexedDBImagesSize / (1024 * 1024);\n    let indexedDBMaxMB = 10;\n    if (browserName.includes('Chrome') || browserName.includes('Edge') || browserName.includes('Opera')) {\n      try {\n        const estimate = await navigator.storage.estimate();\n        indexedDBMaxMB = (estimate.quota / (1024 * 1024)) * 0.6;\n      } catch (e) {\n        logEvent(\"Błąd podczas szacowania przestrzeni dyskowej:\", e);\n        indexedDBMaxMB = 10240;\n      }\n    }\n    \n    setTextIfExists('dbProductImages', productImagesCount);\n    setTextIfExists('dbGalleryImages', galleryImagesCount);\n    setTextIfExists('dbImagesSize', indexedDBImagesMB.toFixed(2) + ' MB');\n    setTextIfExists('dbOtherData', '0.00 MB');\n    \n    const localStorageBar = document.getElementById('localStorageBar');\n    const localStorageText = document.getElementById('localStorageText');\n    if (localStorageBar && localStorageText) {\n      localStorageBar.style.width = `${Math.min(localStoragePercent, 100)}%`;\n      localStorageText.textContent = `${localStorageMB.toFixed(2)} MB / ${localStorageMax} MB`;\n    }\n    \n    const indexedDBBar = document.getElementById('indexedDBBar');\n    const indexedDBText = document.getElementById('indexedDBText');\n    \n    setTextIfExists('localStorageAvailable', (localStorageMax - localStorageMB).toFixed(2) + ' MB');\n    setTextIfExists('indexedDBAvailable', (indexedDBMaxMB - indexedDBImagesMB).toFixed(2) + ' MB');\n    setTextIfExists('indexedDBMax', indexedDBMaxMB.toFixed(2) + ' MB');\n    \n    const totalUsage = localStorageMB + indexedDBImagesMB;\n    const totalAvailable = (localStorageMax + indexedDBMaxMB - totalUsage).toFixed(2) + ' MB';\n    const totalPercentage = (totalUsage / (localStorageMax + indexedDBMaxMB)) * 100;\n    \n    setTextIfExists('totalUsage', totalUsage.toFixed(2) + ' MB');\n    setTextIfExists('availableSpace', totalAvailable);\n    setTextIfExists('totalPercentage', totalPercentage.toFixed(1) + '%');\n    \n    if (indexedDBBar && indexedDBText) {\n      const indexedDBPercent = (indexedDBImagesMB / indexedDBMaxMB) * 100;\n      indexedDBBar.style.width = `${Math.min(indexedDBPercent, 100)}%`;\n      indexedDBText.textContent = `${indexedDBImagesMB.toFixed(2)} MB / ${indexedDBMaxMB.toFixed(2)} MB`;\n    }\n    \n  } catch (error) {\n    logEvent('Błąd obliczania pamięci:', error);\n    showNotification('Błąd podczas obliczania statystyk pamięci: ' + error.message, 'danger');\n  } finally {\n    loader.reset();\n  }\n}\nfunction openCategoriesModal() {\n  if (!document.getElementById('categoriesPagination')) {\n    const paginationDiv = document.createElement('div');\n    paginationDiv.id = 'categoriesPagination';\n    paginationDiv.className = 'pagination-container';\n    document.querySelector('.category-modal-content').appendChild(paginationDiv);\n  }\n  \n  categoriesCurrentPage = 1;\n  renderCategoriesList();\n  document.getElementById('categoriesModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('categoriesModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction fillCurrencyOptions() {\n  const selects = document.querySelectorAll('.currency-select');\n  selects.forEach(select => {\n    const currentValue = select.value;\n    select.innerHTML = '';\n    \n    Object.entries(currencySymbols).forEach(([code, symbol]) => {\n      const option = document.createElement('option');\n      option.value = code;\n      option.textContent = `${code} (${symbol})`;\n      select.appendChild(option);\n    });\n    select.value = currentValue || 'PLN';\n  });\n}\nfunction closeCategoriesModal() {\n  logEvent('Modal kategorii został zamknięty');\n  document.getElementById('categoriesModal').classList.remove('show');\n}\nfunction filterByCategory() {\n  currentFilter = document.getElementById('categoryFilter').value;\n  productsCurrentPage = 1;\n  renderProducts(applyAllFilters());\n}\nasync function fetchExchangeRates() {\n    logEvent('Rozpoczęcie aktualizacji kursów walut');\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(20);\n    try {\n        const goldRate = exchangeRates.GOLD;\n        const response = await fetch('https://api.nbp.pl/api/exchangerates/tables/a/?format=json');\n        if (!response.ok) {\n            throw new Error('Błąd pobierania kursów walut');\n        }\n        const data = await response.json();\n        const rates = data[0].rates;\n        const oldRates = {...exchangeRates};\n        rates.forEach(rate => {\n            exchangeRates[rate.code] = rate.mid;\n            if (!currencySymbols[rate.code]) {\n                currencySymbols[rate.code] = rate.code;\n            }\n        });\n        exchangeRates.PLN = 1.0;\n        currencySymbols.PLN = 'zł';\n        \n        if (goldRate) {\n            exchangeRates.GOLD = goldRate;\n        }\n        exchangeRates.lastUpdated = new Date().toISOString();\n        saveExchangeRates();\n        loader.update(80);\n        let ratesChanged = false;\n        for (const currency in exchangeRates) {\n            if (currency !== 'lastUpdated' && currency !== 'GOLD' && oldRates[currency] !== exchangeRates[currency]) {\n                ratesChanged = true;\n                break;\n            }\n        }\n        if (ratesChanged) {\n            setTimeout(async () => {\n                await checkAndUpdatePriceHistoryOnRateChange();\n                if (document.getElementById('productPreviewModal').classList.contains('show') && currentChartProductId) {\n                    await renderPriceHistoryChart(currentChartProductId);\n                }\n            }, 1000);\n        }\n        if (!document.hidden) {\n            showNotification('Kursy walut zostały zaktualizowane', 'success');\n            playNotificationSound('success');\n        }\n        if (document.getElementById('exchangeModal').classList.contains('show')) {\n            updateNextUpdateTime();\n            renderExchangeRates();\n        }\n        loader.complete();\n        setTimeout(() => loader.reset(), 500);\n        return true;\n    } catch (error) {\n        loader.reset();\n        logEvent('Błąd pobierania kursów walut:', error);\n        if (!document.hidden) {\n            showNotification('Nie udało się pobrać aktualnych kursów. Używam zapisanych danych.', 'warning');\n        }\n        return false;\n    }\n}\nasync function updateAllFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    try {\n        loader.update(10);\n        await updateShopsFromGitHub();\n        loader.update(40);\n        await updateBackgroundsFromGitHub();\n\t\tloader.update(50);\n        await updateEffectsFromGitHub();\n\t\tloader.update(60);\n\t\tawait updateCategoriesFromGitHub();\n        loader.update(70);\n        await updateGalleryFromGitHub();\n\t\tloader.update(80);\n\t\tawait cleanupGalleryDuplicatesAutomatically();\n        loader.complete();\n        setTimeout(() => loader.reset(), 500);\n        showNotification('Zaktualizowano wszystkie dane', 'success');\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji: ' + error.message, 'danger');\n    }\n}\nfunction isProtectedCategory(name) {\n  if (!name) return false;\n  return PROTECTED_CATEGORY_NAMES.some(n => n.toLowerCase() === name.toLowerCase());\n}\nfunction isImageNameUnique(name) {\n    const normalizedName = name.toLowerCase().trim().replace(/\\s+/g, ' ');\n    const existingImage = galleryImages.find(img => \n        img.name.toLowerCase().trim().replace(/\\s+/g, ' ') === normalizedName\n    );\n    if (existingImage && isFromGitHub(existingImage)) {\n        return false;\n    }\n    return !existingImage;\n}\ndocument.addEventListener('visibilitychange', () => {\n\tif (document.visibilityState === 'visible') {\n\t\tcheckExchangeRates();\n\t}\n});\nasync function checkExchangeRates() {\n\tconst lastUpdated = exchangeRates.lastUpdated ? new Date(exchangeRates.lastUpdated) : null;\n\tconst now = new Date();\n\tconst hoursSinceLastUpdate = lastUpdated ? (now - lastUpdated) / (1000 * 60 * 60) : 24;\n\tif (hoursSinceLastUpdate > 1) {\n\t\tawait fetchExchangeRates();\n\t}\n}\nfunction getCurrencySymbol(currency) {\n\treturn currencySymbols[currency] || currency;\n}\nfunction formatCurrency(value, originalCurrency, showSymbol = true, section = 'default') {\n    if (value === null || value === undefined || isNaN(value)) return 'Brak';\n    let targetCurrency = originalCurrency;\n    switch(section) {\n        case 'extendedStats':\n            targetCurrency = currencyConfig.extendedStatsCurrency;\n            break;\n        case 'mainStats':\n            targetCurrency = currencyConfig.mainStatsCurrency;\n            break;\n        case 'priceDiff':\n            targetCurrency = currencyConfig.priceDiffCurrency;\n            break;\n        case 'priceHistory':\n            targetCurrency = currencyConfig.priceHistoryCurrency;\n            break;\n        case 'otherLists':\n            targetCurrency = currencyConfig.otherListsCurrency;\n            break;\n        case 'purchasePrice':\n            targetCurrency = currencyConfig.purchasePriceCurrency || 'PLN';\n            break;\n        case 'currentPrice':\n            targetCurrency = currencyConfig.currentPriceCurrency || 'PLN';\n            break;\n        case 'goldBuyback':\n            targetCurrency = currencyConfig.goldBuybackCurrency || 'PLN';\n            break;\n    }\n    let displayValue = value;\n    if (originalCurrency !== targetCurrency) {\n        try {\n            displayValue = convertToCurrency(value, originalCurrency, targetCurrency);\n        } catch (error) {\n            logEvent('Błąd konwersji waluty:', error);\n            displayValue = value;\n            targetCurrency = originalCurrency;\n        }\n    }\n    const formattedValue = parseFloat(displayValue).toFixed(2).replace('.', ',');\n    if (showSymbol) {\n        return `${formattedValue} ${getCurrencySymbol(targetCurrency)}`;\n    }\n    return formattedValue;\n}\nfunction initAdvancedButtonsSetting() {\n  const savedAdvancedButtonsVisibility = localStorage.getItem('showAdvancedButtons');\n  showAdvancedButtons = savedAdvancedButtonsVisibility !== null ? savedAdvancedButtonsVisibility === 'true' : false;\n  document.getElementById('advancedButtonsVisibilityToggle').checked = showAdvancedButtons;\n  applyAdvancedButtonsSetting();\n}\nfunction saveAdvancedButtonsSetting() {\n  localStorage.setItem('showAdvancedButtons', showAdvancedButtons);\n  applyAdvancedButtonsSetting();\n  showNotification('Ustawienia zaawansowanych przycisków zapisane', 'success');\n}\nfunction applyAdvancedButtonsSetting() {\n  const advancedButtons = document.querySelectorAll('.controls .advanced-btn');\n  advancedButtons.forEach(btn => {\n    btn.style.display = showAdvancedButtons ? 'inline-block' : 'none';\n  });\n  const sidebarAdvancedButtons = document.querySelectorAll('.sidebar-menu .advanced-btn');\n  sidebarAdvancedButtons.forEach(btn => {\n    btn.style.display = showAdvancedButtons ? 'flex' : 'none';\n  });\n  if (window.innerWidth <= 992 && !showAdvancedButtons) {\n    document.querySelector('.controls-panel').style.display = 'none';\n  }\n}\ndocument.getElementById('advancedButtonsVisibilityToggle').addEventListener('change', function() {\n  showAdvancedButtons = this.checked;\n  saveAdvancedButtonsSetting();\n});\nfunction convertToCurrency(amount, fromCurrency, toCurrency) {\n  if (fromCurrency === toCurrency) return amount;\n  if (fromCurrency !== 'PLN' && (!exchangeRates[fromCurrency] || isNaN(exchangeRates[fromCurrency]))) {\n    logEvent(`Nieznana lub nieprawidłowa waluta źródłowa: ${fromCurrency}`);\n    return amount;\n  }\n  if (toCurrency !== 'PLN' && (!exchangeRates[toCurrency] || isNaN(exchangeRates[toCurrency]))) {\n    logEvent(`Nieznana lub nieprawidłowa waluta docelowa: ${toCurrency}`);\n    return amount;\n  }\n  let amountInPLN = amount;\n  if (fromCurrency !== 'PLN') {\n    amountInPLN = amount * exchangeRates[fromCurrency];\n  }\n  if (toCurrency === 'PLN') return amountInPLN;\n  return amountInPLN / exchangeRates[toCurrency];\n}\nfunction formatDate(dateString) {\n\tconst date = new Date(dateString);\n\treturn date.toLocaleDateString('pl-PL', { day: '2-digit', month: '2-digit', year: 'numeric' });\n}\nfunction initAdditionalVisibilitySettings() {\n    const savedInstructionVisibility = localStorage.getItem('showInstructionButton');\n    const savedStatisticsVisibility = localStorage.getItem('showStatisticsSection');\n    const savedNotificationsVisibility = localStorage.getItem('showNotifications');\n    showInstructionButton = savedInstructionVisibility !== null ? savedInstructionVisibility === 'true' : true;\n    showStatisticsSection = savedStatisticsVisibility !== null ? savedStatisticsVisibility === 'true' : true;\n    showNotifications = savedNotificationsVisibility !== null ? savedNotificationsVisibility === 'true' : true;\n    document.getElementById('instructionVisibilityToggle').checked = showInstructionButton;\n    document.getElementById('statisticsVisibilityToggle').checked = showStatisticsSection;\n    document.getElementById('notificationsVisibilityToggle').checked = showNotifications;\n    applyAdditionalVisibilitySettings();\n}\nfunction applyAdditionalVisibilitySettings() {\n    const instructionButton = document.querySelector('.btn-instruction');\n    const statsContainer = document.querySelector('.stats-container');\n    if (instructionButton) {\n        instructionButton.style.display = showInstructionButton ? 'inline-block' : 'none';\n    }\n    if (statsContainer) {\n        statsContainer.style.display = showStatisticsSection ? 'block' : 'none';\n    }\n}\nfunction saveAdditionalVisibilitySettings() {\n    localStorage.setItem('showInstructionButton', showInstructionButton);\n    localStorage.setItem('showStatisticsSection', showStatisticsSection);\n    localStorage.setItem('showNotifications', showNotifications);\n    applyAdditionalVisibilitySettings();\n}\nfunction showNotification(message, type = 'info', duration = 3000) {\n    if (!showNotifications) return;\n    logEvent(`Powiadomienie [${type}]: ${message}`);\n\tconst notification = {\n\t\tmessage,\n\t\ttype,\n\t\tduration\n\t};\n\tnotificationQueue.push(notification);\n\tif (!isNotificationVisible) {\n\t\tprocessNotificationQueue();\n\t}\n}\nfunction processNotificationQueue() {\n\tif (notificationQueue.length === 0) {\n\t\tisNotificationVisible = false;\n\t\treturn;\n\t}\n\tisNotificationVisible = true;\n\tconst notification = notificationQueue.shift();\n\tcreateNotificationElement(notification);\n}\nfunction createNotificationElement(notification) {\n  const container = document.getElementById('notificationContainer');\n  if (!container) {\n    logEvent('Notification container not found!');\n    return;\n  }\n  const notificationEl = document.createElement('div');\n  notificationEl.className = `notification ${notification.type} show`;\n\tlet icon = '';\n\tswitch(notification.type) {\n\t\tcase 'success': icon = 'fa-check-circle'; break;\n\t\tcase 'warning': icon = 'fa-exclamation-triangle'; break;\n\t\tcase 'danger': icon = 'fa-times-circle'; break;\n\t\tdefault: icon = 'fa-info-circle';\n\t}\n\tnotificationEl.innerHTML = `\n\t\t<i class=\"fas ${icon}\"></i>\n\t\t<span>${notification.message}</span>\n\t\t<button class=\"close-notification\">\n\t\t\t<i class=\"fas fa-times\"></i>\n\t\t</button>\n\t\t<div class=\"notification-progress\"></div>\n\t`;\n\tconst progressBar = notificationEl.querySelector('.notification-progress');\n\tprogressBar.style.animationDuration = `${notification.duration}ms`;\n\tconst closeBtn = notificationEl.querySelector('.close-notification');\n\tcloseBtn.addEventListener('click', () => {\n\tnotificationEl.classList.remove('show');\n\tsetTimeout(() => {\n\t\tif (container.contains(notificationEl)) {\n\t\tcontainer.removeChild(notificationEl);\n\t\t}\n\t\tprocessNotificationQueue();\n\t}, 300);\n\t});\n\tcontainer.appendChild(notificationEl);\n\tsetTimeout(() => {\n\tnotificationEl.classList.remove('show');\n\tsetTimeout(() => {\n\t\tif (container.contains(notificationEl)) {\n\t\tcontainer.removeChild(notificationEl);\n\t\t}\n\t\tprocessNotificationQueue();\n\t}, 300);\n\t}, notification.duration);\n}\nasync function saveProducts() {\n  const loader = new PokeballLoader('pokeballLoader').start(0);\n  loader.update(30);\n  try {\n    const productsToSave = products.map(p => {\n      const productCopy = {...p};\n      delete productCopy.editing;\n      if (productCopy.image && !productCopy.imageId) {\n      } else if (productCopy.imageId && !productCopy.image) {\n        delete productCopy.image;\n      }\n      return productCopy;\n    });\n    \n    localStorage.setItem('products', JSON.stringify(productsToSave));\n    loader.update(50);\n    for (const product of products) {\n      if (product.image && !product.imageId) {\n        try {\n          product.imageId = await saveImageToDB(product.image, 'productImages');\n        } catch (e) {\n          logEvent('Błąd zapisu obrazu do DB:', e);\n        }\n      }\n    }\n    loader.update(70);\n    try {\n      updateSummary();\n    } catch (e) {\n      logEvent('Błąd w updateSummary:', e);\n    }\n    try {\n      renderProducts(applyAllFilters());\n    } catch (e) {\n      logEvent('Błąd w renderProducts:', e);\n    }\n    try {\n      forceUpdateStatistics();\n    } catch (e) {\n      logEvent('Błąd w forceUpdateStatistics:', e);\n    }\n    loader.complete();\n    setTimeout(() => {\n      try {\n        loader.reset();\n        const metaOnly = products.map(({ image, ...rest }) => rest);\n        localStorage.setItem('products', JSON.stringify(metaOnly));\n        try {\n          saveProductImagesToDB();\n        } catch (e) {\n          logEvent('Błąd zapisu obrazów do DB:', e);\n        }\n        try {\n          forceUpdateStatistics();\n        } catch (e) {\n          logEvent('Błąd w forceUpdateStatistics (2):', e);\n        }\n        showNotification('Dane zostały zapisane', 'success');\n\t\tplayNotificationSound('success');\n      } catch (e) {\n        logEvent('Błąd w końcowej fazie zapisu:', e);\n      }\n    }, 500);\n  } catch (e) {\n    loader.reset();\n    if (e.name === 'QuotaExceededError') {\n      const metaOnly = products.map(({ image, ...rest }) => rest);\n      localStorage.setItem('products', JSON.stringify(metaOnly));\n      try {\n        saveProductImagesToDB();\n      } catch (e) {\n        logEvent('Błąd zapisu obrazów do DB:', e);\n      }\n      try {\n        forceUpdateStatistics();\n      } catch (e) {\n        logEvent('Błąd w forceUpdateStatistics (3):', e);\n      }\n      showNotification('Dane zostały zapisane', 'success');\n\t  playNotificationSound('success');\n    } else {\n      showNotification('Błąd zapisu danych: ' + e.message, 'danger');\n    }\n  }\n  renderProducts(applyAllFilters());\n  forceUpdateStatistics();\n}\nfunction initProductNameHelp() {\n    const helpButton = document.getElementById('productNameHelpButton');\n    const helpModal = document.getElementById('productNameHelpModal');\n    if (!helpButton || !helpModal) return;\n    helpButton.addEventListener('click', function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        openProductNameHelpModal();\n    });\n    helpModal.addEventListener('click', function(e) {\n        if (e.target === helpModal) {\n            closeProductNameHelpModal();\n        }\n    });\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape' && isHelpModalOpen) {\n            closeProductNameHelpModal();\n        }\n    });\n}\nfunction openProductNameHelpModal() {\n    const helpModal = document.getElementById('productNameHelpModal');\n    if (!helpModal) return;\n    helpModal.classList.add('show');\n    isHelpModalOpen = true;\n    logEvent('Otworzono pomoc dotyczącą nazwy produktu');\n    if (window.innerWidth <= 768) {\n        document.body.style.overflow = 'hidden';\n    }\n}\nfunction closeProductNameHelpModal() {\n    const helpModal = document.getElementById('productNameHelpModal');\n    if (!helpModal) return;\n    helpModal.classList.remove('show');\n    isHelpModalOpen = false;\n    document.body.style.overflow = '';\n}\nasync function loadImageFromDB(imageId, storeName) {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const db = await openDB();\n            const tx = db.transaction(storeName, 'readonly');\n            const store = tx.objectStore(storeName);\n            const request = store.get(imageId);\n            request.onsuccess = (e) => {\n                if (e.target.result) {\n                    resolve(e.target.result.data);\n                } else {\n                    reject(`Obraz o ID ${imageId} nie znaleziony`);\n                }\n            };\n            request.onerror = (e) => {\n                reject(e.target.error || 'Unknown error');\n            };\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\nfunction saveExchangeRates() {\n    const goldRate = exchangeRates.GOLD;\n    localStorage.setItem('exchangeRates', JSON.stringify(exchangeRates));\n    localStorage.setItem('currencySymbols', JSON.stringify(currencySymbols));\n    if (goldRate) {\n        exchangeRates.GOLD = goldRate;\n    }\n}\nfunction checkEmptyState() {\n\temptyState.style.display = products.length ? 'none' : 'block';\n}\nfunction updateSummary() {\n    let purchaseValueTotalPLN = 0;\n    let currentValueTotalPLN = 0;\n    let profitPLN = 0;\n    let lossPLN = 0;\n    let withPriceCount = 0;\n    products.forEach(p => {\n        if (p.category === 'Złoto') {\n            const purchasePLN = convertToPLN(p.price, p.currency);\n            const totalPurchase = purchasePLN * p.quantity;\n            purchaseValueTotalPLN += totalPurchase;\n            \n            let currentPLN = 0;\n            if (p.currentPrice !== null && p.currentPrice !== undefined) {\n                currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency) * p.quantity;\n                withPriceCount++;\n            } else {\n                currentPLN = totalPurchase;\n            }\n            currentValueTotalPLN += currentPLN;\n            \n            const diff = currentPLN - totalPurchase;\n            if (diff > 0) {\n                profitPLN += diff;\n            } else if (diff < 0) {\n                lossPLN += Math.abs(diff);\n            }\n        } else {\n            const purchasePLN = convertToPLN(p.price, p.currency);\n            const totalPurchase = purchasePLN * p.quantity;\n            purchaseValueTotalPLN += totalPurchase;\n            \n            let currentPLN = totalPurchase;\n            if (p.currentPrice !== null && p.currentPrice !== undefined) {\n                currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency) * p.quantity;\n                withPriceCount++;\n            }\n            currentValueTotalPLN += currentPLN;\n            \n            const diff = currentPLN - totalPurchase;\n            if (diff > 0) {\n                profitPLN += diff;\n            } else if (diff < 0) {\n                lossPLN += Math.abs(diff);\n            }\n        }\n    });\n    \n    const profitPercent = purchaseValueTotalPLN > 0 ? (profitPLN / purchaseValueTotalPLN) * 100 : 0;\n    const lossPercent = purchaseValueTotalPLN > 0 ? (lossPLN / purchaseValueTotalPLN) * 100 : 0;\n    const diff = currentValueTotalPLN - purchaseValueTotalPLN;\n    \n    totalValue.textContent = formatCurrency(currentValueTotalPLN, 'PLN', true, 'mainStats');\n    purchaseValue.textContent = formatCurrency(purchaseValueTotalPLN, 'PLN', true, 'mainStats');\n    currentValue.textContent = formatCurrency(currentValueTotalPLN, 'PLN', true, 'mainStats');\n    valueDifference.textContent = formatCurrency(diff, 'PLN', true, 'mainStats');\n    valueDifference.className = diff > 0 ? 'profit' : (diff < 0 ? 'loss' : '');\n    totalProfit.textContent = formatCurrency(profitPLN, 'PLN', true, 'mainStats');\n    totalLoss.textContent = formatCurrency(lossPLN, 'PLN', true, 'mainStats');\n    profitPercentage.textContent = profitPercent.toFixed(2).replace('.', ',') + '%';\n    profitPercentage.className = profitPLN > 0 ? 'profit' : '';\n    lossPercentage.textContent = lossPercent.toFixed(2).replace('.', ',') + '%';\n    lossPercentage.className = lossPLN > 0 ? 'loss' : '';\n    productsWithPrice.textContent = withPriceCount;\n    totalProducts.textContent = products.length;\n}\nfunction searchCardmarket(productName) {\n  let sanitized = productName.replace(/[^A-Za-z0-9ĄąĆćĘęŁłŃńÓóŚśŹźŻż]/g, ' ');\n  sanitized = sanitized.replace(/\\s+/g, ' ').trim();\n  const exactSearchString = `[${sanitized}]`;\n  const formattedName = encodeURIComponent(exactSearchString)\n    .replace(/%20/g, '+')\n    .replace(/'/g, '%27');\n  const cardmarketUrl = `https://www.cardmarket.com/en/Pokemon/Products/Search?searchString=${formattedName}&mode=gallery`;\n  const newWindow = window.open(cardmarketUrl, '_blank');\n}\nfunction renderProduct(p, index, isEditing = false) {\n  const productCard = document.createElement('div');\n  productCard.className = `product ${isEditing ? 'editing' : ''} ${selectionMode ? 'select-mode' : ''}`;\n  const originalIndex = products.findIndex(prod => prod.id === p.id);\n  const isSelected = selectedProducts.includes(originalIndex);\n\n  const excludedPriceTrendCategories = ['Złoto', 'Inne', 'Akcesoria'];\n  const excludedCardmarketCategories = ['Inne', 'Akcesoria'];\n  \n  const showPriceTrend = !excludedPriceTrendCategories.includes(p.category);\n  const showCardmarket = !excludedCardmarketCategories.includes(p.category);\n\n  if (isEditing) {\n    const showEffectField = p.category === 'Singles';\n    const showConditionField = p.category === 'Singles';\n    const showLanguageField = !['Złoto', 'Akcesoria', 'Inne'].includes(p.category);\n    const showCurrentPriceField = p.category !== 'Złoto';\n    let effectField = '';\n    let conditionField = '';\n    let languageField = '';\n    if (showEffectField) {\n      effectField = `\n        <div style=\"margin-top: 0.2rem; display: block;\" class=\"dynamic-field effect-field\">\n          <label for=\"editEffect-${index}\">Efekt</label>\n          <select id=\"editEffect-${index}\" class=\"edit-effect\">\n            <option value=\"\">Wybierz efekt</option>\n            ${effects.map(e => `<option value=\"${e}\" ${p.effect === e ? 'selected' : ''}>${e}</option>`).join('')}\n          </select>\n        </div>\n      `;\n    }\n\n    if (showConditionField) {\n      conditionField = `\n        <div style=\"margin-top: 0.2rem; display: block;\" class=\"dynamic-field condition-field\">\n          <label>Stan karty *</label>\n          <select class=\"edit-condition\" required>\n            <option value=\"\">Wybierz stan karty</option>\n            ${CARD_CONDITIONS.map(condition => `<option value=\"${condition}\" ${p.condition === condition ? 'selected' : ''}>${condition}</option>`).join('')}\n          </select>\n        </div>\n      `;\n    }\n\n    if (showLanguageField) {\n      languageField = `\n        <div style=\"margin-top: 0.2rem; display: block;\" class=\"dynamic-field language-field\">\n          <label>Język *</label>\n          <select class=\"edit-language\" required>\n            <option value=\"\">Wybierz język</option>\n            ${LANGUAGES.map(lang => `<option value=\"${lang}\" ${p.language === lang ? 'selected' : ''}>${lang}</option>`).join('')}\n          </select>\n        </div>\n      `;\n    }\n\n    const currentPriceBlock = showCurrentPriceField ? `\n      <div style=\"margin-top: 0.2rem;\">\n        <label>Aktualna cena za jedną sztukę</label>\n        <div class=\"currency-group\">\n          <div class=\"price-input-wrapper\">\n            <input type=\"number\" step=\"0.01\" class=\"edit-currentPrice\" value=\"${p.currentPrice || ''}\" placeholder=\"Aktualna cena\">\n          </div>\n          <select class=\"edit-currentCurrency\">\n            ${Object.entries(currencySymbols)\n              .map(([code, symbol]) => `<option value=\"${code}\" ${(p.currentCurrency || p.currency) === code ? 'selected' : ''}>${code} (${symbol})</option>`)\n              .join('')}\n          </select>\n        </div>\n      </div>\n    ` : `\n      <div style=\"margin-top: 0.2rem;\">\n        <label>Aktualna cena za 1 gram (automatycznie z NBP)</label>\n        <div class=\"currency-group\">\n          <input type=\"text\" class=\"edit-currentPrice\" value=\"${(p.currentPrice !== null && p.currentPrice !== undefined) ? (typeof p.currentPrice === 'number' ? p.currentPrice.toFixed(2).replace('.', ',') + ' zł/g' : p.currentPrice) : 'Brak danych'}\" readonly>\n        </div>\n      </div>\n    `;\n\n    productCard.innerHTML = `\n      <div class=\"product-content\">\n        <h3>Edytujesz: ${p.name}</h3>\n        <div class=\"inline-edit\">\n          <input type=\"text\" class=\"edit-name\" value=\"${p.name}\" placeholder=\"Nazwa *\" required>\n          <div style=\"margin-top: 0.2rem;\">\n            <label>Kategoria *</label>\n            <select class=\"edit-category\" id=\"editCategory-${index}\" required>\n              ${categories.map(c => `<option value=\"${c.name}\" ${p.category === c.name ? 'selected' : ''}>${c.name}</option>`).join('')}\n            </select>\n          </div>\n          ${effectField}\n          ${conditionField}\n          ${languageField}\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-top: 0.2rem;\">\n            <div>\n              <label class=\"quantity-label\">${p.category === 'Złoto' ? 'Ilość (gram) *' : 'Ilość *'}</label>\n              <input type=\"number\" class=\"edit-quantity\" value=\"${p.quantity}\" placeholder=\"${p.category === 'Złoto' ? 'Ilość (gram)' : 'Ilość'}\" required min=\"1\">\n            </div>\n            <div>\n              <label>Rok zakupu *</label>\n              <input type=\"number\" class=\"edit-year\" value=\"${p.year}\" placeholder=\"Rok zakupu\" required min=\"2000\" max=\"${new Date().getFullYear() + 1}\">\n            </div>\n          </div>\n          <div style=\"margin-top: 0.2rem;\">\n            <label>${p.category === 'Złoto' ? 'Cena zakupu za 1 gram *' : 'Cena zakupu jednej sztuki *'}</label>\n            <div class=\"currency-group\">\n              <div class=\"price-input-wrapper\">\n                <input type=\"number\" step=\"0.01\" class=\"edit-price\" value=\"${p.price}\" placeholder=\"${p.category === 'Złoto' ? 'Cena zakupu za gram' : 'Cena zakupu'}\" required min=\"0.01\">\n              </div>\n              <select class=\"edit-currency\" required>\n                ${Object.entries(currencySymbols)\n                  .map(([code, symbol]) => `<option value=\"${code}\" ${p.currency === code ? 'selected' : ''}>${code} (${symbol})</option>`)\n                  .join('')}\n              </select>\n            </div>\n          </div>\n          ${currentPriceBlock}\n          <div style=\"margin-top: 0.3rem;\">\n            <label>Zdjęcie produktu</label>\n            <div style=\"display: flex; flex-direction: column; gap: 0.5rem; margin-top: 0.2rem;\">\n              <div class=\"import-btn-wrapper\" style=\"flex: 1;\">\n                <button class=\"custom-file-btn btn-info\">\n                  <i class=\"fas fa-file-image\"></i> Wybierz plik z dysku\n                </button>\n                <input type=\"file\" class=\"edit-image\" accept=\"image/*\" onchange=\"showEditImagePreview(this, ${index})\">\n              </div>\n              <button type=\"button\" class=\"btn-info\" onclick=\"openGalleryForEdit(${index})\" style=\"flex: 1;\">\n                <i class=\"fas fa-images\"></i> Załaduj z galerii\n              </button>\n            </div>\n            <div class=\"image-preview-container\" id=\"editImagePreview-${index}\" style=\"${p.image ? '' : 'display: none;'}\">\n              <div class=\"image-preview\" onclick=\"openEditImagePreview(${index})\">\n                <img src=\"${p.image || ''}\" alt=\"Podgląd obrazu\">\n              </div>\n              <span>Kliknij miniaturkę, aby zobaczyć podgląd</span>\n            </div>\n          </div>\n          <div class=\"buttons\" style=\"margin-top: 0.5rem;\">\n            <button class=\"btn-success\" onclick=\"saveInline('${p.id}')\"><i class=\"fas fa-save\"></i> Zapisz</button>\n            <button class=\"btn-danger\" onclick=\"cancelInline('${p.id}')\"><i class=\"fas fa-times\"></i> Anuluj</button>\n          </div>\n          <div style=\"margin-top: 0.5rem; font-size: 0.8rem; color: #666;\">\n            * Pole wymagane\n          </div>\n        </div>\n      </div>\n    `;\n\n    const editCat = productCard.querySelector(`#editCategory-${index}`);\n    if (editCat) {\n      editCat.addEventListener('change', function() {\n        updateEditFormFields(this.value, productCard, index);\n      });\n    }\n\n  } else {\n    const categoryObj = categories.find(cat => cat.name.toLowerCase() === (p.category || '').toLowerCase()) || { bg: '#ededed', text: '#333' };\n\n    let warningIcon = '';\n    if (p.currentPrice != null && isPriceOutdated(p)) {\n      warningIcon = `\n        <span class=\"price-warning\" title=\"Należy zaktualizować aktualną cenę\">\n          <i class=\"fas fa-exclamation-triangle blink-icon\"></i>\n        </span>\n      `;\n    }\n\n    let goldStar = '';\n    if (p.currentPrice != null && p.currentPrice !== undefined) {\n      try {\n        const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n        const totalValue = currentPLN * p.quantity;\n        if (totalValue > 5000) {\n          goldStar = `\n            <span class=\"gold-star\" title=\"Wartość produktu przekroczyła kwotę 5000zł.\">\n              <i class=\"fas fa-star\"></i>\n            </span>\n          `;\n        }\n      } catch (e) {\n        logEvent('Błąd obliczania wartości produktu:', e);\n      }\n    }\n\n\tlet priceTrendHtml = '';\n\tif (showPriceTrend && priceTrendAllow) {\n\tpriceTrendHtml = `\n\t\t<div class=\"detail-item\">\n\t\t<span class=\"detail-label\">Price Trend (Cardmarket):</span>\n\t\t<span class=\"detail-value\">\n\t\t\t<div class=\"cardmarket-trend\" id=\"trend-${p.id}\">\n\t\t\t<div class=\"loading-trend\">Ładowanie...</div>\n\t\t\t</div>\n\t\t</span>\n\t\t</div>\n\t`;\n\t} else if (showPriceTrend && !priceTrendAllow) {\n\tpriceTrendHtml = `\n\t\t<div class=\"detail-item\">\n\t\t<span class=\"detail-label\">Price Trend (Cardmarket):</span>\n\t\t<span class=\"detail-value\">\n\t\t\t<div class=\"cardmarket-trend\">\n\t\t\t<span class=\"no-data\">Niedostępne</span>\n\t\t\t</div>\n\t\t</span>\n\t\t</div>\n\t`;\n\t}\n\n    let priceDiffHtml = '';\n    if (p.currentPrice != null && p.currentPrice !== undefined) {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n      const diff = (currentPLN - purchasePLN) * p.quantity;\n      const diffPercent = purchasePLN > 0 ? ((currentPLN - purchasePLN) / purchasePLN) * 100 : 0;\n      const diffClass = diff > 0 ? 'positive' : (diff < 0 ? 'negative' : 'neutral');\n      const diffSign = diff > 0 ? '+' : '';\n\n      const sameCurrency = p.currency === (p.currentCurrency || p.currency);\n      let profitInCurrency = '';\n      \n      if (sameCurrency) {\n        const profitVal = (p.currentPrice - p.price) * p.quantity;\n        profitInCurrency = formatCurrency(Math.abs(profitVal), p.currency, false, 'priceDiff');\n      }\n\n      priceDiffHtml = `\n        <div class=\"price-difference ${diffClass}\">\n          ${sameCurrency ? `\n            <div>${diffSign}${profitInCurrency} ${getCurrencySymbol(p.currency)}</div>\n            <div>(${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')})</div>\n          ` : `\n            <div>${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')}</div>\n          `}\n          <div>${diffSign}${Math.abs(diffPercent).toFixed(2).replace('.', ',')}%</div>\n        </div>\n      `;\n    }\n\n    let imageHtml;\n    const productImage = loadProductImage(p);\n    if (productImage) {\n      imageHtml = `<img src=\"${productImage}\" alt=\"${p.name}\">`;\n    } else if (p.imageId) {\n      imageHtml = `<img src=\"\" data-image-id=\"${p.imageId}\" alt=\"${p.name}\">`;\n    } else {\n      imageHtml = `<i class=\"fas fa-box-open\" style=\"font-size: 3rem; color: #b0bec5;\"></i>`;\n    }\n\n    const currentPriceDisplay = p.category === 'Złoto' ?\n      (p.currentPrice !== null && p.currentPrice !== undefined ?\n        `${formatCurrency(p.currentPrice, 'PLN', true, 'otherLists')}/g` :\n        'Brak danych') :\n      (p.currentPrice !== null && p.currentPrice !== undefined ?\n        formatCurrency(p.currentPrice, p.currentCurrency || p.currency, true, 'otherLists') :\n        'Brak');\n\n    const purchasePriceDisplay = formatCurrency(p.price, p.currency, true, 'otherLists') + (p.category === 'Złoto' ? '/g' : '');\n\n    const cardmarketButton = showCardmarket ? \n      `<button class=\"btn-cardmarket\" style=\"position: absolute; top: 5px; left: 10px; z-index: 2; max-width: 32%;\"> \n        <i class=\"fas fa-search\"></i> cardmarket\n      </button>` : '';\n\n    const conditionBadge = (p.category === 'Singles' && p.condition) ? \n      `<div class=\"card-condition\" style=\"margin-top: 5px; font-size: 0.9em; color: #666; text-align: center; display: block; width: 100%;\">Stan: ${p.condition}</div>` : '';\n\n    const languageBadge = (!['Złoto', 'Akcesoria', 'Inne'].includes(p.category) && p.language) ? \n      `<div class=\"language-badge\" style=\"position: absolute; top: 5px; right: 10px; z-index: 2; background: rgba(0,0,0,0.6); color: white; padding: 2px 6px; border-radius: 10px; font-size: 0.8em;\">\n        ${p.language}\n      </div>` : '';\n\n    productCard.innerHTML = `\n      ${selectionMode ? `<input type=\"checkbox\" class=\"product-checkbox\" ${isSelected ? 'checked' : ''} onchange=\"toggleProductSelection(${originalIndex}, this.checked)\">` : ''}\n      <div class=\"product-image\" style=\"position: relative;\">\n        ${cardmarketButton}\n        ${languageBadge}\n        ${goldStar}\n        ${imageHtml}\n      </div>\n      <div class=\"product-content\">\n        <div class=\"category-tag\" style=\"background:${categoryObj.bg}; color:${categoryObj.text}\">${p.category}</div>\n        <h3>${p.name}</h3>\n        ${conditionBadge}\n        <div class=\"product-details\">\n          <div class=\"detail-item\"><span class=\"detail-label\">${p.category === 'Złoto' ? 'Ilość (gram)' : 'Ilość'}</span><span class=\"detail-value\">${p.quantity}</span></div>\n          <div class=\"detail-item\"><span class=\"detail-label\">${p.category === 'Złoto' ? 'Cena zakupu za 1 gram' : 'Cena zakupu jednej sztuki'}</span><span class=\"detail-value\">${purchasePriceDisplay}</span></div>\n          <div class=\"detail-item\"><span class=\"detail-label\">Rok zakupu</span><span class=\"detail-value\">${p.year}</span></div>\n          <div class=\"detail-item\"><span class=\"detail-label\">Data dodania</span><span class=\"detail-value\">${formatDate(p.dateAdded)}</span></div>\n          <div class=\"detail-item\">\n            <span class=\"detail-label\">${p.category === 'Złoto' ? 'Aktualna cena za 1 gram' : 'Aktualna cena za jedną sztukę'}</span>\n            <span class=\"detail-value\">\n              ${currentPriceDisplay}\n              ${warningIcon}\n            </span>\n          </div>\n          ${priceTrendHtml}\n        </div>\n        ${priceDiffHtml}\n        <div class=\"button-group\" style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 10px; min-height: 40px;\">\n          <button class=\"delete-btn btn-danger\" onclick=\"deleteProduct('${p.id}')\"><i class=\"fas fa-trash-alt\"></i> Usuń</button>\n          <button class=\"edit-btn btn-info\" onclick=\"startInline('${p.id}')\"><i class=\"fas fa-edit\"></i> Edytuj</button>\n        </div>\n      </div>\n    `;\n\n    const imgContainer = productCard.querySelector('.product-image');\n    if (imgContainer) {\n      imgContainer.addEventListener('click', () => {\n        const originalIndex = products.findIndex(prod => prod.id === p.id);\n        openProductPreview(originalIndex);\n      });\n\n      if (showCardmarket) {\n        const btn = imgContainer.querySelector('.btn-cardmarket');\n        if (btn) {\n          if (p.category === 'Złoto') {\n            btn.innerHTML = '<i class=\"fas fa-search\"></i> Mennica Polska';\n            btn.addEventListener('click', e => {\n              e.stopPropagation();\n              window.open('https://www.mennica.com.pl/produkty-inwestycyjne/analiza-rynku-zlota', '_blank');\n            });\n          } else {\n            btn.addEventListener('click', e => {\n              e.stopPropagation();\n              searchCardmarket(p.name);\n            });\n          }\n        }\n      }\n\n      const imgEl = imgContainer.querySelector('img[data-image-id]');\n      if (imgEl) {\n        loadImageFromDB(p.imageId, 'productImages')\n          .then(dataUrl => { imgEl.src = dataUrl; })\n          .catch(() => {\n            const x = document.createElement('i');\n            x.className = 'fas fa-times-circle';\n            x.style.cssText = 'font-size: 3rem; color: #ff6f00;';\n            imgEl.replaceWith(x);\n          });\n      }\n    }\n\n    if (showPriceTrend) {\n      setTimeout(async () => {\n        try {\n          const trend = await fetchCardmarketPriceTrend(p.name);\n          const trendElement = document.getElementById(`trend-${p.id}`);\n          if (trendElement) {\n            if (trend) {\n              trendElement.innerHTML = `<span class=\"price-trend-value\">${trend}</span>`;\n            } else {\n              trendElement.innerHTML = '<span class=\"no-data\">Brak danych</span>';\n            }\n          }\n        } catch (error) {\n          logEvent('Błąd pobierania Price Trend:', error);\n          const trendElement = document.getElementById(`trend-${p.id}`);\n          if (trendElement) {\n            trendElement.innerHTML = '<span class=\"no-data\">Błąd pobierania</span>';\n          }\n        }\n      }, 1000);\n    }\n  }\n\n  productCard.dataset.id = p.id;\n  return productCard;\n}\nasync function addDailyPricePoints() {\n    const today = new Date().toISOString().split('T')[0];\n    const lastUpdate = localStorage.getItem('lastPriceHistoryUpdate') || '';\n    \n    if (lastUpdate !== today) {\n        const loader = new PokeballLoader('pokeballLoader').start(0);\n        loader.update(10);\n        try {\n            const goldPrice = await fetchGoldPrice();\n            \n            loader.update(40);\n            \n            for (const product of products) {\n                if (product.category === 'Złoto') {\n                    if (goldPrice !== null) {\n                        product.currentPrice = goldPrice;\n                        product.currentCurrency = 'PLN';\n                        product.lastPriceUpdate = new Date().toISOString();\n\n                        const history = await priceHistory.getPriceHistory(product.id);\n                        const lastEntry = history.length > 0 ? history[history.length - 1] : null;\n                        const shouldAdd = !lastEntry || \n                            !(new Date(lastEntry.date).toISOString().split('T')[0] === today && \n                            lastEntry.price === goldPrice && \n                            lastEntry.currency === 'PLN');\n\n                        if (shouldAdd) {\n                            await priceHistory.addPricePoint(\n                                product.id,\n                                goldPrice,\n                                'PLN'\n                            );\n                        }\n                    }\n                } else if (product.currentPrice !== null && product.currentPrice !== undefined) {\n                    const history = await priceHistory.getPriceHistory(product.id);\n                    const lastEntry = history.length > 0 ? history[history.length - 1] : null;\n                    const shouldAdd = !lastEntry || \n                        !(new Date(lastEntry.date).toISOString().split('T')[0] === today && \n                        lastEntry.price === product.currentPrice && \n                        lastEntry.currency === (product.currentCurrency || product.currency));\n\n                    if (shouldAdd) {\n                        await priceHistory.addPricePoint(\n                            product.id,\n                            product.currentPrice,\n                            product.currentCurrency || product.currency\n                        );\n                    }\n                }\n            }\n            \n            localStorage.setItem('lastPriceHistoryUpdate', today);\n            loader.update(80);\n            await saveProducts();\n            loader.complete();\n            setTimeout(() => loader.reset(), 500);\n        } catch (error) {\n            loader.reset();\n            logEvent('Błąd dodawania dziennych punktów cenowych:', error);\n        }\n    }\n}\nfunction openCurrencyConfigModal() {\n  fillCurrencyOptions();\n  document.getElementById('extendedStatsCurrency').value = currencyConfig.extendedStatsCurrency;\n  document.getElementById('mainStatsCurrency').value = currencyConfig.mainStatsCurrency;\n  document.getElementById('priceDiffCurrency').value = currencyConfig.priceDiffCurrency;\n  document.getElementById('priceHistoryCurrency').value = currencyConfig.priceHistoryCurrency;\n  document.getElementById('otherListsCurrency').value = currencyConfig.otherListsCurrency;\n  document.getElementById('purchasePriceCurrency').value = currencyConfig.purchasePriceCurrency || 'PLN';\n  document.getElementById('currentPriceCurrency').value = currencyConfig.currentPriceCurrency || 'PLN';\n  document.getElementById('currencyConfigModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('currencyConfigModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction closeCurrencyConfigModal() {\n  document.getElementById('currencyConfigModal').classList.remove('show');\n}\nfunction openAddNewProductModal() {\n    populateConditionAndLanguageSelects();\n    fillEffectSelect();\n    updateCategorySelects();\n    document.getElementById('productForm').reset();\n    document.getElementById('currency').value = 'PLN';\n    document.getElementById('currentCurrency').value = 'PLN';\n    document.getElementById('imagePreview').style.display = 'none';\n    \n    resetMainFormValidation();\n    \n    updateMainFormFields();\n    \n    document.getElementById('addnewproductmodal').classList.add('show');\n}\nfunction closeAddNewProductModal() {\n  document.getElementById('addnewproductmodal').classList.remove('show');\n}\nfunction saveCurrencyConfig() {\n    currencyConfig.extendedStatsCurrency = document.getElementById('extendedStatsCurrency').value;\n    currencyConfig.mainStatsCurrency = document.getElementById('mainStatsCurrency').value;\n    currencyConfig.priceDiffCurrency = document.getElementById('priceDiffCurrency').value;\n    currencyConfig.priceHistoryCurrency = document.getElementById('priceHistoryCurrency').value;\n    currencyConfig.otherListsCurrency = document.getElementById('otherListsCurrency').value;\n    currencyConfig.purchasePriceCurrency = document.getElementById('purchasePriceCurrency').value;\n    currencyConfig.currentPriceCurrency = document.getElementById('currentPriceCurrency').value;\n    currencyConfig.goldBuybackCurrency = document.getElementById('goldBuybackCurrency')?.value || 'PLN';\n    \n    localStorage.setItem('currencyConfig', JSON.stringify(currencyConfig));\n    \n    updateSummary();\n    renderProducts(applyAllFilters());\n    \n    if (document.getElementById('statsModal').classList.contains('show')) {\n        showExtendedStats();\n    }\n    \n    if (document.getElementById('productPreviewModal').classList.contains('show') && currentChartProductId) {\n        renderPriceHistoryChart(currentChartProductId);\n    }\n    \n    logEvent('Zaktualizowano konfigurację walut');\n    showNotification('Konfiguracja walut zapisana', 'success');\n    playNotificationSound('success');\n    closeCurrencyConfigModal();\n}\nfunction renderProducts(list = applyAllFilters()) {\n  productList.innerHTML = '';\n  currentDisplayedProducts = list;\n  \n  const totalPages = Math.ceil(list.length / paginationConfig.productsPerPage);\n  productsCurrentPage = Math.min(productsCurrentPage, totalPages);\n  \n  const startIndex = (productsCurrentPage - 1) * paginationConfig.productsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.productsPerPage, list.length);\n  const currentPageProducts = list.slice(startIndex, endIndex);\n  \n  if (currentPageProducts.length === 0) {\n    emptyState.style.display = 'block';\n    renderProductsPagination(totalPages);\n    return;\n  }\n  \n  emptyState.style.display = 'none';\n  \n  currentPageProducts.forEach((p, i) => {\n    const card = renderProduct(p, i, p.editing);\n    productList.appendChild(card);\n    \n    const imgContainer = card.querySelector('.product-image');\n    if (imgContainer) {\n      imgContainer.addEventListener('click', () => {\n        const originalIndex = products.findIndex(prod => prod.id === p.id);\n        openProductPreview(originalIndex);\n      });\n      \n      const btn = imgContainer.querySelector('.btn-cardmarket');\n      if (btn) {\n        if (p.category === 'Złoto') {\n          btn.innerHTML = '<i class=\"fas fa-search\"></i> Mennica Polska';\n          btn.addEventListener('click', e => {\n            e.stopPropagation();\n            window.open('https://www.mennica.com.pl/produkty-inwestycyjne/analiza-rynku-zlota', '_blank');\n          });\n        } else {\n          btn.addEventListener('click', e => {\n            e.stopPropagation();\n            searchCardmarket(p.name);\n          });\n        }\n      }\n    }\n    const imgEl = card.querySelector('img[data-image-id]');\n    if (imgEl) {\n      loadImageFromDB(p.imageId, 'productImages')\n        .then(dataUrl => { imgEl.src = dataUrl; })\n        .catch(() => {\n          const x = document.createElement('i');\n          x.className = 'fas fa-times-circle';\n          x.style.cssText = 'font-size: 3rem; color: #ff6f00;';\n          imgEl.replaceWith(x);\n        });\n    }\n\n    if (p.category !== 'Złoto') {\n      setTimeout(() => updateProductPriceTrend(p.id, p.name), 500 * (i + 1));\n    }\n  });\n  renderProductsPagination(totalPages);\n  addPaginationInfo();\n  setTimeout(initLazyLoading, 100);\n}\nasync function updateProductPriceTrend(productId, productName, retryCount = 0) {\n  if (!priceTrendAllow) {\n    const trendElement = document.getElementById(`trend-${productId}`);\n    if (trendElement) {\n      trendElement.innerHTML = '<span class=\"no-data\">Niedostępne</span>';\n    }\n    return;\n  }\n  const maxRetries = 2;\n  const retryDelay = 5000;\n\n  try {\n    const trend = await fetchCardmarketPriceTrend(productName);\n    const trendElement = document.getElementById(`trend-${productId}`);\n    \n    if (!trendElement) return;\n\n    if (trend) {\n      trendElement.innerHTML = `<span class=\"price-trend-value\">${trend}</span>`;\n    } else {\n      if (retryCount < maxRetries) {\n        trendElement.innerHTML = `<div class=\"loading-trend\">Ponawianie... (${retryCount + 1}/${maxRetries})</div>`;\n        setTimeout(() => {\n          updateProductPriceTrend(productId, productName, retryCount + 1);\n        }, retryDelay);\n      } else {\n        trendElement.innerHTML = '<span class=\"no-data\">Brak danych po wielu próbach</span>';\n      }\n    }\n  } catch (error) {\n    logEvent('Błąd aktualizacji Price Trend:', error);\n    const trendElement = document.getElementById(`trend-${productId}`);\n    \n    if (trendElement) {\n      if (retryCount < maxRetries) {\n        trendElement.innerHTML = `<div class=\"loading-trend\">Błąd, ponawianie... (${retryCount + 1}/${maxRetries})</div>`;\n        setTimeout(() => {\n          updateProductPriceTrend(productId, productName, retryCount + 1);\n        }, retryDelay);\n      } else {\n        trendElement.innerHTML = '<span class=\"no-data\">Błąd pobierania</span>';\n      }\n    }\n  }\n}\nfunction renderProductsPagination(totalPages) {\n  let paginationContainer = document.getElementById('productsPagination');\n  if (!paginationContainer) {\n    paginationContainer = document.createElement('div');\n    paginationContainer.id = 'productsPagination';\n    paginationContainer.className = 'pagination-container';\n    productList.parentNode.insertBefore(paginationContainer, productList.nextSibling);\n  }\n  paginationContainer.innerHTML = '';\n  if (totalPages <= 1) {\n    paginationContainer.style.display = 'none';\n    return;\n  }\n  paginationContainer.style.display = 'flex';\n  const prevBtn = document.createElement('button');\n  prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevBtn.disabled = productsCurrentPage === 1;\n  prevBtn.addEventListener('click', () => {\n    if (productsCurrentPage > 1) {\n      productsCurrentPage--;\n      renderProducts(applyAllFilters());\n    }\n  });\n  \n  const nextBtn = document.createElement('button');\n  nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextBtn.disabled = productsCurrentPage === totalPages;\n  nextBtn.addEventListener('click', () => {\n    if (productsCurrentPage < totalPages) {\n      productsCurrentPage++;\n      renderProducts(applyAllFilters());\n    }\n  });\n  const pageInfo = document.createElement('span');\n  pageInfo.className = 'page-info';\n  pageInfo.textContent = `Strona ${productsCurrentPage} z ${totalPages}`;\n  paginationContainer.appendChild(prevBtn);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextBtn);\n}\nasync function deleteProduct(productId) {\n  const globalIndex = products.findIndex(p => p.id === productId);\n  if (globalIndex === -1) return;\n  const p = products[globalIndex];\n  logEvent('Naciśnięto przycisk usunięcia dla produktu: ' + p.name);\n  showConfirmation(\n    'Potwierdzenie usunięcia',\n    `Czy na pewno chcesz usunąć produkt \"${p.name}\"?`,\n    async (confirmed) => {\n      if (!confirmed) return;\n      logEvent('Potwierdzono usunięcie produktu: ' + p.name);\n      const productElement = document.querySelector(`.product[data-id=\"${productId}\"]`);\n      if (productElement) {\n        productElement.style.transform = 'scale(0.9)';\n        productElement.style.opacity = '0';\n        setTimeout(async () => {\n          if (document.body.contains(productElement)) {\n            productElement.remove();\n          }\n          products.splice(globalIndex, 1);\n          await saveProducts();\n          forceUpdateStatistics();\n          const totalPages = Math.ceil(products.length / paginationConfig.productsPerPage);\n          if (productsCurrentPage > totalPages && totalPages > 0) {\n            productsCurrentPage = totalPages;\n          }\n          renderProducts(applyAllFilters());\n          showNotification('Produkt ' + p.name + ' został usunięty', 'success');\n          playNotificationSound('success');\n        }, 300);\n      } else {\n        products.splice(globalIndex, 1);\n        await saveProducts();\n        forceUpdateStatistics();\n        const totalPages = Math.ceil(products.length / paginationConfig.productsPerPage);\n        if (productsCurrentPage > totalPages && totalPages > 0) {\n          productsCurrentPage = totalPages;\n        }\n        renderProducts(applyAllFilters());\n      }\n    }\n  );\n}\nfunction updateProductInDOM(productId, isEditing) {\n  const productIndex = products.findIndex(p => p.id === productId);\n  if (productIndex === -1) return;\n  \n  const p = products[productIndex];\n  const productElement = document.querySelector(`.product[data-id=\"${productId}\"]`);\n  \n  if (productElement) {\n    const newElement = renderProduct(p, productIndex, isEditing);\n    productElement.replaceWith(newElement);\n  }\n}\nfunction startInline(productId) {\n  const globalIndex = products.findIndex(p => p.id === productId);\n  if (globalIndex === -1) return;\n  \n  logEvent(`Rozpoczęto edycję produktu: ${products[globalIndex].name}`);\n  \n  products.forEach(p => p.editing = false);\n  \n  products[globalIndex].editing = true;\n  \n  updateProductInDOM(productId, true);\n  setTimeout(() => {\n    const card = document.querySelector(`.product[data-id=\"${productId}\"]`);\n    if (card) {\n      const categorySelect = card.querySelector('.edit-category');\n      if (categorySelect) {\n        categorySelect.addEventListener('change', function() {\n          updateFormFieldsBasedOnCategory(this.value, card);\n        });\n      }\n    }\n  }, 100);\n}\n\nfunction updateFormFieldsBasedOnCategory(category, card) {\n  const effectField = card.querySelector('.edit-effect')?.closest('div');\n  const conditionField = card.querySelector('.edit-condition')?.closest('div');\n  const languageField = card.querySelector('.edit-language')?.closest('div');\n  const currentPriceGroup = card.querySelector('.edit-currentPrice')?.closest('div');\n  const quantityLabel = card.querySelector('.quantity-label');\n  const priceLabel = card.querySelector('.currency-group')?.previousElementSibling;\n  \n  if (effectField) effectField.style.display = 'none';\n  if (conditionField) conditionField.style.display = 'none';\n  if (languageField) languageField.style.display = 'none';\n  if (currentPriceGroup) currentPriceGroup.style.display = 'block';\n  \n  if (category === 'Singles') {\n    if (effectField) effectField.style.display = 'block';\n    if (conditionField) conditionField.style.display = 'block';\n  }\n  \n  if (!['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n    if (languageField) languageField.style.display = 'block';\n  }\n  \n  if (category === 'Złoto') {\n    if (currentPriceGroup) currentPriceGroup.style.display = 'none';\n    if (quantityLabel) quantityLabel.textContent = 'Ilość (gram)';\n    if (priceLabel) priceLabel.textContent = 'Cena zakupu za 1 gram';\n  } else {\n    if (quantityLabel) quantityLabel.textContent = 'Ilość';\n    if (priceLabel) priceLabel.textContent = 'Cena zakupu jednej sztuki';\n  }\n}\ndocument.getElementById('backgroundUploadBtn').addEventListener('click', toggleBackgroundUploadPanel);\ndocument.getElementById('backgroundSelectBtn').addEventListener('click', toggleBackgroundSelectionMode);\ndocument.getElementById('backgroundSelectionControls').querySelector('.btn-danger').addEventListener('click', deleteSelectedBackgrounds);\ndocument.getElementById('backgroundSelectionControls').querySelector('.btn-info').addEventListener('click', cancelBackgroundSelection);\nfunction cancelInline(productId) {\n  const globalIndex = products.findIndex(p => p.id === productId);\n  if (globalIndex !== -1) {\n    logEvent(`Anulowano edycję produktu: ${products[globalIndex].name}`);\n    \n    products[globalIndex].editing = false;\n    \n    saveProducts();\n    \n    updateProductInDOM(productId, false);\n  }\n}\nfunction resetMainFormValidation() {\n  const fields = ['name', 'category', 'quantity', 'price', 'year', 'currency', 'condition', 'language', 'currentPrice', 'currentCurrency'];\n  fields.forEach(fieldId => {\n    const field = document.getElementById(fieldId);\n    if (field) {\n      field.style.borderColor = '';\n      field.style.boxShadow = '';\n      field.style.backgroundColor = '';\n      field.classList.remove('validation-error');\n    }\n  });\n}\nasync function showEditImagePreview(input, index) {\n    if (!input.files || !input.files[0]) return;\n    const file = input.files[0];\n    const fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n    if (!isImageNameUnique(fileName)) {\n        showNotification('Zdjęcie o takiej nazwie już istnieje i nie zostanie dodane do galeri, ani jako miniaturka do produktu', 'warning');\n        input.value = '';\n        selectedImageUrl = null;\n        document.getElementById('previewImg').src = '';\n        document.getElementById('imagePreview').style.display = 'none';\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        const dataUrl = e.target.result;\n        const previewContainer = document.getElementById(`editImagePreview-${index}`);\n        const previewImg = previewContainer.querySelector('img');\n        previewImg.src = dataUrl;\n        previewContainer.style.display = 'flex';\n        products[index].image = dataUrl;\n        galleryImages.push({\n            id: generateUniqueId(),\n            name: fileName,\n            data: dataUrl,\n            dateAdded: new Date().toISOString()\n        });\n        saveGallery();\n        renderGallery();\n        showNotification('Zdjęcie dodane do galerii', 'success');\n\t\tplayNotificationSound('success');\n    };\n    reader.readAsDataURL(file);\n}\nfunction openGalleryForEdit(index) {\n\teditingProductIndex = index;\n\topenGalleryForSelection();\n}\nfunction startExchangeRateUpdater() {\n\tfetchExchangeRates();\n\tsetInterval(fetchExchangeRates, 3600000);\n}\nfunction openEditImagePreview(index) {\n    showNotification('Otworzono podgląd zdjęcia', 'info');\n    const product = products[index];\n    if (!product.image) return;\n    document.getElementById('fullPreviewImg').src = product.image;\n    document.getElementById('imagePreviewModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('imagePreviewModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nasync function saveInline(productId) {\n  const globalIndex = products.findIndex(p => p.id === productId);\n  if (globalIndex === -1) {\n    showNotification('Błąd: nie znaleziono produktu do edycji', 'danger');\n    return;\n  }\n\n  const card = document.querySelector(`.product[data-id=\"${productId}\"]`);\n  if (!card) {\n    showNotification('Błąd: element edycji nie został znaleziony', 'danger');\n    return;\n  }\n\n  logEvent(`Zapisywanie zmian produktu: ${products[globalIndex].name}`);\n\n  try {\n    const nameInput = card.querySelector('.edit-name');\n    const categorySelect = card.querySelector('.edit-category');\n    const quantityInput = card.querySelector('.edit-quantity');\n    const priceInput = card.querySelector('.edit-price');\n    const yearInput = card.querySelector('.edit-year');\n    const currencySelect = card.querySelector('.edit-currency');\n    const currentPriceInput = card.querySelector('.edit-currentPrice');\n    const currentCurrencySelect = card.querySelector('.edit-currentCurrency');\n    const effectSelect = card.querySelector('.edit-effect');\n    const conditionSelect = card.querySelector('.edit-condition');\n    const languageSelect = card.querySelector('.edit-language');\n    \n    resetValidationStyles(card);\n    const errors = [];\n    \n    if (!nameInput || !nameInput.value.trim()) {\n      errors.push('Nazwa produktu jest wymagana');\n      highlightField(nameInput);\n    }\n\n    if (!categorySelect || !categorySelect.value) {\n      errors.push('Kategoria jest wymagana');\n      highlightField(categorySelect);\n    }\n\n    if (!quantityInput || isNaN(parseInt(quantityInput.value)) || parseInt(quantityInput.value) < 1) {\n      errors.push('Nieprawidłowa ilość');\n      highlightField(quantityInput);\n    }\n\n    if (!priceInput || isNaN(parseFloat(priceInput.value)) || parseFloat(priceInput.value) <= 0) {\n      errors.push('Nieprawidłowa cena zakupu');\n      highlightField(priceInput);\n    }\n\n    if (!yearInput || isNaN(parseInt(yearInput.value)) || parseInt(yearInput.value) < 2000 || parseInt(yearInput.value) > new Date().getFullYear() + 1) {\n      errors.push('Nieprawidłowy rok zakupu');\n      highlightField(yearInput);\n    }\n\n    if (!currencySelect || !currencySelect.value) {\n      errors.push('Waluta jest wymagana');\n      highlightField(currencySelect);\n    }\n\n    const category = categorySelect ? categorySelect.value : '';\n\n    if (category === 'Singles') {\n      if (!conditionSelect || !conditionSelect.value) {\n        errors.push('Stan karty jest wymagany dla kategorii Singles');\n        highlightField(conditionSelect);\n      }\n      if (effectSelect && effectSelect.value && !effects.includes(effectSelect.value)) {\n        errors.push('Wybrany efekt nie istnieje na liście dostępnych efektów');\n        highlightField(effectSelect);\n      }\n    }\n\n    if (!['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n      if (!languageSelect || !languageSelect.value) {\n        errors.push('Język jest wymagany dla tej kategorii');\n        highlightField(languageSelect);\n      } else if (!LANGUAGES.includes(languageSelect.value)) {\n        errors.push('Wybrany język nie istnieje na liście dostępnych języków');\n        highlightField(languageSelect);\n      }\n    }\n\n    if (category !== 'Złoto') {\n      if (currentPriceInput && currentPriceInput.value.trim() !== '') {\n        const currentPriceValue = parseFloat(currentPriceInput.value);\n        if (isNaN(currentPriceValue) || currentPriceValue < 0) {\n          errors.push('Nieprawidłowa aktualna cena');\n          highlightField(currentPriceInput);\n        }\n        if (!currentCurrencySelect || !currentCurrencySelect.value) {\n          errors.push('Waluta aktualnej ceny jest wymagana');\n          highlightField(currentCurrencySelect);\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      showNotification('Popraw następujące błędy: ' + errors.join(', '), 'danger');\n      playNotificationSound('alert');\n      return;\n    }\n\n    const name = nameInput.value.trim();\n    const quantity = parseInt(quantityInput.value);\n    const price = parseFloat(priceInput.value);\n    const year = parseInt(yearInput.value);\n    const currency = currencySelect.value;\n\n    let currentPriceValue = null;\n    let currentCurrencyValue = null;\n    \n    if (category === 'Złoto') {\n      const goldPrice = await fetchGoldPrice();\n      if (goldPrice !== null) {\n        currentPriceValue = goldPrice;\n        currentCurrencyValue = 'PLN';\n      } else {\n        showNotification('Nie udało się pobrać ceny złota. Używam ostatniej znanej ceny.', 'warning');\n        currentPriceValue = exchangeRates.GOLD || price;\n        currentCurrencyValue = 'PLN';\n      }\n    } else {\n      if (currentPriceInput && currentPriceInput.value.trim() !== '') {\n        currentPriceValue = parseFloat(currentPriceInput.value);\n        currentCurrencyValue = currentCurrencySelect ? currentCurrencySelect.value : (products[globalIndex].currentCurrency || currency);\n      }\n    }\n\n    let effectValue = null;\n    if (effectSelect && category === 'Singles') {\n      effectValue = effectSelect.value || null;\n    }\n\n    let conditionValue = null;\n    if (conditionSelect && category === 'Singles') {\n      conditionValue = conditionSelect.value;\n    }\n\n    let languageValue = null;\n    if (languageSelect && !['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n      languageValue = languageSelect.value;\n    }\n\n    let newName = name;\n    let nameChanged = false;\n\n    const lastPriceUpdate = new Date().toISOString();\n\n    const updatedProduct = {\n      ...products[globalIndex],\n      name: newName,\n      category: category,\n      quantity: quantity,\n      price: price,\n      year: year,\n      currency: currency,\n      currentPrice: currentPriceValue,\n      currentCurrency: currentCurrencyValue,\n      effect: effectValue,\n      condition: conditionValue,\n      language: languageValue,\n      editing: false,\n      lastPriceUpdate: lastPriceUpdate\n    };\n\n    products[globalIndex] = updatedProduct;\n\n    if (currentPriceValue !== null) {\n      try {\n        await priceHistory.addPricePoint(\n          updatedProduct.id,\n          currentPriceValue,\n          currentCurrencyValue\n        );\n      } catch (error) {\n        logEvent('Błąd zapisu historii cen:', error);\n      }\n    }\n\n    await saveProducts();\n\n    if (nameChanged) {\n      showNotification(`Produkt o takiej nazwie już istnieje. Zapisano jako: ${newName}`, 'warning', 5000);\n      playNotificationSound('alert');\n    } else {\n      showNotification('Produkt został zaktualizowany', 'success');\n      playNotificationSound('success');\n    }\n\n    renderProducts(applyAllFilters());\n\n  } catch (error) {\n    showNotification('Błąd podczas zapisywania: ' + error, 'danger');\n    logEvent('Błąd saveInline:', error);\n    logEvent(`Błąd podczas zapisu produktu: ${error}`);\n  }\n}\nfunction highlightField(field) {\n    if (field) {\n        field.style.borderColor = '#dc3545';\n        field.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';\n        field.style.backgroundColor = '#fff5f5';\n        field.classList.add('validation-error');\n    }\n}\nfunction resetValidationStyles(card) {\n  const fields = card.querySelectorAll('input, select');\n  fields.forEach(field => {\n    field.style.borderColor = '';\n    field.style.boxShadow = '';\n    field.style.backgroundColor = '';\n  });\n}\nasync function fetchEffectsFromGitHub() {\n    try {\n        const response = await fetch('https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/effects.json');\n        if (!response.ok) {\n            throw new Error('Nie udało się pobrać efektów');\n        }\n        const effectsFromGitHub = await response.json();\n        return effectsFromGitHub;\n    } catch (error) {\n        logEvent('Błąd pobierania efektów:', error);\n        return null;\n    }\n}\nasync function updateEffectsFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(30);\n    \n    try {\n        const githubEffects = await fetchEffectsFromGitHub();\n        if (githubEffects && githubEffects.length > 0) {\n            const existingEffects = new Set(effects);\n            const newEffects = githubEffects.filter(effect => !existingEffects.has(effect));\n            \n            if (newEffects.length > 0) {\n                effects.push(...newEffects);\n                saveEffects();\n                renderEffectsList();\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n                showNotification(`Dodano ${newEffects.length} nowych efektów`, 'success');\n                playNotificationSound('success');\n                \n                if (document.getElementById('effect')) {\n                    fillEffectSelect();\n                }\n            } else {\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n            }\n        } else {\n            throw new Error('Nie udało się pobrać efektów');\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji efektów: ' + error.message, 'danger');\n    }\n}\nfunction forceUpdateUI() {\n  updateSummary();\n  renderProducts(applyAllFilters());\n  generateNewStatistics();\n}\nasync function forceSaveAll() {\n  try {\n    saveLogs();\n\tawait fetchGoldPrice();\n    await saveGallery();\n    await saveProductImagesToDB();\n    await migrateExistingProducts();\n    await migrateProductImageReferences();\n    try {\n      localStorage.setItem('products', JSON.stringify(products));\n      localStorage.setItem('categories', JSON.stringify(categories));\n      localStorage.setItem('exchangeRates', JSON.stringify(exchangeRates));\n      localStorage.setItem('currencySymbols', JSON.stringify(currencySymbols));\n      localStorage.setItem('shops', JSON.stringify(shops));\n      localStorage.setItem('effects', JSON.stringify(effects));\n    } catch (storageError) {\n      if (storageError.name === 'QuotaExceededError') {\n        const productsWithoutImages = products.map(({ image, imageId, ...rest }) => rest);\n        localStorage.setItem('products', JSON.stringify(productsWithoutImages));\n        localStorage.setItem('categories', JSON.stringify(categories));\n        localStorage.setItem('exchangeRates', JSON.stringify(exchangeRates));\n        localStorage.setItem('currencySymbols', JSON.stringify(currencySymbols));\n        localStorage.setItem('shops', JSON.stringify(shops));\n        localStorage.setItem('effects', JSON.stringify(effects));\n      } else {\n        throw storageError;\n      }\n    }\n    await forceUpdateStatistics();\n    await renderProducts(applyAllFilters());\n    await renderGallery();\n    await updateCategorySelects();\n    await updateCurrencySelects();\n    await fillEffectSelect();\n\tawait updateGoldPrices();\n    setTimeout(() => {\n      showNotification('Wszystkie dane zostały zapisane!', 'success');\n    }, 500);\n  } catch (error) {\n    showNotification('Błąd zapisu: ' + error.message, 'danger');\n    playNotificationSound('alert');\n  }\n}\n\nfunction updateEditFormFields(category, card, index) {\n  const effectField = card.querySelector('.effect-field');\n  const conditionField = card.querySelector('.condition-field');\n  const languageField = card.querySelector('.language-field');\n  const quantityLabel = card.querySelector('.quantity-label');\n  const priceLabel = card.querySelector('.currency-group').previousElementSibling;\n  const priceInput = card.querySelector('.edit-price');\n  const currentPriceBlock = card.querySelector('.edit-currentPrice')?.closest('div');\n\n  if (effectField) effectField.style.display = 'none';\n  if (conditionField) conditionField.style.display = 'none';\n  if (languageField) languageField.style.display = 'none';\n\n  if (category === 'Singles') {\n    if (effectField) effectField.style.display = 'block';\n    if (conditionField) conditionField.style.display = 'block';\n  }\n\n  if (!['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n    if (languageField) languageField.style.display = 'block';\n  }\n\n  if (category === 'Złoto') {\n    if (quantityLabel) quantityLabel.textContent = 'Ilość (gram) *';\n    if (priceLabel) priceLabel.textContent = 'Cena zakupu za 1 gram *';\n    if (priceInput) priceInput.placeholder = 'Cena zakupu za gram';\n    if (currentPriceBlock) currentPriceBlock.style.display = 'none';\n  } else {\n    if (quantityLabel) quantityLabel.textContent = 'Ilość *';\n    if (priceLabel) priceLabel.textContent = 'Cena zakupu jednej sztuki *';\n    if (priceInput) priceInput.placeholder = 'Cena zakupu';\n    if (currentPriceBlock) currentPriceBlock.style.display = 'block';\n  }\n}\nfunction showImagePreview(input) {\n    if (!input || !input.files || !input.files[0]) return;\n    const file = input.files[0];\n    const fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n    if (!isImageNameUnique(fileName)) {\n        showNotification('Zdjęcie o takiej nazwie już istnieje i nie zostanie dodane do galeri, ani jako miniaturka do produktu', 'warning');\n        input.value = '';\n        selectedImageUrl = null;\n        document.getElementById('previewImg').src = '';\n        document.getElementById('imagePreview').style.display = 'none';\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        document.getElementById('previewImg').src = e.target.result;\n        document.getElementById('imagePreview').style.display = 'flex';\n        galleryImages.push({\n            id: generateUniqueId(),\n            name: fileName,\n            data: e.target.result,\n            dateAdded: new Date().toISOString()\n        });\n        saveGallery();\n        renderGallery();\n        showNotification('Zdjęcie dodane do galerii', 'success');\n\t\tplayNotificationSound('success');\n    };\n    reader.readAsDataURL(file);\n}\nfunction openImagePreview() {\n    logEvent('Otwarcie podglądu obrazu');\n    const imgSrc = document.getElementById('previewImg').src;\n    if (!imgSrc) return;\n    document.getElementById('fullPreviewImg').src = imgSrc;\n    document.getElementById('imagePreviewModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('imagePreviewModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeImagePreview() {\n  logEvent('Podgląd obrazu został zamknięty');\n  document.getElementById('imagePreviewModal').classList.remove('show');\n}\nfunction openProductPreview(index) {\n  try {\n    const product = products[index];\n    if (!product) {\n      logEvent('Product not found at index:', index);\n      showNotification('Nie znaleziono produktu', 'danger');\n      return;\n    }\n\n    const previewProductName = document.getElementById('previewProductName');\n    const card3dContainer = document.getElementById('card3dContainer');\n    const standardPreview = document.getElementById('standardPreview');\n    const card3dImage = document.getElementById('card3dImage');\n    const productPreviewImg = document.getElementById('productPreviewImg');\n    const effectRow = document.getElementById('previewEffect') ? document.getElementById('previewEffect').parentElement : null;\n    const quantityLabel = document.querySelector('#previewQuantity') ? document.querySelector('#previewQuantity').previousElementSibling : null;\n    const currentPriceLabel = document.querySelector('#previewCurrentPrice') ? document.querySelector('#previewCurrentPrice').previousElementSibling : null;\n    \n    if (!previewProductName) {\n      logEvent('Required DOM element previewProductName not found');\n      return;\n    }\n\n    previewProductName.textContent = product.name;\n\n    const excludedPriceTrendCategories = ['Złoto', 'Inne', 'Akcesoria'];\n    const excludedCardmarketCategories = ['Inne', 'Akcesoria'];\n    \n    const showPriceTrend = !excludedPriceTrendCategories.includes(product.category);\n    const showCardmarket = !excludedCardmarketCategories.includes(product.category);\n\n    const existingCondition = document.querySelector('.preview-card-condition');\n    const existingLanguageRow = document.querySelector('.preview-language-row');\n    if (existingCondition) existingCondition.remove();\n    if (existingLanguageRow) existingLanguageRow.remove();\n\n    if (product.category === 'Singles' && product.condition) {\n      const conditionElement = document.createElement('div');\n      conditionElement.className = 'preview-card-condition';\n      conditionElement.textContent = `Stan karty: ${product.condition}`;\n      conditionElement.style.marginTop = '5px';\n      conditionElement.style.fontSize = '0.9em';\n      conditionElement.style.color = '#666';\n      conditionElement.style.display = 'block';\n      conditionElement.style.width = '100%';\n      \n      const productNameParent = document.getElementById('previewProductName').parentNode;\n      if (productNameParent) {\n        productNameParent.appendChild(conditionElement);\n      }\n    }\n\n    let goldBuybackRow = document.getElementById('previewGoldBuyback');\n    let goldBuybackValueElement = document.getElementById('previewGoldBuybackValue');\n\n    if (product.category === 'Złoto') {\n      if (!goldBuybackRow) {\n        const previewDetails = document.querySelector('.preview-details');\n        if (previewDetails) {\n          goldBuybackRow = document.createElement('div');\n          goldBuybackRow.id = 'previewGoldBuyback';\n          goldBuybackRow.className = 'preview-detail-row';\n          goldBuybackRow.innerHTML = `\n            <span class=\"preview-detail-label\">Cena odkupu złota przez Mennica Polska (podana cena jest szacowana):</span>\n            <span class=\"preview-detail-value\" id=\"previewGoldBuybackValue\">Obliczanie...</span>\n          `;\n          previewDetails.parentNode.insertBefore(goldBuybackRow, previewDetails.nextSibling);\n          goldBuybackValueElement = document.getElementById('previewGoldBuybackValue');\n        }\n      }\n\n      if (goldBuybackValueElement) {\n        calculateGoldBuybackPrice(product).then(result => {\n          const targetCurrency = currencyConfig.goldBuybackCurrency || currencyConfig.priceDiffCurrency;\n          const convertedBuyback = convertToCurrency(result.buybackPrice, 'PLN', targetCurrency);\n          goldBuybackValueElement.innerHTML = `\n            <div>${formatCurrency(convertedBuyback, targetCurrency, true, 'goldBuyback')}</div>\n            <div style=\"font-size: 0.8em; color: #666; margin-top: 5px;\">\n              ${result.rateInfo}<br>\n              Kurs USD/PLN: ${result.usdRate.toFixed(4)}\n              <button onclick=\"refreshGoldBuybackPrice()\" style=\"margin-top: 5px; padding: 2px 5px; font-size: 0.7em;\">\n                <i class=\"fas fa-sync-alt\"></i> Odśwież teraz\n              </button>\n            </div>\n          `;\n          startGoldBuybackAutoRefresh(product);\n        }).catch(error => {\n          logEvent('Błąd obliczania ceny odkupu:', error);\n          if (goldBuybackValueElement) {\n            goldBuybackValueElement.textContent = 'Błąd obliczeń';\n          }\n        });\n      }\n      \n      if (goldBuybackRow) {\n        goldBuybackRow.style.display = 'flex';\n      }\n      \n      if (quantityLabel) quantityLabel.textContent = 'Ilość (gram)';\n      if (currentPriceLabel) currentPriceLabel.textContent = 'Aktualna cena za 1 gram';\n      const priceLabel = document.querySelector('#previewPrice') ? document.querySelector('#previewPrice').previousElementSibling : null;\n      if (priceLabel) priceLabel.textContent = 'Cena zakupu za 1 gram';\n    } else {\n      if (goldBuybackRow) {\n        goldBuybackRow.style.display = 'none';\n      }\n      if (quantityLabel) quantityLabel.textContent = 'Ilość';\n      if (currentPriceLabel) currentPriceLabel.textContent = 'Aktualna cena za jedną sztukę';\n    }\n\n    if (product.category === 'Singles') {\n      if (card3dContainer) card3dContainer.style.display = 'block';\n      if (standardPreview) standardPreview.style.display = 'none';\n      if (card3dImage) card3dImage.src = product.image || '';\n      \n      const cardFront = card3dContainer ? card3dContainer.querySelector('.card-front') : null;\n      if (cardFront) {\n        if (product.effect === 'Pokemon V (Full Art)') {\n          cardFront.dataset.rarity = 'rare ultra';\n          cardFront.dataset.supertype = 'pokémon';\n        } else {\n          delete cardFront.dataset.rarity;\n          delete cardFront.dataset.supertype;\n        }\n      }\n      \n      if (effectRow) effectRow.style.display = '';\n      const previewEffectElement = document.getElementById('previewEffect');\n      if (previewEffectElement) previewEffectElement.textContent = product.effect || 'Brak';\n      init3DCardEffect();\n    } else {\n      if (card3dContainer) card3dContainer.style.display = 'none';\n      if (standardPreview) standardPreview.style.display = 'block';\n      if (productPreviewImg) productPreviewImg.src = product.image || '';\n      if (effectRow) effectRow.style.display = 'none';\n    }\n\n    const previewCategoryElement = document.getElementById('previewCategory');\n    if (previewCategoryElement) previewCategoryElement.textContent = product.category;\n    \n    const previewQuantityElement = document.getElementById('previewQuantity');\n    if (previewQuantityElement) previewQuantityElement.textContent = product.quantity;\n    \n    const previewPriceElement = document.getElementById('previewPrice');\n    if (previewPriceElement) previewPriceElement.textContent = formatCurrency(product.price, product.currency, true, 'purchasePrice');\n    \n    const previewYearElement = document.getElementById('previewYear');\n    if (previewYearElement) previewYearElement.textContent = product.year;\n    \n    const previewDateAddedElement = document.getElementById('previewDateAdded');\n    if (previewDateAddedElement) previewDateAddedElement.textContent = formatDate(product.dateAdded);\n    \n    if (!['Złoto', 'Akcesoria', 'Inne'].includes(product.category) && product.language) {\n      const languageRow = document.createElement('div');\n      languageRow.className = 'preview-language-row detail-item';\n      languageRow.innerHTML = `\n        <span class=\"detail-label\">Język:</span>\n        <span class=\"preview-value\" style=\"font-weight: 600;font-size: 1rem;\">${product.language}</span>\n      `;\n      \n      const yearRow = document.querySelector('#previewYear') ? document.querySelector('#previewYear').parentNode : null;\n      if (yearRow && yearRow.parentNode) {\n        yearRow.parentNode.insertBefore(languageRow, yearRow.nextSibling);\n      }\n    }\n    \n    const currentPrice = product.currentPrice !== null && product.currentPrice !== undefined ? \n      formatCurrency(product.currentPrice, product.currentCurrency || product.currency, true, 'currentPrice') : 'Brak';\n    \n    const previewCurrentPriceElement = document.getElementById('previewCurrentPrice');\n    if (previewCurrentPriceElement) previewCurrentPriceElement.textContent = currentPrice;\n    \n    const previewCurrencyElement = document.getElementById('previewCurrency');\n    if (previewCurrencyElement) previewCurrencyElement.textContent = \n      `${product.currency} (${getCurrencySymbol(product.currency)})`;\n    \n    const previewCurrentCurrencyElement = document.getElementById('previewCurrentCurrency');\n    if (previewCurrentCurrencyElement) previewCurrentCurrencyElement.textContent = \n      `${product.currentCurrency || product.currency} (${getCurrencySymbol(product.currentCurrency || product.currency)})`;\n    \n    let priceDiffHtml = '';\n    if (product.currentPrice !== null && product.currentPrice !== undefined) {\n      const purchasePLN = convertToPLN(product.price, product.currency);\n      let diff, diffPerItem, diffPercent, diffClass, diffSign;\n      \n      if (product.category === 'Złoto') {\n        const totalPurchaseValue = purchasePLN * product.quantity;\n        const totalCurrentValue = convertToPLN(product.currentPrice, product.currentCurrency || product.currency) * product.quantity;\n        diff = totalCurrentValue - totalPurchaseValue;\n        diffPerItem = (totalCurrentValue / product.quantity) - (totalPurchaseValue / product.quantity);\n        diffPercent = (diff / totalPurchaseValue) * 100;\n        diffClass = diff > 0 ? 'positive' : (diff < 0 ? 'negative' : 'neutral');\n        diffSign = diff > 0 ? '+' : '';\n\n        priceDiffHtml = `\n          <div class=\"price-difference ${diffClass}\">\n            <div>${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')}</div>\n            <div>${diffSign}${Math.abs(diffPercent).toFixed(2).replace('.', ',')}%</div>\n          </div>\n        `;\n      } else {\n        const currentPLN = convertToPLN(product.currentPrice, product.currentCurrency || product.currency);\n        diff = (currentPLN - purchasePLN) * product.quantity;\n        diffPerItem = currentPLN - purchasePLN;\n        diffPercent = (diffPerItem / purchasePLN) * 100;\n        diffClass = diff > 0 ? 'positive' : (diff < 0 ? 'negative' : 'neutral');\n        diffSign = diff > 0 ? '+' : '';\n\n        const sameCurrency = product.currency === (product.currentCurrency || product.currency);\n        let profitInCurrency = '';\n        \n        if (sameCurrency) {\n          const profitVal = (product.currentPrice - product.price) * product.quantity;\n          profitInCurrency = formatCurrency(Math.abs(profitVal), product.currency, false, 'priceDiff');\n        }\n\n        priceDiffHtml = `\n          <div class=\"price-difference ${diffClass}\">\n            ${sameCurrency ? `\n              <div>${diffSign}${profitInCurrency} ${getCurrencySymbol(product.currency)}</div>\n              <div>(${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')})</div>\n            ` : `\n              <div>${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')}</div>\n            `}\n            <div>${diffSign}${Math.abs(diffPercent).toFixed(2).replace('.', ',')}%</div>\n          </div>\n        `;\n      }\n    } else {\n      priceDiffHtml = '<div class=\"price-difference neutral\">Brak danych o aktualnej cenie</div>';\n    }\n    \n    const previewPriceDifferenceElement = document.getElementById('previewPriceDifference');\n    if (previewPriceDifferenceElement) {\n      previewPriceDifferenceElement.innerHTML = priceDiffHtml;\n    }\n\n    let priceTrendRow = document.getElementById('previewPriceTrendRow');\n    if (showPriceTrend && priceTrendAllow) {\n      if (!priceTrendRow) {\n        const previewDetails = document.querySelector('.preview-details');\n        if (previewDetails) {\n          priceTrendRow = document.createElement('div');\n          priceTrendRow.id = 'previewPriceTrendRow';\n          priceTrendRow.className = 'detail-item';\n          priceTrendRow.innerHTML = `\n            <span class=\"detail-label\">Price Trend na Cardmarket:</span>\n            <span class=\"preview-detail-value\">\n              <div class=\"loading-trend\">Ładowanie...</div>\n            </span>\n          `;\n          \n          const priceDifferenceSection = document.querySelector('.price-difference-section');\n          if (priceDifferenceSection) {\n            priceDifferenceSection.parentNode.insertBefore(priceTrendRow, priceDifferenceSection);\n          } else {\n            previewDetails.appendChild(priceTrendRow);\n          }\n        }\n      } else {\n        const priceTrendElement = document.getElementById('previewPriceTrend');\n        if (priceTrendElement) {\n          priceTrendElement.innerHTML = '<div class=\"loading-trend\">Ładowanie...</div>';\n        }\n      }\n      updateProductPreviewPriceTrend(product.name);\n    } else if (showPriceTrend && !priceTrendAllow) {\n      if (!priceTrendRow) {\n        const previewDetails = document.querySelector('.preview-details');\n        if (previewDetails) {\n          priceTrendRow = document.createElement('div');\n          priceTrendRow.id = 'previewPriceTrendRow';\n          priceTrendRow.className = 'detail-item';\n          priceTrendRow.innerHTML = `\n            <span class=\"detail-label\">Price Trend na Cardmarket:</span>\n            <span class=\"preview-detail-value\">\n              <span class=\"no-data\">Niedostępne</span>\n            </span>\n          `;\n          \n          const priceDifferenceSection = document.querySelector('.price-difference-section');\n          if (priceDifferenceSection) {\n            priceDifferenceSection.parentNode.insertBefore(priceTrendRow, priceDifferenceSection);\n          } else {\n            previewDetails.appendChild(priceTrendRow);\n          }\n        }\n      } else {\n        const priceTrendElement = document.getElementById('previewPriceTrend');\n        if (priceTrendElement) {\n          priceTrendElement.innerHTML = '<span class=\"no-data\">Niedostępne</span>';\n        }\n      }\n    } else {\n      if (priceTrendRow) {\n        priceTrendRow.style.display = 'none';\n      }\n    }\n\n    currentChartProductId = product.id;\n    const historySection = document.querySelector('.price-history-section');\n    const chartContainer = document.querySelector('.price-chart-container');\n    \n    if (chartContainer) {\n      chartContainer.innerHTML = '<div class=\"price-chart-loading\"></div>';\n      \n      if (historySection) {\n        historySection.style.display = 'block';\n      }\n      \n      const canvas = document.createElement('canvas');\n      canvas.id = 'priceHistoryChart';\n      chartContainer.appendChild(canvas);\n      \n      setTimeout(async () => {\n        try {\n          await renderPriceHistoryChart(product.id);\n        } catch (error) {\n          logEvent('Błąd renderowania wykresu:', error);\n          if (chartContainer) {\n            chartContainer.innerHTML = '<div class=\"error-message\">Błąd generowania wykresu</div>';\n          }\n        }\n      }, 100);\n    }\n\n    const productPreviewModal = document.getElementById('productPreviewModal');\n    if (productPreviewModal) {\n      productPreviewModal.classList.add('show');\n      \n      const handlePreviewKeyDown = function(e) {\n        if (e.key === 'Escape') {\n          closeProductPreview();\n        }\n      };\n      document.addEventListener('keydown', handlePreviewKeyDown);\n      \n      setTimeout(() => {\n        const modalContent = productPreviewModal.querySelector('.modal-content');\n        const scrollBtn = productPreviewModal.querySelector('.modal-scroll-to-top');\n        if (modalContent) modalContent.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n      }, 100);\n    }\n\n  } catch (error) {\n    logEvent('Błąd w openProductPreview:', error);\n    showNotification('Błąd podczas otwierania podglądu produktu', 'danger');\n  }\n}\nfunction savePriceTrendCache(productName, trend) {\n    if (trend === null) {\n        if (priceTrendCache[productName]) {\n            delete priceTrendCache[productName];\n            localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n        }\n        return;\n    }\n    \n    priceTrendCache[productName] = {\n        trend: trend,\n        timestamp: Date.now()\n    };\n    localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n}\nasync function updateProductPreviewPriceTrend(productName, retryCount = 0) {\n  if (!priceTrendAllow) {\n    const trendElement = document.getElementById('previewPriceTrend');\n    if (trendElement) {\n      trendElement.innerHTML = '<span class=\"no-data\">Niedostępne</span>';\n    }\n    return;\n  }\n  const maxRetries = 2;\n  const retryDelay = 10000;\n\n  try {\n    const trend = await fetchCardmarketPriceTrend(productName);\n    const trendElement = document.getElementById('previewPriceTrend');\n    \n    if (!trendElement) return;\n\n    if (trend) {\n      trendElement.innerHTML = `<span class=\"price-trend-value\">${trend}</span>`;\n    } else {\n      if (retryCount < maxRetries) {\n        trendElement.innerHTML = `<div class=\"loading-trend\">Ponawianie... (${retryCount + 1}/${maxRetries})</div>`;\n        setTimeout(() => {\n          updateProductPreviewPriceTrend(productName, retryCount + 1);\n        }, retryDelay);\n      } else {\n        trendElement.innerHTML = '<span class=\"no-data\">Brak danych po wielu próbach</span>';\n      }\n    }\n  } catch (error) {\n    const trendElement = document.getElementById('previewPriceTrend');\n    \n    if (trendElement) {\n      if (retryCount < maxRetries) {\n        trendElement.innerHTML = `<div class=\"loading-trend\">Błąd, ponawianie... (${retryCount + 1}/${maxRetries})</div>`;\n        setTimeout(() => {\n          updateProductPreviewPriceTrend(productName, retryCount + 1);\n        }, retryDelay);\n      } else {\n        trendElement.innerHTML = '<span class=\"no-data\">Błąd pobierania</span>';\n      }\n    }\n  }\n}\n\nfunction isPriceTrendCacheValid(productName) {\n    const cached = priceTrendCache[productName];\n    if (!cached) return false;\n    \n    const now = Date.now();\n    return (now - cached.timestamp) < PRICE_TREND_CACHE_DURATION;\n}\nasync function fetchCardmarketPriceTrend(productName) {\n\tif (!priceTrendAllow) {\n\treturn null;\n\t}\n    if (isPriceTrendCacheValid(productName)) {\n        return priceTrendCache[productName].trend;\n    }\n\n    try {        \n        const searchUrl = await searchCardmarketForProduct(productName);\n        if (!searchUrl) {\n            logEvent('Nie udało się utworzyć URL wyszukiwania');\n            savePriceTrendCache(productName, null);\n            return null;\n        }\n                \n        const priceTrend = await extractPriceTrendFromPage(searchUrl);\n        \n        if (priceTrend) {\n            logEvent('Znaleziono Price Trend:', priceTrend);\n            savePriceTrendCache(productName, priceTrend);\n        } else {\n            savePriceTrendCache(productName, null);\n        }\n        \n        return priceTrend;\n        \n    } catch (error) {\n        savePriceTrendCache(productName, null);\n        return null;\n    }\n}\nasync function searchCardmarketForProduct(productName) {\n  try {\n    let sanitized = productName.replace(/[^A-Za-z0-9ĄąĆćĘęŁłŃńÓóŚśŹźŻż\\s]/g, ' ');\n    sanitized = sanitized.replace(/\\s+/g, ' ').trim();\n    \n    sanitized = sanitized.replace(/\\s*(Holo|Reverse|Foil|Rare|Common|Uncommon|Secret|Ultra|GX|EX|V|VMAX|VSTAR)$/gi, '').trim();\n    \n    const exactSearchString = `[${sanitized}]`;\n    const formattedName = encodeURIComponent(exactSearchString)\n      .replace(/%20/g, '+')\n      .replace(/'/g, '%27');\n    \n    const searchUrl = `https://www.cardmarket.com/en/Pokemon/Products/Search?searchString=${formattedName}&mode=gallery`;\n    \n    return searchUrl;\n  } catch (error) {\n    return null;\n  }\n}\nasync function extractPriceTrendFromPage(searchUrl) {\n  try {\n    const proxies = [\n      `https://api.allorigins.win/get?url=${encodeURIComponent(searchUrl)}`,\n      `https://corsproxy.io/?${encodeURIComponent(searchUrl)}`,\n      `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(searchUrl)}`\n    ];\n    \n    for (const proxyUrl of proxies) {\n      try {\n        const response = await fetch(proxyUrl, {\n          method: 'GET',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n            'Accept-Language': 'en-US,en;q=0.5',\n            'Cache-Control': 'no-cache',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n          }\n        });\n        \n        if (!response.ok) {\n          continue;\n        }\n        \n        let htmlContent;\n        \n        if (proxyUrl.includes('api.allorigins.win')) {\n          const data = await response.json();\n          htmlContent = data.contents;\n        } else {\n          htmlContent = await response.text();\n        }\n        \n        if (!htmlContent) {\n          logEvent('Brak zawartości HTML');\n          continue;\n        }\n                \n        const parser = new DOMParser();\n        const doc = parser.parseFromString(htmlContent, 'text/html');\n        \n        \n        const priceTrendElements = Array.from(doc.querySelectorAll('*')).filter(el => \n          el.textContent && el.textContent.trim() === 'Price Trend'\n        );\n                \n        for (const element of priceTrendElements) {\n          let nextElement = element.nextElementSibling;\n          while (nextElement) {\n            const text = nextElement.textContent.trim();\n            if (text && (text.includes('€') || text.includes('$') || text.includes('£') || /\\d+[,.]\\d+/.test(text))) {\n              return text;\n            }\n            nextElement = nextElement.nextElementSibling;\n          }\n        }\n        \n        const priceSelectors = [\n          '.price-trend',\n          '.trend-price',\n          '[class*=\"price\"]',\n          '[class*=\"trend\"]',\n          '.col-6.col-xl-7 span',\n          '.row .col-6:last-child span'\n        ];\n        \n        for (const selector of priceSelectors) {\n          const elements = doc.querySelectorAll(selector);\n          for (const element of elements) {\n            const text = element.textContent.trim();\n            if (text && (text.includes('€') || text.includes('$') || text.includes('£')) && /\\d+[,.]\\d+/.test(text)) {\n              logEvent('Znaleziono cenę przez selektor:', selector, text);\n              return text;\n            }\n          }\n        }\n        \n        const dtElements = doc.querySelectorAll('dt');\n        for (const dt of dtElements) {\n          if (dt.textContent.trim() === 'Price Trend') {\n            const dd = dt.nextElementSibling;\n            if (dd && dd.tagName === 'DD') {\n              const priceElement = dd.querySelector('span') || dd;\n              const priceText = priceElement.textContent.trim();\n              if (priceText) {\n                return priceText;\n              }\n            }\n          }\n        }\n        \n        const dataElements = doc.querySelectorAll('[data-price], [data-trend]');\n        for (const element of dataElements) {\n          const price = element.getAttribute('data-price') || element.getAttribute('data-trend');\n          if (price) {\n            return price + ' €';\n          }\n        }\n        \n      } catch (proxyError) {\n      }\n    }\n    \n    return null;\n    \n  } catch (error) {\n    return null;\n  }\n}\nasync function fetchPriceTrendAlternative(productName) {\n  try {\n    const apiKey = 'twój_api_key';\n    const apiUrl = `https://api.scraperapi.com/?api_key=${apiKey}&url=https://www.cardmarket.com/en/Pokemon/Products/Search&query=${encodeURIComponent(productName)}`;\n    const response = await fetch(apiUrl);\n    const html = await response.text();\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    const firstProduct = doc.querySelector('.product-row');\n    if (firstProduct) {\n      const priceTrend = firstProduct.querySelector('.price-trend');\n      if (priceTrend) {\n        return priceTrend.textContent.trim();\n      }\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n}\nasync function refreshGoldBuybackPrice() {\n  const productPreview = document.querySelector('#productPreviewModal.show');\n  if (!productPreview) return;\n  const productName = document.getElementById('previewProductName').textContent;\n  const product = products.find(p => p.name === productName);\n  if (product && product.category === 'Złoto') {\n    const result = await calculateGoldBuybackPrice(product, true);\n    document.getElementById('previewGoldBuybackValue').innerHTML = `\n      <div>${result.buybackPrice.toFixed(2).replace('.', ',')} zł</div>\n      <div style=\"font-size: 0.8em; color: #666; margin-top: 5px;\">\n        ${result.rateInfo}<br>\n        Kurs USD/PLN: ${result.usdRate.toFixed(4)}\n        <br><em>(ręcznie odświeżone)</em>\n        <button onclick=\"refreshGoldBuybackPrice()\" style=\"margin-top: 5px; padding: 2px 5px; font-size: 0.7em;\">\n          <i class=\"fas fa-sync-alt\"></i> Odśwież teraz\n        </button>\n      </div>\n    `;\n  }\n}\nfunction closeProductPreview() {\n  logEvent('Podgląd produktu został zamknięty');\n  document.getElementById('productPreviewModal').classList.remove('show');\n  document.removeEventListener('keydown', handlePreviewKeyDown);\n  stopGoldBuybackAutoRefresh();\n}\nfunction handlePreviewKeyDown(e) {\n  if (e.key === 'Escape') {\n    closeProductPreview();\n  }\n}\nasync function deletePricePoint(pointId) {\n    if (pointId == null) return;\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    try {\n        const db = await priceHistory.dbPromise;\n        const tx = db.transaction('price_history', 'readwrite');\n        const store = tx.objectStore('price_history');\n        let actualId = pointId;\n        if (typeof pointId === 'string' && pointId.startsWith('temp-')) {\n            actualId = pointId.slice('temp-'.length);\n        }\n        if (typeof actualId === 'string' && !isNaN(Number(actualId))) {\n            actualId = Number(actualId);\n        }\n        await store.delete(actualId);\n        await tx.done;\n        const overlay = document.querySelector('.point-details-overlay');\n        if (overlay) document.body.removeChild(overlay);\n        if (window.pricePoints && Array.isArray(window.pricePoints)) {\n            window.pricePoints = window.pricePoints.filter(p => p.id !== actualId);\n        }\n        const prod = products.find(p => p.id === currentChartProductId);\n        if (prod && Array.isArray(prod.priceHistory)) {\n            prod.priceHistory = prod.priceHistory.filter(p => p.id !== actualId);\n        }\n        await renderPriceHistoryChart(currentChartProductId);\n        showNotification('Punkt został usunięty', 'success');\n\t\tplayNotificationSound('success');\n    } catch (error) {\n        showNotification('Błąd usuwania punktu', 'danger');\n    } finally {\n        loader.reset();\n    }\n}\nfunction showPointDetails(point) {\n    if (!point.id) {\n        point.id = `temp-${generateUniqueId()}`;\n    }\n    const date = new Date(point.date);\n    const formattedDate = date.toLocaleString('pl-PL', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n    const rate = point.exchangeRate || exchangeRates[point.currency];\n    const plnValue = point.price * rate;\n    const overlay = document.createElement('div');\n    overlay.className = 'point-details-overlay';\n    const detailsContainer = document.createElement('div');\n    detailsContainer.className = 'point-details';\n    detailsContainer.innerHTML = `\n        <div class=\"point-details-content\">\n            <button class=\"close-details\">&times;</button>\n            <h4>Szczegóły punktu</h4>\n            <div class=\"point-info\">\n                <div><strong>Data:</strong> ${formattedDate}</div>\n                <div><strong>Cena:</strong> ${point.price} ${point.currency}</div>\n                <div><strong>Kurs z dnia:</strong> 1 ${point.currency} = ${rate} PLN</div>\n                <div><strong>Wartość w PLN:</strong> ${plnValue.toFixed(2)} zł</div>\n            </div>\n            <button class=\"btn-danger delete-point-btn\">\n                <i class=\"fas fa-trash\"></i> Usuń punkt\n            </button>\n        </div>\n    `;\n    overlay.appendChild(detailsContainer);\n    document.body.appendChild(overlay);\n    const closeBtn = detailsContainer.querySelector('.close-details');\n    closeBtn.addEventListener('click', () => {\n        document.body.removeChild(overlay);\n    });\n    overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n            document.body.removeChild(overlay);\n        }\n    });\n    document.addEventListener('keydown', handlePreviewKeyDown);\n    function handlePreviewKeyDown(e) {\n        if (e.key === 'Escape') {\n            document.body.removeChild(overlay);\n        }\n    }\n    const deleteBtn = detailsContainer.querySelector('.delete-point-btn');\n    deleteBtn.addEventListener('click', () => {\n        deletePricePoint(point.id);\n        document.body.removeChild(overlay);\n    });\n}\nfunction init3DCardEffect() {\n  const cardContainer = document.getElementById('card3dContainer');\n  if (!cardContainer) return;\n  const card = cardContainer.querySelector('.card');\n  let isInteracting = false;\n  function updateCardPosition(localX, localY) {\n    const w = cardContainer.clientWidth;\n    const h = cardContainer.clientHeight;\n    const centerX = w / 2;\n    const centerY = h / 2;\n    const rotateY = -(localX - centerX) / 10;\n    const rotateX = -(centerY - localY) / 10;\n    card.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n  }\n  cardContainer.addEventListener('mousemove', e => {\n    isInteracting = true;\n    const rect = cardContainer.getBoundingClientRect();\n    updateCardPosition(e.clientX - rect.left, e.clientY - rect.top);\n  });\n  cardContainer.addEventListener('mouseleave', () => {\n    isInteracting = false;\n    card.style.transform = 'none';\n  });\n  cardContainer.addEventListener('touchstart', e => {\n    e.preventDefault();\n    isInteracting = true;\n    const t = e.touches[0];\n    const rect = cardContainer.getBoundingClientRect();\n    updateCardPosition(t.clientX - rect.left, t.clientY - rect.top);\n  }, { passive: false });\n  cardContainer.addEventListener('touchmove', e => {\n    if (!isInteracting) return;\n    e.preventDefault();\n    const t = e.touches[0];\n    const rect = cardContainer.getBoundingClientRect();\n    updateCardPosition(t.clientX - rect.left, t.clientY - rect.top);\n  }, { passive: false });\n  cardContainer.addEventListener('touchend', () => {\n    isInteracting = false;\n    card.style.transform = 'none';\n  });\n}\nfunction closeProductPreview() {\n  logEvent('Podgląd produktu został zamknięty');\n  document.getElementById('productPreviewModal').classList.remove('show');\n  document.removeEventListener('keydown', handlePreviewKeyDown);\n}\nfunction sortProducts() {\n  currentSort = document.getElementById('sortSelect').value;\n  productsCurrentPage = 1;\n  renderProducts(applyAllFilters());\n}\nfunction cleanupGalleryDuplicates() {\n    const uniqueGalleryImages = removeDuplicatesWithGitHubPriority(galleryImages);\n    galleryImages.length = 0;\n    galleryImages.push(...uniqueGalleryImages);\n    const uniqueBackgroundImages = removeDuplicatesWithGitHubPriority(backgroundImages);\n    backgroundImages.length = 0;\n    backgroundImages.push(...uniqueBackgroundImages);\n    saveGallery();\n    saveBackgrounds();\n    renderGallery();\n    renderBackgrounds();\n    showNotification('Usunięto duplikaty w galeriach z priorytetem dla GitHub', 'success');\n}\nfunction isFromGitHub(image) {\n    return image.source === 'github';\n}\nasync function exportData() {\n    logEvent('Rozpoczęcie eksportu danych');\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    try {\n        const zip = new JSZip();\n        \n        const settings = {\n            version: 6,\n            paginationConfig: paginationConfig,\n            selectedBackground: selectedBackgroundId,\n            darkMode: darkMode,\n            soundPermission: soundPermissionGiven,\n            soundAllowed: soundAllowed,\n            currentFilter: currentFilter,\n            currentSort: currentSort,\n            currentSearch: currentSearch,\n            productsCurrentPage: productsCurrentPage,\n            categoriesCurrentPage: categoriesCurrentPage,\n            effectsCurrentPage: effectsCurrentPage,\n            shopsCurrentPage: shopsCurrentPage,\n            currenciesCurrentPage: currenciesCurrentPage,\n            logsCurrentPage: logsCurrentPage,\n            galleryCurrentPage: galleryCurrentPage,\n            backgroundCurrentPage: backgroundCurrentPage,\n            currencyConfig: currencyConfig,\n            visibilitySettings: {\n                showControlsPanel: showControlsPanel,\n                showHamburgerOnDesktop: showHamburgerOnDesktop,\n                showInstructionButton: showInstructionButton,\n                showStatisticsSection: showStatisticsSection,\n                showNotifications: showNotifications,\n                showAdvancedButtons: showAdvancedButtons\n            },\n            appearanceSettings: {\n                panelOpacity: localStorage.getItem('panelOpacity') || 1,\n                backgroundBlur: localStorage.getItem('backgroundBlur') || 0,\n                darkenEffect: localStorage.getItem('darkenEffect') || 0,\n                borderRadius: localStorage.getItem('borderRadius') || 10,\n                borderWidth: localStorage.getItem('borderWidth') || 1,\n                borderColor: localStorage.getItem('borderColor') || '#d1d9e2',\n                customColors: JSON.parse(localStorage.getItem('customColors')) || null,\n                appFont: localStorage.getItem('appFont') || '',\n                animationsEnabled: localStorage.getItem('animationsEnabled') !== 'false'\n            },\n            priceTrendCache: priceTrendCache,\n            exportDate: new Date().toISOString()\n        };\n        zip.file('settings.json', JSON.stringify(settings, null, 2));\n        loader.update(20);\n\n        const productsForExport = products.map(p => {\n            const productCopy = {...p};\n            \n            if (productCopy.image) {\n                const galleryImage = galleryImages.find(img => img.data === productCopy.image && img.source === 'github');\n                if (galleryImage) {\n                    productCopy.imageGitHubName = galleryImage.name;\n                    productCopy.imageSource = 'github';\n                    delete productCopy.image;\n                }\n            }\n            \n            delete productCopy.editing;\n            if (productCopy.image && !productCopy.imageId) {\n            } else if (productCopy.imageId && !productCopy.image) {\n                delete productCopy.image;\n            }\n            return productCopy;\n        });\n        \n        const productsData = JSON.stringify({\n            version: 4,\n            products: productsForExport\n        }, null, 2);\n        zip.file('products.json', productsData);\n\n        const userCategories = filterUserData(categories, defaultCategories, 'name');\n        const categoriesData = JSON.stringify(userCategories, null, 2);\n        zip.file('categories.json', categoriesData);\n\n        const exchangeData = JSON.stringify({\n            rates: exchangeRates,\n            symbols: currencySymbols\n        }, null, 2);\n        zip.file('exchange.json', exchangeData);\n\n        const userShops = shops.filter(shop => \n            !(shop.source === 'github' || (shop.id && !shop.id.toString().startsWith('local')))\n        );\n        const shopsData = JSON.stringify(userShops, null, 2);\n        zip.file('shops.json', shopsData);\n\n        const userEffects = filterUserData(effects, defaultEffects);\n        const effectsData = JSON.stringify(userEffects, null, 2);\n        zip.file('effects.json', effectsData);\n\n        const logsData = JSON.stringify(eventLogs, null, 2);\n        zip.file('logs.json', logsData);\n\n        loader.update(30);\n\n        const allPriceHistory = [];\n        for (const product of products) {\n            try {\n                const history = await priceHistory.getPriceHistory(product.id);\n                allPriceHistory.push({\n                    productId: product.id,\n                    history: history.map(item => ({\n                        date: item.date,\n                        price: item.price,\n                        currency: item.currency,\n                        exchangeRate: item.exchangeRate,\n                        needsHistoricalUpdate: item.needsHistoricalUpdate\n                    }))\n                });\n            } catch (error) {\n            }\n        }\n        zip.file('price_history.json', JSON.stringify(allPriceHistory, null, 2));\n\n        loader.update(40);\n\n        const priceTrendCacheData = JSON.stringify({\n            priceTrendCache: priceTrendCache,\n            cacheExportDate: new Date().toISOString(),\n            cacheEntries: Object.keys(priceTrendCache).length\n        }, null, 2);\n        zip.file('price_trend_cache.json', priceTrendCacheData);\n\n        const imgFolder = zip.folder('images');\n        \n        const productImgFolder = imgFolder.folder('products');\n        for (const product of products) {\n            if (product.image) {\n                const isFromGitHub = galleryImages.some(img => \n                    img.data === product.image && img.source === 'github'\n                );\n                \n                if (!isFromGitHub) {\n                    try {\n                        const base64Data = product.image.split(',')[1];\n                        const fileName = `${product.id}.png`;\n                        productImgFolder.file(fileName, base64Data, {base64: true});\n                    } catch (error) {\n                    }\n                }\n            }\n        }\n\n        loader.update(60);\n\n        const galleryFolder = imgFolder.folder('gallery');\n        const userGalleryImages = galleryImages.filter(img => \n            !img.source || img.source !== 'github'\n        );\n        const uniqueGalleryImages = removeDuplicatesWithGitHubPriority(userGalleryImages);\n        for (const img of uniqueGalleryImages) {\n            try {\n                const base64Data = img.data.split(',')[1];\n                const fileName = `${img.name}.png`;\n                galleryFolder.file(fileName, base64Data, {base64: true});\n                logEvent(`Eksportowano obraz galerii: \"${img.name}\"`);\n            } catch (error) {\n                logEvent('Błąd eksportu obrazu galerii:', img.name, error);\n            }\n        }\n\n        loader.update(80);\n\n        const backgroundFolder = imgFolder.folder('backgrounds');\n        const userBackgroundImages = backgroundImages.filter(bg => \n            !bg.source || bg.source !== 'github'\n        );\n        const uniqueBackgroundImages = removeDuplicatesWithGitHubPriority(userBackgroundImages);\n        for (const bg of uniqueBackgroundImages) {\n            try {\n                const base64Data = bg.data.split(',')[1];\n                const fileName = `${bg.name}.png`;\n                backgroundFolder.file(fileName, base64Data, {base64: true});\n                logEvent(`Eksportowano tło: \"${bg.name}\"`);\n            } catch (error) {\n                logEvent('Błąd eksportu tła:', bg.name, error);\n            }\n        }\n\n        const selectionState = {\n            selectedProducts: selectedProducts,\n            selectedGalleryImages: selectedGalleryImages,\n            selectedBackgroundImages: selectedBackgroundImages,\n            selectedBackgroundId: selectedBackgroundId,\n            selectionMode: selectionMode,\n            gallerySelectionMode: gallerySelectionMode,\n            backgroundSelectionMode: backgroundSelectionMode\n        };\n        zip.file('selection_state.json', JSON.stringify(selectionState, null, 2));\n\n        loader.update(90);\n\n        const content = await zip.generateAsync({ type: 'blob' });\n        const fileName = `collection_export_${new Date().toISOString().replace(/:/g, 'H').replace('T', '_').split('.')[0]}.zip`;\n        \n        if (typeof Android !== 'undefined') {\n            const reader = new FileReader();\n            reader.onload = function() {\n                const base64Data = reader.result.split(',')[1];\n                Android.saveExportFile(fileName, base64Data);\n            };\n            reader.readAsDataURL(content);\n        } else {\n            const url = URL.createObjectURL(content);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = fileName;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n        }\n\n        loader.complete();\n        setTimeout(() => {\n            loader.reset();\n            showNotification('Eksport zakończony pomyślnie', 'success');\n            playNotificationSound('success');\n        }, 500);\n        \n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd eksportu danych: ' + error.message, 'danger');\n    }\n}\nasync function getAllPriceHistory() {\n    const db = await priceHistory.dbPromise;\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction('price_history', 'readonly');\n        const store = tx.objectStore('price_history');\n        const request = store.getAll();\n        request.onsuccess = () => {\n            const data = request.result || [];\n            resolve(data);\n        };\n        request.onerror = () => {\n            reject('Błąd pobierania historii cen');\n        };\n    });\n}\nasync function importData() {\n    logEvent('Rozpoczęcie importu danych');\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    \n    try {\n        if (typeof Android !== 'undefined' && typeof Android.openFileSelector === 'function') {\n            Android.openFileSelector();\n        } else if (typeof importDataFromAndroid === 'function') {\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = '.zip';\n            input.onchange = async function(event) {\n                await processImportFile(event.target.files[0]);\n            };\n            input.click();\n        } else {\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = '.zip';\n            input.onchange = async function(event) {\n                await processImportFile(event.target.files[0]);\n            };\n            input.click();\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd importu danych: ' + error.message, 'danger');\n    }\n}\nfunction initSearch() {\n  const searchInput = document.getElementById('searchInput');\n  if (searchInput) {\n    searchInput.addEventListener('input', function() {\n      searchProducts();\n    });\n  }\n}\nfunction setDarkMode(enabled) {\n    darkMode = enabled;\n    document.body.classList.toggle('dark-mode', darkMode);\n    localStorage.setItem('darkMode', darkMode);\n    \n    if (darkMode) {\n        darkModeIcon.className = 'fas fa-sun';\n    } else {\n        darkModeIcon.className = 'fas fa-moon';\n    }\n    \n    const darkModeToggleSetting = document.getElementById('darkModeToggleSetting');\n    if (darkModeToggleSetting) {\n        darkModeToggleSetting.checked = darkMode;\n    }\n}\nfunction initDarkModeSetting() {\n    const darkModeToggleSetting = document.getElementById('darkModeToggleSetting');\n    if (darkModeToggleSetting) {\n        darkModeToggleSetting.checked = darkMode;\n        darkModeToggleSetting.addEventListener('change', function() {\n            setDarkMode(this.checked);\n        });\n    }\n}\n\nasync function importPriceHistory(historyData) {\n    const db = await priceHistory.dbPromise;\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction('price_history', 'readwrite');\n        const store = tx.objectStore('price_history');\n        const clearRequest = store.clear();\n        clearRequest.onsuccess = () => {\n            const requests = historyData.map(entry => store.add(entry));\n            Promise.all(requests)\n                .then(() => resolve())\n                .catch(error => reject(error));\n        };\n        clearRequest.onerror = (e) => reject(e.target.error);\n    });\n}\ndocument.getElementById('category').addEventListener('change', function() {\n  const effectField = document.getElementById('effectField');\n  const conditionField = document.getElementById('conditionField');\n  const languageField = document.getElementById('languageField');\n  const currentPriceGroup = document.getElementById('currentPriceGroup');\n  const quantityLabel = document.querySelector('label[for=\"quantity\"]');\n  \n  const conditionSelect = document.getElementById('condition');\n  const languageSelect = document.getElementById('language');\n\n  if (this.value === 'Singles') {\n    effectField.style.display = 'block';\n    conditionField.style.display = 'block';\n    if (conditionSelect) conditionSelect.required = true;\n  } else {\n    effectField.style.display = 'none';\n    conditionField.style.display = 'none';\n    if (conditionSelect) conditionSelect.required = false;\n  }\n  \n  if (!['Złoto', 'Akcesoria', 'Inne'].includes(this.value)) {\n    languageField.style.display = 'block';\n    if (languageSelect) languageSelect.required = true;\n  } else {\n    languageField.style.display = 'none';\n    if (languageSelect) languageSelect.required = false;\n  }\n  \n  if (this.value === 'Złoto') {\n    if (currentPriceGroup) currentPriceGroup.style.display = 'none';\n    if (quantityLabel) quantityLabel.textContent = 'Ilość (gram)';\n  } else {\n    if (currentPriceGroup) currentPriceGroup.style.display = 'block';\n    if (quantityLabel) quantityLabel.textContent = 'Ilość';\n  }\n});\nfunction searchProducts() {\n  currentSearch = document.getElementById('searchInput').value.trim();\n  productsCurrentPage = 1;\n  renderProducts(applyAllFilters());\n}\nfunction startDailyPriceUpdate() {\n    addDailyPricePoints();\n    setInterval(addDailyPricePoints, 24 * 60 * 60 * 1000);\n}\nfunction clearSearch() {\n  currentSearch = '';\n  document.getElementById('searchInput').value = '';\n  productsCurrentPage = 1;\n  renderProducts(applyAllFilters());\n  showNotification('Wyszukiwanie wyczyszczone', 'info');\n}\nfunction openExchangeModal() {\n  if (!document.getElementById('currenciesPagination')) {\n    const paginationDiv = document.createElement('div');\n    paginationDiv.id = 'currenciesPagination';\n    paginationDiv.className = 'pagination-container';\n    document.querySelector('.modal-content').appendChild(paginationDiv);\n  }\n  \n  currenciesCurrentPage = 1;\n  renderExchangeRates();\n  document.getElementById('exchangeModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('exchangeModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction renderCurrenciesPagination(totalItems) {\n    const paginationContainer = document.getElementById('currenciesPagination');\n    if (!paginationContainer) return;\n    \n    paginationContainer.innerHTML = '';\n    const totalPages = Math.ceil(totalItems / paginationConfig.currenciesPerPage);\n\n    const prevBtn = document.createElement('button');\n    prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\"></i>';\n    prevBtn.disabled = currenciesCurrentPage === 1;\n    prevBtn.addEventListener('click', () => {\n        if (currenciesCurrentPage > 1) {\n            currenciesCurrentPage--;\n            renderExchangeRates();\n        }\n    });\n\n    const nextBtn = document.createElement('button');\n    nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\"></i>';\n    nextBtn.disabled = currenciesCurrentPage === totalPages;\n    nextBtn.addEventListener('click', () => {\n        if (currenciesCurrentPage < totalPages) {\n            currenciesCurrentPage++;\n            renderExchangeRates();\n        }\n    });\n\n    const pageInfo = document.createElement('span');\n    pageInfo.textContent = `Strona ${currenciesCurrentPage} z ${totalPages}`;\n\n    paginationContainer.appendChild(prevBtn);\n    paginationContainer.appendChild(pageInfo);\n    paginationContainer.appendChild(nextBtn);\n}\nfunction createCurrencyItem(code, isBase = false) {\n    const currencyItem = document.createElement('div');\n    currencyItem.className = 'exchange-rate-item';\n    \n    const isNbpCurrency = code !== 'PLN';\n    \n    currencyItem.innerHTML = `\n        <label>1 ${code} =</label>\n        <div class=\"exchange-input-wrapper\">\n            <input type=\"number\" step=\"0.0001\" id=\"${code}\" value=\"${exchangeRates[code]}\" \n                placeholder=\"Wartość w PLN\" required ${isBase || isNbpCurrency ? 'readonly' : ''}>\n            <span>zł</span>\n        </div>\n        ${!isBase && !isNbpCurrency ? `\n        <div class=\"currency-actions\">\n            <button class=\"btn-info\" onclick=\"openCurrencyEdit('${code}')\" title=\"Edytuj walutę\">\n                <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn-danger\" onclick=\"deleteCurrency('${code}')\" title=\"Usuń walutę\">\n                <i class=\"fas fa-trash-alt\"></i>\n            </button>\n        </div>\n        ` : `\n        <div class=\"currency-actions\">\n            <span class=\"nbp-badge\" title=\"Waluta z NBP - nieedytowalna\">NBP</span>\n        </div>\n        `}\n    `;\n    \n    return currencyItem;\n}\nfunction renderExchangeRates() {\n    const container = document.getElementById('customCurrencies');\n    container.innerHTML = '';\n    \n    const baseCurrencies = ['PLN', 'USD', 'EUR'];\n    const nbpCurrencies = Object.keys(exchangeRates)\n        .filter(c => c !== 'PLN' && c !== 'USD' && c !== 'EUR' && c !== 'lastUpdated')\n        .sort();\n\n    const allCurrencies = [...baseCurrencies, ...nbpCurrencies];\n    const startIndex = (currenciesCurrentPage - 1) * paginationConfig.currenciesPerPage;\n    const endIndex = Math.min(startIndex + paginationConfig.currenciesPerPage, allCurrencies.length);\n    \n    allCurrencies.slice(startIndex, endIndex).forEach(code => {\n        const currencyItem = createCurrencyItem(code, true);\n        container.appendChild(currencyItem);\n    });\n    \n    renderCurrenciesPagination(allCurrencies.length);\n    addPaginationInfo();\n}\nfunction updateNextUpdateTime() {\n\tconst nextUpdateInfo = document.getElementById('nextUpdateInfo');\n\tif (!nextUpdateInfo) return;\n\tconst lastUpdated = new Date(exchangeRates.lastUpdated);\n\tconst nextUpdate = new Date(lastUpdated.getTime() + 3600000);\n\tnextUpdateInfo.innerHTML = `\n\t\tOstatnia aktualizacja: ${lastUpdated.toLocaleString('pl-PL')}<br>\n\t\tNastępna aktualizacja: ${nextUpdate.toLocaleString('pl-PL')}\n\t`;\n}\nfunction closeExchangeModal() {\n  logEvent('Modal kursów walut został zamknięty');\n  document.getElementById('exchangeModal').classList.remove('show');\n}\nfunction deleteCurrency(code) {\n    logEvent(`Próba usunięcia waluty: ${code}`);\n    const baseCurrencies = ['PLN', 'USD', 'EUR'];\n    const nbpCurrencies = Object.keys(exchangeRates)\n        .filter(c => c !== 'PLN' && c !== 'USD' && c !== 'EUR' && c !== 'lastUpdated');\n    \n    if (baseCurrencies.includes(code) || nbpCurrencies.includes(code)) {\n        showNotification('Nie można usunąć waluty ' + code + ' (dostarczana przez NBP)', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    \n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć walutę ${code}?`,\n        function(confirmed) {\n            if (confirmed) {\n                delete exchangeRates[code];\n                delete currencySymbols[code];\n                saveExchangeRates();\n                updateCurrencySelects();\n                openExchangeModal();\n                showNotification(`Usunięto walutę ${code}`, 'success');\n                playNotificationSound('success');\n            }\n        }\n    );\n    \n    if (confirmed) {\n        logEvent(`Usunięto walutę: ${code}`);\n    }\n}\nfunction addNewCurrency() {\n    const code = document.getElementById('newCurrencyCode').value.trim().toUpperCase();\n    logEvent(`Dodawanie nowej waluty: ${code}`);\n\tconst symbol = document.getElementById('newCurrencySymbol').value.trim();\n\tif (!code || code.length !== 3) {\n\t\tshowNotification('Kod waluty musi składać się z 3 liter', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tif (exchangeRates[code]) {\n\t\tshowNotification('Waluta o tym kodzie już istnieje', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tif (!symbol) {\n\t\tshowNotification('Symbol waluty jest wymagany', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\texchangeRates[code] = 1.0;\n\tcurrencySymbols[code] = symbol;\n\tupdateCurrencySelects();\n\tdocument.getElementById('newCurrencyCode').value = '';\n\tdocument.getElementById('newCurrencySymbol').value = '';\n\tsaveExchangeRates();\n\tshowNotification(`Dodano walutę ${code} (${symbol})`, 'success');\n\tplayNotificationSound('success');\n\topenExchangeModal();\n}\nfunction updateCurrencySelects() {\n  const selects = [\n    document.getElementById('currency'),\n    document.getElementById('currentCurrency')\n  ];\n  selects.forEach(select => {\n    if (!select) return;\n    const currentValue = select.value;\n    select.innerHTML = '';\n    for (const [code, symbol] of Object.entries(currencySymbols)) {\n      const option = document.createElement('option');\n      option.value = code;\n      option.textContent = `${code} (${symbol})`;\n      select.appendChild(option);\n    }\n    if (currencySymbols[currentValue]) {\n      select.value = currentValue;\n    } else if (currencySymbols['PLN']) {\n      select.value = 'PLN';\n    }\n  });\n}\nfunction populateConditionAndLanguageSelects() {\n    const conditionSelect = document.getElementById('condition');\n    const languageSelect = document.getElementById('language');\n    \n    if (conditionSelect) {\n        conditionSelect.innerHTML = '<option value=\"\">Wybierz stan karty</option>';\n        CARD_CONDITIONS.forEach(condition => {\n            const option = document.createElement('option');\n            option.value = condition;\n            option.textContent = condition;\n            conditionSelect.appendChild(option);\n        });\n    }\n    \n    if (languageSelect) {\n        languageSelect.innerHTML = '<option value=\"\">Wybierz język</option>';\n        LANGUAGES.forEach(language => {\n            const option = document.createElement('option');\n            option.value = language;\n            option.textContent = language;\n            languageSelect.appendChild(option);\n        });\n    }\n}\nfunction fillEffectSelect() {\n    const effectSelect = document.getElementById('effect');\n    if (!effectSelect) return;\n    \n    const currentValue = effectSelect.value;\n    effectSelect.innerHTML = '<option value=\"\">Wybierz efekt</option>';\n    \n    effects.forEach(effect => {\n        const option = document.createElement('option');\n        option.value = effect;\n        option.textContent = effect;\n        effectSelect.appendChild(option);\n    });\n    \n    if (effects.includes(currentValue)) {\n        effectSelect.value = currentValue;\n    }\n}\ndocument.getElementById('exchangeForm').addEventListener('submit', async function(e) {\n    e.preventDefault();\n    const oldRates = {...exchangeRates};\n    const customInputs = document.querySelectorAll('#customCurrencies input');\n    customInputs.forEach(input => {\n        const code = input.id;\n        exchangeRates[code] = parseFloat(input.value);\n    });\n    saveExchangeRates();\n    let ratesChanged = false;\n    customInputs.forEach(input => {\n        const code = input.id;\n        if (oldRates[code] !== exchangeRates[code]) {\n            ratesChanged = true;\n        }\n    });\n    if (ratesChanged) {\n        setTimeout(async () => {\n            await checkAndUpdatePriceHistoryOnRateChange();\n            if (document.getElementById('productPreviewModal').classList.contains('show') && currentChartProductId) {\n                await renderPriceHistoryChart(currentChartProductId);\n            }\n        }, 1000);\n    }\n    closeExchangeModal();\n\tlogEvent('Zaktualizowano kursy walut');\n    showNotification('Kursy walut zostały zaktualizowane', 'success');\n    playNotificationSound('success');\n    updateSummary();\n    renderProducts(applyAllFilters());\n});\nfunction startExchangeRateMonitoring() {\n    setInterval(async () => {\n        await checkAndUpdatePriceHistoryOnRateChange();\n    }, 3600000);\n}\ndocument.getElementById('year').addEventListener('change', function() {\n\tconst year = parseInt(this.value);\n\tconst currentYear = new Date().getFullYear();\n\tif (isNaN(year)) {\n\t\tthis.setCustomValidity('Rok musi być liczbą');\n\t} else if (year < 2000 || year > currentYear + 1) {\n\t\tthis.setCustomValidity(`Rok musi być między 2000 a ${currentYear + 1}`);\n\t} else {\n\t\tthis.setCustomValidity('');\n\t}\n});\nfunction openInstructionModal() {\n    logEvent('Modal instrukcji został otwarty');\n    document.getElementById('instructionModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('instructionModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeInstructionModal() {\n  logEvent('Modal instrukcji został zamknięty');\n  document.getElementById('instructionModal').classList.remove('show');\n}\nfunction selectProducts() {\n    logEvent('Włączanie trybu selekcji produktów');\n\tselectionMode = true;\n\tselectionControls.style.display = 'flex';\n\tselectedProducts = [];\n\trenderProducts(applyAllFilters());\n}\nfunction toggleProductSelection(index, selected) {\n    const productName = products[index].name;\n    logEvent(`${selected ? 'Zaznaczono' : 'Odznaczono'} produkt: ${productName}`);\n\tif (selected) {\n\t\tselectedProducts.push(index);\n\t} else {\n\t\tconst idx = selectedProducts.indexOf(index);\n\t\tif (idx > -1) {\n\t\t\tselectedProducts.splice(idx, 1);\n\t\t}\n\t}\n}\nfunction deleteSelected() {\n    logEvent(`Próba usunięcia ${selectedProducts.length} zaznaczonych produktów`);\n\tif (selectedProducts.length === 0) {\n\t\tshowNotification('Nie zaznaczono żadnych produktów', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tshowConfirmation(\n\t\t'Potwierdzenie usunięcia',\n\t\t`Czy na pewno chcesz usunąć ${selectedProducts.length} zaznaczonych produktów?`,\n\t\tfunction(confirmed) {\n\t\t\tif (confirmed) {\n\t\t\t\tselectedProducts.sort((a, b) => b - a);\n\t\t\t\tselectedProducts.forEach(index => {\n\t\t\t\t\tproducts.splice(index, 1);\n\t\t\t\t});\n\t\t\t\tsaveProducts();\n\t\t\t\tcancelSelection();\n\t\t\t\tshowNotification(`Usunięto ${selectedProducts.length} produktów`, 'success');\n\t\t\t\tplayNotificationSound('success');\n\t\t\t}\n\t\t}\n\t);\n    if (confirmed) {\n        logEvent(`Usunięto ${selectedProducts.length} zaznaczonych produktów`);\n    }\n}\nfunction cancelSelection() {\n  logEvent('Tryb selekcji produktów został wyłączony');\n\tselectionMode = false;\n\tselectionControls.style.display = 'none';\n\tselectedProducts = [];\n\trenderProducts(applyAllFilters());\n}\nfunction calculateCategoryEfficiency() {\n  const now = new Date();\n  const efficiencyData = {};\n  categories.forEach(category => {\n    const catName = category.name;\n    const catProducts = products.filter(p => p.category === catName);\n    if (catProducts.length === 0) return;\n    let totalPurchase = 0;\n    let totalCurrent = 0;\n    let totalDays = 0;\n    let totalProfit = 0;\n    let totalLoss = 0;\n    let productsWithPrice = 0;\n    catProducts.forEach(p => {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      totalPurchase += p.quantity * purchasePLN;\n      if (p.currentPrice !== null && p.currentPrice !== undefined) {\n        const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n        totalCurrent += p.quantity * currentPLN;\n        const diff = (currentPLN - purchasePLN) * p.quantity;\n        if (diff > 0) totalProfit += diff;\n        else if (diff < 0) totalLoss += Math.abs(diff);\n        productsWithPrice++;\n      }\n      const addedDate = new Date(p.dateAdded);\n      const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n      totalDays += daysInStorage;\n    });\n    const diff = totalCurrent - totalPurchase;\n    const diffPercent = totalPurchase > 0 ? (diff / totalPurchase) * 100 : 0;\n    const avgDays = totalDays / catProducts.length;\n    const roi = totalPurchase > 0 ? (diff / totalPurchase) * 100 : 0;\n    efficiencyData[catName] = {\n      totalPurchase,\n      totalCurrent,\n      diff,\n      diffPercent,\n      avgDays,\n      roi,\n      productCount: catProducts.length,\n      productsWithPrice,\n      profit: totalProfit,\n      loss: totalLoss\n    };\n  });\n  return efficiencyData;\n}\nfunction calculateRiskMetrics() {\n    const targetCurrency = currencyConfig.extendedStatsCurrency;\n    \n    let maxLoss = 0;\n    products.forEach(p => {\n        const purchasePLN = convertToPLN(p.price, p.currency);\n        const currentPLN = p.currentPrice ? \n            convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : purchasePLN;\n        const potentialLoss = (purchasePLN - currentPLN) * p.quantity;\n        if (potentialLoss > maxLoss) maxLoss = potentialLoss;\n    });\n\n    const avgReturn = parseFloat(profitPercentage.textContent);\n    const riskFreeRate = 0.05;\n    const volatility = 15;\n    const sharpeRatio = ((avgReturn - riskFreeRate) / volatility).toFixed(2);\n\n    const convertedMaxLoss = convertToCurrency(maxLoss, 'PLN', targetCurrency);\n    \n    document.getElementById('varValue').textContent = formatCurrency(convertedMaxLoss, targetCurrency, true, 'extendedStats');\n    document.getElementById('sharpeRatio').textContent = sharpeRatio;\n    \n    renderDensityChart();\n}\n\nfunction calculateLiquidityMetrics() {\n  const now = new Date();\n  let totalDays = 0;\n  products.forEach(p => {\n    const addedDate = new Date(p.dateAdded);\n    const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n    totalDays += daysInStorage;\n  });\n  const avgDays = products.length > 0 ? Math.floor(totalDays / products.length) : 0;\n  document.getElementById('avgStorageTime').textContent = avgDays + ' dni';\n  const inventoryTurnover = avgDays > 0 ? (365 / avgDays).toFixed(1) : 0;\n  document.getElementById('inventoryTurnover').textContent = inventoryTurnover;\n  renderLiquidityHeatmap();\n}\nfunction renderAdvancedVisualizations() {\n  renderSankeyChart();\n  renderRadarChart();\n  renderTreemap();\n}\nfunction calculatePortfolioMetrics() {\n  let hhi = 0;\n  const categoryValues = {};\n  let totalValue = 0;\n  categories.forEach(cat => {\n    const catProducts = products.filter(p => p.category === cat.name);\n    const catValue = catProducts.reduce((sum, p) => {\n      const currentPLN = p.currentPrice ? \n        convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n        convertToPLN(p.price, p.currency);\n      return sum + (currentPLN * p.quantity);\n    }, 0);\n    categoryValues[cat.name] = catValue;\n    totalValue += catValue;\n  });\n  for (const cat in categoryValues) {\n    const marketShare = (categoryValues[cat] / totalValue) * 100;\n    hhi += marketShare * marketShare;\n  }\n  document.getElementById('diversificationIndex').textContent = hhi.toFixed(0);\n  renderEfficientFrontier();\n}\nfunction calculateForecasts() {\n  const growthRates = [];\n  const now = new Date();\n  products.forEach(p => {\n    if (p.priceHistory && p.priceHistory.length > 1) {\n      const firstPrice = convertToPLN(p.priceHistory[0].price, p.priceHistory[0].currency);\n      const lastPrice = convertToPLN(p.priceHistory[p.priceHistory.length - 1].price, \n                                    p.priceHistory[p.priceHistory.length - 1].currency);\n      const months = (new Date(p.priceHistory[p.priceHistory.length - 1].date) - \n                     new Date(p.priceHistory[0].date)) / (1000 * 60 * 60 * 24 * 30);\n      if (months > 0) {\n        const monthlyGrowth = Math.pow(lastPrice / firstPrice, 1/months) - 1;\n        growthRates.push(monthlyGrowth);\n      }\n    }\n  });\n  const avgGrowth = growthRates.length > 0 ? \n    growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length : \n    0.01;\n  const currentValue = parseFloat(document.getElementById('currentValue').textContent.replace(' zł', '').replace(',', ''));\n  const sixMonthForecast = currentValue * Math.pow(1 + avgGrowth, 6);\n  document.getElementById('sixMonthForecast').textContent = sixMonthForecast.toFixed(2).replace('.', ',') + ' zł';\n  renderForecastChart(avgGrowth);\n}\nfunction generateCorrelationMatrix() {\n  const matrixContainer = document.getElementById('correlationMatrix');\n  matrixContainer.innerHTML = '';\n  const categoriesList = categories.map(c => c.name);\n  const matrix = [];\n  categoriesList.forEach((cat1, i) => {\n    matrix[i] = [];\n    categoriesList.forEach((cat2, j) => {\n      if (i === j) {\n        matrix[i][j] = 1.0;\n      } else {\n        matrix[i][j] = (Math.random() * 2 - 1).toFixed(2);\n      }\n    });\n  });\n  const headerRow = document.createElement('div');\n  headerRow.className = 'matrix-row';\n  headerRow.innerHTML = '<div class=\"matrix-cell\"></div>';\n  categoriesList.forEach(cat => {\n    headerRow.innerHTML += `<div class=\"matrix-cell header\">${cat}</div>`;\n  });\n  matrixContainer.appendChild(headerRow);\n  categoriesList.forEach((cat1, i) => {\n    const row = document.createElement('div');\n    row.className = 'matrix-row';\n    row.innerHTML = `<div class=\"matrix-cell header\">${cat1}</div>`;\n    categoriesList.forEach((cat2, j) => {\n      const correlation = matrix[i][j];\n      const absValue = Math.abs(correlation);\n      const hue = correlation > 0 ? 120 : 0;\n      const lightness = 90 - (absValue * 40);\n      const bgColor = `hsl(${hue}, 80%, ${lightness}%)`;\n      row.innerHTML += `\n        <div class=\"matrix-cell\" style=\"background-color: ${bgColor};\">\n          ${correlation}\n        </div>\n      `;\n    });\n    matrixContainer.appendChild(row);\n  });\n}\nfunction renderDensityChart() {\n  const ctx = document.getElementById('densityChart').getContext('2d');\n  const returns = [];\n  products.forEach(p => {\n    if (p.currentPrice) {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n      const returnRate = ((currentPLN - purchasePLN) / purchasePLN) * 100;\n      returns.push(returnRate);\n    }\n  });\n  const bins = {};\n  returns.forEach(ret => {\n    const bin = Math.floor(ret / 10) * 10;\n    bins[bin] = (bins[bin] || 0) + 1;\n  });\n  const labels = [];\n  const data = [];\n  for (let i = -50; i <= 100; i += 10) {\n    labels.push(`${i}% - ${i+10}%`);\n    data.push(bins[i] || 0);\n  }\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Liczba produktów',\n        data: data,\n        backgroundColor: 'rgba(77, 182, 172, 0.7)'\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        title: {\n          display: true,\n          text: 'Rozkład stóp zwrotu'\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Liczba produktów'\n          }\n        },\n        x: {\n          title: {\n            display: true,\n            text: 'Stopa zwrotu'\n          }\n        }\n      }\n    }\n  });\n}\nfunction renderLiquidityHeatmap() {\n  const ctx = document.getElementById('liquidityHeatmap').getContext('2d');\n  const now = new Date();\n  const liquidityData = [];\n  products.forEach(p => {\n    const addedDate = new Date(p.dateAdded);\n    const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n    const currentPLN = p.currentPrice ? \n      convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n      convertToPLN(p.price, p.currency);\n    const value = currentPLN * p.quantity;\n    \n    liquidityData.push({\n      x: daysInStorage,\n      y: value,\n      r: Math.log(value + 1) * 2\n    });\n  });\n  new Chart(ctx, {\n    type: 'bubble',\n    data: {\n      datasets: [{\n        label: 'Płynność produktów',\n        data: liquidityData,\n        backgroundColor: 'rgba(77, 182, 172, 0.6)'\n      }]\n    },\n    options: {\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: 'Czas magazynowania (dni)'\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: 'Wartość produktu (zł)'\n          }\n        }\n      }\n    }\n  });\n}\nfunction renderSankeyChart() {\n  const ctx = document.getElementById('sankeyChart').getContext('2d');\n  const categoryProfit = {};\n  const categoryLoss = {};\n  products.forEach(p => {\n    if (p.currentPrice) {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n      const diff = (currentPLN - purchasePLN) * p.quantity;\n      if (diff > 0) {\n        categoryProfit[p.category] = (categoryProfit[p.category] || 0) + diff;\n      } else {\n        categoryLoss[p.category] = (categoryLoss[p.category] || 0) + Math.abs(diff);\n      }\n    }\n  });\n  const nodes = [];\n  const links = [];\n  Object.keys(categoryProfit).forEach(category => {\n    nodes.push({name: category});\n  });\n  nodes.push({name: 'Zysk'});\n  nodes.push({name: 'Strata'});\n  Object.keys(categoryProfit).forEach(category => {\n    const categoryIndex = nodes.findIndex(n => n.name === category);\n    const profitIndex = nodes.findIndex(n => n.name === 'Zysk');\n    \n    links.push({\n      source: categoryIndex,\n      target: profitIndex,\n      value: categoryProfit[category]\n    });\n  });\n  \n  Object.keys(categoryLoss).forEach(category => {\n    const categoryIndex = nodes.findIndex(n => n.name === category);\n    const lossIndex = nodes.findIndex(n => n.name === 'Strata');\n    \n    links.push({\n      source: categoryIndex,\n      target: lossIndex,\n      value: categoryLoss[category]\n    });\n  });\n  new Chart(ctx, {\n    type: 'sankey',\n    data: {\n      datasets: [{\n        data: nodes,\n        links: links,\n        colorFrom: (c) => getCategoryColor(nodes[c.dataset.data[c.dataIndex].name].name).bg,\n        colorTo: (c) => getCategoryColor(nodes[c.dataset.data[c.dataIndex].name].name).bg,\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        title: {\n          display: true,\n          text: 'Przepływ wartości między kategoriami'\n        }\n      }\n    }\n  });\n}\nfunction renderRadarChart() {\n  const ctx = document.getElementById('radarChart').getContext('2d');\n  \n  new Chart(ctx, {\n    type: 'radar',\n    data: {\n      labels: ['Rentowność', 'Płynność', 'Ryzyko', 'Dywersyfikacja', 'Wzrost'],\n      datasets: [{\n        label: 'Parametry portfela',\n        data: [85, 70, 45, 65, 75],\n        fill: true,\n        backgroundColor: 'rgba(77, 182, 172, 0.2)',\n        borderColor: 'rgb(77, 182, 172)',\n        pointBackgroundColor: 'rgb(77, 182, 172)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgb(77, 182, 172)'\n      }]\n    },\n    options: {\n      scales: {\n        r: {\n          angleLines: {\n            display: true\n          },\n          suggestedMin: 0,\n          suggestedMax: 100\n        }\n      }\n    }\n  });\n}\nfunction renderTreemap() {\n  const ctx = document.getElementById('treemapCanvas').getContext('2d');\n  const treeData = {\n    name: 'Magazyn',\n    value: parseFloat(document.getElementById('currentValue').textContent.replace(' zł', '').replace(',', '')),\n    children: []\n  };\n  categories.forEach(category => {\n    const categoryProducts = products.filter(p => p.category === category.name);\n    const categoryValue = categoryProducts.reduce((sum, p) => {\n      const currentPLN = p.currentPrice ? \n        convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n        convertToPLN(p.price, p.currency);\n      return sum + (currentPLN * p.quantity);\n    }, 0);\n    \n    if (categoryValue > 0) {\n      const categoryNode = {\n        name: category.name,\n        value: categoryValue,\n        children: []\n      };\n      categoryProducts.forEach(p => {\n        const currentPLN = p.currentPrice ? \n          convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n          convertToPLN(p.price, p.currency);\n        const productValue = currentPLN * p.quantity;\n        \n        if (productValue > categoryValue * 0.05) {\n          categoryNode.children.push({\n            name: p.name,\n            value: productValue\n          });\n        }\n      });\n      \n      treeData.children.push(categoryNode);\n    }\n  });\n  new Chart(ctx, {\n    type: 'treemap',\n    data: {\n      datasets: [{\n        tree: treeData,\n        key: 'value',\n        labels: {\n          display: true,\n          formatter: (ctx) => ctx.raw.name\n        },\n        backgroundColor: (ctx) => {\n          if (ctx.type === 'data') {\n            return getCategoryColor(ctx.raw.name).bg || '#4DB6AC';\n          }\n          return '#f0f0f0';\n        },\n        color: (ctx) => {\n          if (ctx.type === 'data') {\n            return getCategoryColor(ctx.raw.name).text || '#333';\n          }\n          return '#333';\n        },\n        font: {\n          size: (ctx) => ctx.type === 'data' ? 12 : 14\n        }\n      }]\n    },\n    options: {\n      plugins: {\n        title: {\n          display: true,\n          text: 'Struktura wartości produktów'\n        },\n        tooltip: {\n          callbacks: {\n            title: (items) => items[0].raw.name,\n            label: (item) => `Wartość: ${item.raw.value.toFixed(2)} zł`\n          }\n        }\n      }\n    }\n  });\n}\nfunction renderEfficientFrontier() {\n  const ctx = document.getElementById('efficientFrontierChart').getContext('2d');\n  const portfolios = [];\n  for (let i = 0; i < 20; i++) {\n    portfolios.push({\n      risk: (Math.random() * 15 + 5).toFixed(2),\n      return: (Math.random() * 10 + 5).toFixed(2)\n    });\n  }\n  \n  portfolios.sort((a, b) => a.risk - b.risk);\n  \n  new Chart(ctx, {\n    type: 'scatter',\n    data: {\n      datasets: [{\n        label: 'Portfele',\n        data: portfolios,\n        backgroundColor: 'rgba(77, 182, 172, 0.6)'\n      }, {\n        label: 'Efektywna granica',\n        data: portfolios.filter((p, i) => i % 3 === 0),\n        type: 'line',\n        borderColor: '#FF9800',\n        backgroundColor: 'rgba(255, 152, 0, 0.2)',\n        fill: true,\n        pointRadius: 0\n      }]\n    },\n    options: {\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: 'Ryzyko (%)'\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: 'Oczekiwany zwrot (%)'\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction renderForecastChart() {\n  const ctx = document.getElementById('forecastChart').getContext('2d');\n  const currentValue = parseFloat(document.getElementById('currentValue').textContent);\n\n  const months = ['Bieżący', 'M1', 'M2', 'M3', 'M4', 'M5', 'M6'];\n  const forecastData = [currentValue];\n  \n  for (let i = 1; i < 7; i++) {\n    forecastData.push(forecastData[i-1] * (1 + (0.05 + Math.random() * 0.05)));\n  }\n  \n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: months,\n      datasets: [{\n        label: 'Prognozowana wartość',\n        data: forecastData,\n        borderColor: '#4DB6AC',\n        backgroundColor: 'rgba(77, 182, 172, 0.1)',\n        borderWidth: 3,\n        tension: 0.3,\n        fill: true\n      }]\n    },\n    options: {\n      scales: {\n        y: {\n          title: {\n            display: true,\n            text: 'Wartość (zł)'\n          }\n        }\n      }\n    }\n  });\n}\nasync function runMonteCarlo() {\n    const targetCurrency = currencyConfig.extendedStatsCurrency;\n    \n    const resultsContainer = document.getElementById('monteCarloResults');\n    resultsContainer.innerHTML = '<div class=\"simulation-loading\"><i class=\"fas fa-spinner fa-spin\"></i> Trwa symulacja...</div>';\n\n    try {\n        const returns = [];\n        const now = new Date();\n        const historyPromises = products.map(p => priceHistory.getPriceHistory(p.id));\n        const allHistories = await Promise.all(historyPromises);\n        \n        for (let i = 0; i < products.length; i++) {\n            const history = allHistories[i];\n            if (history.length < 2) continue;\n            \n            const firstEntry = history[0];\n            const lastEntry = history[history.length - 1];\n            const firstDate = new Date(firstEntry.date);\n            const lastDate = new Date(lastEntry.date);\n            const yearsDiff = (lastDate - firstDate) / (1000 * 60 * 60 * 24 * 365.25);\n            \n            if (yearsDiff < 0.08) continue;\n            \n            const firstPrice = convertToPLN(firstEntry.price, firstEntry.currency);\n            const lastPrice = convertToPLN(lastEntry.price, lastEntry.currency);\n            \n            if (firstPrice <= 0 || lastPrice <= 0) continue;\n            if (firstDate > lastDate) continue;\n            \n            const logReturn = Math.log(lastPrice / firstPrice);\n            const annualReturn = logReturn / yearsDiff;\n            \n            if (Math.abs(annualReturn) < 1) {\n                returns.push(annualReturn);\n            }\n        }\n        \n        let avgReturn = 0.05;\n        let stdDev = 0.15;\n        \n        if (returns.length > 0) {\n            returns.sort((a, b) => a - b);\n            const trimCount = Math.floor(returns.length * 0.1);\n            const trimmedReturns = returns.slice(trimCount, returns.length - trimCount);\n            \n            avgReturn = trimmedReturns.reduce((sum, r) => sum + r, 0) / trimmedReturns.length;\n            \n            if (trimmedReturns.length > 1) {\n                const squaredDiffs = trimmedReturns.map(r => Math.pow(r - avgReturn, 2));\n                stdDev = Math.sqrt(squaredDiffs.reduce((sum, sd) => sum + sd, 0) / (trimmedReturns.length - 1));\n            }\n            \n            avgReturn = Math.max(Math.min(avgReturn, 0.5), -0.5);\n            stdDev = Math.min(stdDev, 0.5);\n        }\n        \n        const currentValue = parseFloat(\n            document.getElementById('currentValue').textContent\n                .replace(' zł', '')\n                .replace(/\\s/g, '')\n                .replace(',', '.')\n        );\n        \n        const years = [1, 3, 5, 10];\n        let scenariosHTML = '';\n        \n        years.forEach(year => {\n            const simulations = [];\n            for (let i = 0; i < 1000; i++) {\n                let portfolioValue = currentValue;\n                for (let y = 0; y < year; y++) {\n                    const growth = avgReturn + stdDev * gaussianRandom();\n                    portfolioValue *= (1 + growth);\n                }\n                simulations.push(portfolioValue);\n            }\n            simulations.sort((a, b) => a - b);\n            const p10 = simulations[100];\n            const median = simulations[500];\n            const p90 = simulations[900];\n            const convertedP10 = convertToCurrency(p10, 'PLN', targetCurrency);\n            const convertedMedian = convertToCurrency(median, 'PLN', targetCurrency);\n            const convertedP90 = convertToCurrency(p90, 'PLN', targetCurrency);\n            \n            scenariosHTML += `\n                <div class=\"simulation-scenario\">\n                    <span>Po ${year} ${year === 1 ? 'roku' : 'latach'}:</span>\n                    <div class=\"simulation-range\">\n                        <span class=\"value-min\">${formatCurrency(convertedP10, targetCurrency, true, 'extendedStats')}</span>\n                        <span class=\"value-median\">${formatCurrency(convertedMedian, targetCurrency, true, 'extendedStats')}</span>\n                        <span class=\"value-max\">${formatCurrency(convertedP90, targetCurrency, true, 'extendedStats')}</span>\n                    </div>\n                    <div class=\"simulation-bar\">\n                        <div class=\"simulation-range-bar\" style=\"width: 80%; left: 10%;\"></div>\n                    </div>\n                    <div class=\"simulation-labels\">\n                        <span>10%</span>\n                        <span>Mediana</span>\n                        <span>90%</span>\n                    </div>\n                </div>\n            `;\n        });\n        \n        const convertedCurrentValue = convertToCurrency(currentValue, 'PLN', targetCurrency);\n        \n        resultsContainer.innerHTML = `\n            <h4>Symulacja Monte Carlo (${returns.length}/${products.length} produktów)</h4>\n            ${scenariosHTML}\n            <div class=\"simulation-note\">\n                Średni zwrot: ${(avgReturn * 100).toFixed(2)}% | \n                Ryzyko: ${(stdDev * 100).toFixed(2)}% |\n                Wartość początkowa: ${formatCurrency(convertedCurrentValue, targetCurrency, true, 'extendedStats')}\n            </div>\n        `;\n        \n    } catch (error) {\n        resultsContainer.innerHTML = '<div class=\"error\">Błąd podczas symulacji</div>';\n    }\n}\nfunction formatNumber(value) {\n    if (isNaN(value)) return \"0 zł\";\n    if (value < 1000) return value.toFixed(2) + \" zł\";\n    if (value < 1000000) return (value/1000).toFixed(1) + \" tys. zł\";\n    return (value/1000000).toFixed(1) + \" mln zł\";\n}\nfunction gaussianRandom() {\n    let u = 0, v = 0;\n    while(u === 0) u = Math.random();\n    while(v === 0) v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n}\nfunction showExtendedStats() {\n    const modal = document.getElementById('statsModal');\n    const content = document.getElementById('extendedStatsContent');\n    const targetCurrency = currencyConfig.extendedStatsCurrency;\n\n    let totalValue = 0;\n    let purchaseValue = 0;\n    let currentValue = 0;\n    let profitValue = 0;\n    let lossValue = 0;\n    let productsWithCurrentPrice = 0;\n    let profitProducts = 0;\n    let lossProducts = 0;\n    let neutralProducts = 0;\n    const valueByCurrency = {};\n    const valueByYear = {};\n    const valueByCategory = {};\n    const profitDistribution = {\n        highProfit: 0,\n        mediumProfit: 0,\n        lowProfit: 0,\n        noChange: 0,\n        lowLoss: 0,\n        mediumLoss: 0,\n        highLoss: 0\n    };\n\n    products.forEach(p => {\n        const purchasePLN = convertToPLN(p.price, p.currency);\n        const totalPurchase = p.quantity * purchasePLN;\n        const currentPrice = p.currentPrice !== null && p.currentPrice !== undefined ? \n            convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n            purchasePLN;\n        const totalCurrent = p.quantity * currentPrice;\n\n        totalValue += totalCurrent;\n        purchaseValue += totalPurchase;\n        currentValue += totalCurrent;\n\n        if (!valueByCurrency[p.currency]) {\n            valueByCurrency[p.currency] = 0;\n        }\n        valueByCurrency[p.currency] += totalPurchase;\n\n        if (!valueByYear[p.year]) {\n            valueByYear[p.year] = 0;\n        }\n        valueByYear[p.year] += totalPurchase;\n\n        if (!valueByCategory[p.category]) {\n            valueByCategory[p.category] = 0;\n        }\n        valueByCategory[p.category] += totalPurchase;\n\n        if (p.currentPrice !== null && p.currentPrice !== undefined) {\n            productsWithCurrentPrice++;\n            const diff = (currentPrice - purchasePLN) * p.quantity;\n            if (diff > 0) {\n                profitValue += diff;\n                profitProducts++;\n                const profitPercent = (diff / (purchasePLN * p.quantity)) * 100;\n                if (profitPercent > 50) profitDistribution.highProfit++;\n                else if (profitPercent > 20) profitDistribution.mediumProfit++;\n                else profitDistribution.lowProfit++;\n            } else if (diff < 0) {\n                lossValue += Math.abs(diff);\n                lossProducts++;\n                const lossPercent = (Math.abs(diff) / (purchasePLN * p.quantity)) * 100;\n                if (lossPercent > 50) profitDistribution.highLoss++;\n                else if (lossPercent > 20) profitDistribution.mediumLoss++;\n                else profitDistribution.lowLoss++;\n            } else {\n                neutralProducts++;\n                profitDistribution.noChange++;\n            }\n        }\n    });\n\n    const diff = currentValue - purchaseValue;\n\n    const topProfitValue = [];\n    const topLossValue = [];\n    const topProfitPercent = [];\n    const topLossPercent = [];\n\n    products.forEach(p => {\n        if (p.currentPrice !== null && p.currentPrice !== undefined) {\n            const purchasePLN = convertToPLN(p.price, p.currency);\n            const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n            const diff = (currentPLN - purchasePLN) * p.quantity;\n            const diffPercent = purchasePLN > 0 ? ((currentPLN - purchasePLN) / purchasePLN) * 100 : 0;\n\n            if (diff > 0) {\n                topProfitValue.push({...p, diff});\n                topProfitPercent.push({...p, diffPercent});\n            } else if (diff < 0) {\n                topLossValue.push({...p, diff: Math.abs(diff)});\n                topLossPercent.push({...p, diffPercent: Math.abs(diffPercent)});\n            }\n        }\n    });\n\n    topProfitValue.sort((a, b) => b.diff - a.diff).splice(5);\n    topLossValue.sort((a, b) => b.diff - a.diff).splice(5);\n    topProfitPercent.sort((a, b) => b.diffPercent - a.diffPercent).splice(10);\n    topLossPercent.sort((a, b) => b.diffPercent - a.diffPercent).splice(10);\n\n    const productsByCategory = {};\n    products.forEach(p => {\n        productsByCategory[p.category] = (productsByCategory[p.category] || 0) + 1;\n    });\n\n    const now = new Date();\n    let totalDays = 0;\n    const oldestProducts = [];\n    products.forEach(p => {\n        const addedDate = new Date(p.dateAdded);\n        const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n        totalDays += daysInStorage;\n        oldestProducts.push({...p, days: daysInStorage});\n    });\n\n    const avgDays = products.length > 0 ? Math.floor(totalDays / products.length) : 0;\n    const avgYears = (avgDays / 365).toFixed(1);\n\n    let totalPriceRatio = 0;\n    let productsWithPrices = 0;\n    const missingPrices = [];\n    const categoryPrices = {};\n\n    products.forEach(p => {\n        if (p.currentPrice !== null && p.currentPrice !== undefined) {\n            const purchasePLN = convertToPLN(p.price, p.currency);\n            const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n            const ratio = (currentPLN / purchasePLN) * 100;\n            totalPriceRatio += ratio;\n            productsWithPrices++;\n\n            if (!categoryPrices[p.category]) {\n                categoryPrices[p.category] = { totalPurchase: 0, totalCurrent: 0, count: 0 };\n            }\n            categoryPrices[p.category].totalPurchase += purchasePLN;\n            categoryPrices[p.category].totalCurrent += currentPLN;\n            categoryPrices[p.category].count++;\n        } else {\n            missingPrices.push(p);\n        }\n    });\n\n    const avgPriceRatio = productsWithPrices > 0 ? (totalPriceRatio / productsWithPrices).toFixed(1) : 0;\n\n    content.innerHTML = `\n        <div class=\"extended-stats-grid\">\n            <div class=\"currency-info\">\n                <h3><i class=\"fas fa-coins\"></i> Podstawowe informacje</h3>\n                <div class=\"currency-info-item\">\n                    <span>Wartość zakupu produktów:</span>\n                    <span class=\"currency-value\">${formatCurrency(purchaseValue, 'PLN', true, 'extendedStats')}</span>\n                </div>\n                <div class=\"currency-info-item\">\n                    <span>Aktualna wartość całego magazynu:</span>\n                    <span class=\"currency-value\">${formatCurrency(currentValue, 'PLN', true, 'extendedStats')}</span>\n                </div>\n                <div class=\"currency-info-item\">\n                    <span>Różnica wartości między aktualną ceną a tym za ile zakupiłem:</span>\n                    <span class=\"currency-value ${diff > 0 ? 'profit' : diff < 0 ? 'loss' : ''}\">\n                        ${formatCurrency(diff, 'PLN', true, 'extendedStats')}\n                    </span>\n                </div>\n                <div class=\"currency-info-item\">\n                    <span>Ilość produktów:</span>\n                    <span class=\"currency-value\">${products.length}</span>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-tags\"></i> Rozkład wartości według kategorii (${getCurrencySymbol(targetCurrency)})</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"categoryChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-coins\"></i> Rozkład wartości według waluty zakupu</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"currencyChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-calendar-alt\"></i> Wartość według roku (${getCurrencySymbol(targetCurrency)})</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"yearChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-chart-pie\"></i> Rozkład zysków i strat</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"profitLossChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-tags\"></i> Liczba produktów w kategoriach</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"productsByCategoryChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-chart-bar\"></i> Porównanie wartości (${getCurrencySymbol(targetCurrency)})</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"valueComparisonChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <div class=\"avg-storage-header\">\n                    <i class=\"fas fa-clock\"></i> Średni czas w magazynie\n                </div>\n                <div class=\"avg-storage-value\">${avgYears} lat</div>\n                <h4>Najstarsze produkty:</h4>\n                <div class=\"extended-list\" id=\"oldestProducts\">\n                    ${oldestProducts\n                        .sort((a, b) => b.days - a.days)\n                        .slice(0, 5)\n                        .map(p => `\n                            <div class=\"extended-list-item\">\n                                <span class=\"extended-list-name\">${p.name}</span>\n                                <span>${(p.days/365).toFixed(1)} lat</span>\n                            </div>\n                        `).join('')}\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <div class=\"avg-storage-header\">\n                    <i class=\"fas fa-money-bill-wave\"></i> Analiza cen\n                </div>\n                <div class=\"avg-storage-value\">${avgPriceRatio}%</div>\n                <h4>Średnia cena w kategoriach:</h4>\n                <div class=\"extended-list\" id=\"categoryPrices\">\n                    ${Object.entries(categoryPrices)\n                        .map(([category, data]) => {\n                            const avgPurchaseVal = data.totalPurchase / data.count;\n                            const avgCurrentVal = data.totalCurrent / data.count;\n                            const ratio = ((avgCurrentVal / avgPurchaseVal) * 100).toFixed(1);\n                            return `\n                                <div class=\"extended-list-item\">\n                                    <span class=\"extended-list-name\">${category}</span>\n                                    <span>${formatCurrency(avgPurchaseVal, 'PLN', true, 'extendedStats')} → ${formatCurrency(avgCurrentVal, 'PLN', true, 'extendedStats')} (${ratio}%)</span>\n                                </div>\n                            `;\n                        }).join('')}\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <div class=\"avg-storage-header\">\n                    <i class=\"fas fa-exclamation-triangle\"></i> Brakujące ceny\n                </div>\n                <div class=\"extended-stat-value\">${missingPrices.length}</div>\n                <h4>Produkty bez aktualnej ceny:</h4>\n                <div class=\"extended-list\" id=\"missingPricesList\">\n                    ${missingPrices\n                        .slice(0, 5)\n                        .map(p => `\n                            <div class=\"extended-list-item\">\n                                <span class=\"extended-list-name\">${p.name}</span>\n                                <span>${p.category}</span>\n                            </div>\n                        `).join('')}\n                </div>\n            </div>\n\n            <div class=\"table-box\">\n                <h3><i class=\"fas fa-arrow-up\"></i> Największe zyski (wartość)</h3>\n                <table class=\"stat-table\">\n                    <thead>\n                        <tr>\n                            <th>Produkt</th>\n                            <th>Zysk (${getCurrencySymbol(targetCurrency)})</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${topProfitValue.map(p => `\n                            <tr>\n                                <td>${p.name}</td>\n                                <td class=\"profit\">${formatCurrency(p.diff, 'PLN', true, 'extendedStats')}</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n\n            <div class=\"table-box\">\n                <h3><i class=\"fas fa-arrow-down\"></i> Największe straty (wartość)</h3>\n                <table class=\"stat-table\">\n                    <thead>\n                        <tr>\n                            <th>Produkt</th>\n                            <th>Strata (${getCurrencySymbol(targetCurrency)})</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${topLossValue.map(p => `\n                            <tr>\n                                <td>${p.name}</td>\n                                <td class=\"loss\">${formatCurrency(p.diff, 'PLN', true, 'extendedStats')}</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n\n            <div class=\"table-box\">\n                <h3><i class=\"fas fa-percentage\"></i> Największe zyski (%)</h3>\n                <table class=\"stat-table\">\n                    <thead>\n                        <tr>\n                            <th>Produkt</th>\n                            <th>Zysk (%)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${topProfitPercent.map(p => `\n                            <tr>\n                                <td>${p.name}</td>\n                                <td class=\"profit\">+${p.diffPercent.toFixed(2).replace('.', ',')}%</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n\n            <div class=\"table-box\">\n                <h3><i class=\"fas fa-percentage\"></i> Największe straty (%)</h3>\n                <table class=\"stat-table\">\n                    <thead>\n                        <tr>\n                            <th>Produkt</th>\n                            <th>Strata (%)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${topLossPercent.map(p => `\n                            <tr>\n                                <td>${p.name}</td>\n                                <td class=\"loss\">-${p.diffPercent.toFixed(2).replace('.', ',')}%</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    `;\n\n    const categoryEfficiency = calculateCategoryEfficiency();\n    content.innerHTML += `\n        <div class=\"chart-box efficiency-box\" style=\"height:auto;\">\n            <h3 class=\"chart-title\"><i class=\"fas fa-tachometer-alt\"></i> Efektywność kategorii</h3>\n            <div class=\"efficiency-grid\">\n                ${Object.entries(categoryEfficiency).map(([category, data]) => `\n                    <div class=\"efficiency-category\">\n                        <div class=\"efficiency-header\" style=\"background: ${getCategoryColor(category).bg}; color: ${getCategoryColor(category).text}\">\n                            ${category}\n                        </div>\n                        <div class=\"efficiency-stats\">\n                            <div class=\"efficiency-stat\">\n                                <span>Produkty:</span>\n                                <span>${data.productCount}</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>Wartość zakupu:</span>\n                                <span>${formatCurrency(data.totalPurchase, 'PLN', true, 'extendedStats')}</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>Aktualna wartość:</span>\n                                <span>${formatCurrency(data.totalCurrent, 'PLN', true, 'extendedStats')}</span>\n                            </div>\n                            <div class=\"efficiency-stat ${data.diff > 0 ? 'profit' : data.diff < 0 ? 'loss' : ''}\">\n                                <span>Różnica:</span>\n                                <span>${formatCurrency(data.diff, 'PLN', true, 'extendedStats')} (${data.diffPercent.toFixed(2)}%)</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>ROI:</span>\n                                <span>${data.roi.toFixed(2)}%</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>Śr. czas magazynowania:</span>\n                                <span>${(data.avgDays / 365).toFixed(1)} lat</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>Produkty z ceną:</span>\n                                <span>${data.productsWithPrice}/${data.productCount}</span>\n                            </div>\n                            <div class=\"efficiency-stat profit\">\n                                <span>Zysk:</span>\n                                <span>${formatCurrency(data.profit, 'PLN', true, 'extendedStats')}</span>\n                            </div>\n                            <div class=\"efficiency-stat loss\">\n                                <span>Strata:</span>\n                                <span>${formatCurrency(data.loss, 'PLN', true, 'extendedStats')}</span>\n                            </div>\n                        </div>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n\n        <div class=\"stats-section\">\n            <h3><i class=\"fas fa-shield-alt\"></i> Analiza Ryzyka Inwestycji</h3>\n            <div class=\"risk-analysis\">\n                <div class=\"risk-metric\">\n                    <h4>Value at Risk (VaR)</h4>\n                    <div class=\"metric-value\" id=\"varValue\">0 ${getCurrencySymbol(targetCurrency)}</div>\n                    <p>Maksymalna potencjalna strata w ciągu 30 dni</p>\n                </div>\n                <div class=\"risk-metric\">\n                    <h4>Współczynnik Sharpe'a</h4>\n                    <div class=\"metric-value\" id=\"sharpeRatio\">0.0</div>\n                    <p>Stosunek zysku do ryzyka</p>\n                </div>\n                <div class=\"chart-container\">\n                    <canvas id=\"densityChart\"></canvas>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"stats-section\">\n            <h3><i class=\"fas fa-tachometer-alt\"></i> Analiza Płynności</h3>\n            <div class=\"liquidity-metric\">\n                <h4>Średni czas magazynowania</h4>\n                <div class=\"metric-value\" id=\"avgStorageTime\">0 dni</div>\n            </div>\n        </div>\n\n        <div class=\"stats-section\">\n            <h3><i class=\"fas fa-crystal-ball\"></i> Prognozowanie</h3>\n            <div class=\"forecasting\">\n                <div class=\"forecast-metric\">\n                    <h4>Prognozowana wartość za 6 miesięcy</h4>\n                    <div class=\"metric-value\" id=\"sixMonthForecast\">0 ${getCurrencySymbol(targetCurrency)}</div>\n                </div>\n                <div class=\"simulation-controls\">\n                    <button class=\"btn-info\" onclick=\"runMonteCarlo()\">\n                        <i class=\"fas fa-dice\"></i> Uruchom symulację\n                    </button>\n                    <div class=\"simulation-results\" id=\"monteCarloResults\"></div>\n                </div>\n            </div>\n        </div>\n    `;\n\n    modal.classList.add('show');\n    setTimeout(() => {\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n\n    setTimeout(() => {\n        const commonChartOptions = {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'bottom',\n                    labels: {\n                        boxWidth: 12,\n                        font: {\n                            size: 11\n                        },\n                        padding: 15\n                    }\n                }\n            },\n            layout: {\n                padding: {\n                    bottom: 30\n                }\n            }\n        };\n\n        const convertedValueByCategory = {};\n        for (const category in valueByCategory) {\n            convertedValueByCategory[category] = convertToCurrency(valueByCategory[category], 'PLN', targetCurrency);\n        }\n\n        const convertedValueByYear = {};\n        for (const year in valueByYear) {\n            convertedValueByYear[year] = convertToCurrency(valueByYear[year], 'PLN', targetCurrency);\n        }\n\n        const categoryCtx = document.getElementById('categoryChart').getContext('2d');\n        new Chart(categoryCtx, {\n            type: 'doughnut',\n            data: {\n                labels: Object.keys(convertedValueByCategory),\n                datasets: [{\n                    data: Object.values(convertedValueByCategory),\n                    backgroundColor: [\n                        '#4DB6AC', '#FF9800', '#9C27B0', '#2196F3', '#FF5722', '#607D8B', '#795548'\n                    ]\n                }]\n            },\n            options: {\n                ...commonChartOptions,\n                plugins: {\n                    ...commonChartOptions.plugins,\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const value = context.parsed;\n                                const total = Object.values(convertedValueByCategory).reduce((a, b) => a + b, 0);\n                                const percentage = Math.round((value / total) * 100);\n                                return `${context.label}: ${formatCurrency(value, targetCurrency, false, 'extendedStats')} (${percentage}%)`;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        const currencyCtx = document.getElementById('currencyChart').getContext('2d');\n        new Chart(currencyCtx, {\n            type: 'pie',\n            data: {\n                labels: Object.keys(valueByCurrency).map(code => `${code} (${getCurrencySymbol(code)})`),\n                datasets: [{\n                    data: Object.values(valueByCurrency),\n                    backgroundColor: [\n                        '#4DB6AC', '#FF9800', '#9C27B0', '#2196F3', '#FF5722', '#607D8B'\n                    ]\n                }]\n            },\n            options: commonChartOptions\n        });\n\n        const yearCtx = document.getElementById('yearChart').getContext('2d');\n        const years = Object.keys(convertedValueByYear).sort();\n        new Chart(yearCtx, {\n            type: 'bar',\n            data: {\n                labels: years,\n                datasets: [{\n                    label: `Wartość zakupu (${getCurrencySymbol(targetCurrency)})`,\n                    data: years.map(year => convertedValueByYear[year]),\n                    backgroundColor: '#4DB6AC',\n                    borderWidth: 1\n                }]\n            },\n            options: commonChartOptions\n        });\n\n        const profitLossCtx = document.getElementById('profitLossChart').getContext('2d');\n        new Chart(profitLossCtx, {\n            type: 'bar',\n            data: {\n                labels: [\n                    'Wysoki zysk (>50%)', 'Średni zysk (20-50%)', 'Niski zysk (<20%)',\n                    'Bez zmiany',\n                    'Niska strata (<20%)', 'Średnia strata (20-50%)', 'Wysoka strata (>50%)'\n                ],\n                datasets: [{\n                    label: 'Liczba produktów',\n                    data: [\n                        profitDistribution.highProfit,\n                        profitDistribution.mediumProfit,\n                        profitDistribution.lowProfit,\n                        profitDistribution.noChange,\n                        profitDistribution.lowLoss,\n                        profitDistribution.mediumLoss,\n                        profitDistribution.highLoss\n                    ],\n                    backgroundColor: [\n                        '#2E7D32', '#4CAF50', '#81C784',\n                        '#BDBDBD',\n                        '#FF8A65', '#F4511E', '#D32F2F'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                ...commonChartOptions,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        title: {\n                            display: true,\n                            text: 'Liczba produktów'\n                        }\n                    },\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Kategorie zysków i strat'\n                        },\n                        ticks: {\n                            autoSkip: false,\n                            maxRotation: 45,\n                            minRotation: 45\n                        }\n                    }\n                },\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                }\n            }\n        });\n\n        const productsByCategoryCtx = document.getElementById('productsByCategoryChart').getContext('2d');\n        new Chart(productsByCategoryCtx, {\n            type: 'bar',\n            data: {\n                labels: Object.keys(productsByCategory),\n                datasets: [{\n                    label: 'Liczba produktów',\n                    data: Object.values(productsByCategory),\n                    backgroundColor: '#4DB6AC',\n                    borderWidth: 1\n                }]\n            },\n            options: commonChartOptions\n        });\n\n        const convertedPurchaseValue = convertToCurrency(purchaseValue, 'PLN', targetCurrency);\n        const convertedCurrentValue = convertToCurrency(currentValue, 'PLN', targetCurrency);\n        \n        const valueComparisonCtx = document.getElementById('valueComparisonChart').getContext('2d');\n        new Chart(valueComparisonCtx, {\n            type: 'bar',\n            data: {\n                labels: ['Wartość zakupu', 'Aktualna wartość'],\n                datasets: [{\n                    label: `Wartość (${getCurrencySymbol(targetCurrency)})`,\n                    data: [convertedPurchaseValue, convertedCurrentValue],\n                    backgroundColor: [\n                        'rgba(77, 182, 172, 0.7)',\n                        'rgba(255, 152, 0, 0.7)'\n                    ],\n                    borderColor: [\n                        'rgba(77, 182, 172, 1)',\n                        'rgba(255, 152, 0, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: commonChartOptions\n        });\n\n        calculateRiskMetrics();\n        calculateLiquidityMetrics();\n        renderAdvancedVisualizations();\n        calculatePortfolioMetrics();\n        calculateForecasts();\n        generateCorrelationMatrix();\n    }, 100);\n}\nfunction initCategoryChart(data, currency) {\n    const ctx = document.getElementById('categoryChart').getContext('2d');\n    if (!ctx) return;\n\n    new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n            labels: Object.keys(data),\n            datasets: [{\n                data: Object.values(data),\n                backgroundColor: ['#4DB6AC', '#FF9800', '#9C27B0', '#2196F3', '#FF5722', '#607D8B', '#795548']\n            }]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                tooltip: {\n                    callbacks: {\n                        label: (context) => {\n                            return `${context.label}: ${context.parsed.toFixed(2)} ${getCurrencySymbol(currency)}`;\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\nfunction initYearChart(data, currency) {\n    const ctx = document.getElementById('yearChart').getContext('2d');\n    if (!ctx) return;\n\n    const years = Object.keys(data).sort();\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: years,\n            datasets: [{\n                label: `Wartość (${getCurrencySymbol(currency)})`,\n                data: years.map(year => data[year]),\n                backgroundColor: '#4DB6AC'\n            }]\n        },\n        options: {\n            responsive: true,\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: `Wartość (${getCurrencySymbol(currency)})`\n                    }\n                }\n            }\n        }\n    });\n}\nfunction initValueComparisonChart(purchaseVal, currentVal, currency) {\n    const ctx = document.getElementById('valueComparisonChart').getContext('2d');\n    if (!ctx) return;\n\n    const purchaseConverted = convertToCurrency(purchaseVal, 'PLN', currency);\n    const currentConverted = convertToCurrency(currentVal, 'PLN', currency);\n\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: ['Wartość zakupu', 'Aktualna wartość'],\n            datasets: [{\n                label: `Wartość (${getCurrencySymbol(currency)})`,\n                data: [purchaseConverted, currentConverted],\n                backgroundColor: ['#4DB6AC', '#FF9800']\n            }]\n        },\n        options: {\n            responsive: true,\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: `Wartość (${getCurrencySymbol(currency)})`\n                    }\n                }\n            }\n        }\n    });\n}\nfunction getCategoryColor(categoryName) {\n  const category = categories.find(c => c.name === categoryName);\n  return category ? { bg: category.bg, text: category.text } : { bg: '#ededed', text: '#333' };\n}\nasync function initializeExchangeRates() {\n    if (!exchangeRates.lastUpdated) {\n        await fetchExchangeRates();\n    } else {\n        const lastUpdated = new Date(exchangeRates.lastUpdated);\n        const now = new Date();\n        const hoursSinceLastUpdate = (now - lastUpdated) / (1000 * 60 * 60);\n        if (hoursSinceLastUpdate > 1) {\n            await fetchExchangeRates();\n        }\n    }\n    if (!exchangeRates.GOLD) {\n        await fetchGoldPrice();\n    }\n}\ndocument.addEventListener('DOMContentLoaded', function() {\n  soundPermissionGiven = true;\n  soundAllowed = true;\n  localStorage.setItem('soundPermission', 'true');\n  const changeSoundBtn = document.getElementById('changeSoundSettings');\n  if (changeSoundBtn) {\n    changeSoundBtn.onclick = () => {\n      localStorage.removeItem('soundPermission');\n      showSoundPermissionModal();\n    };\n  }\n  startExchangeRateMonitoring();\n  setTimeout(initializeExchangeRates, 2000);\n});\nfunction showSoundPermissionModal() {\n  const savedPermission = localStorage.getItem('soundPermission');\n  if (savedPermission !== null) {\n    soundPermissionGiven = savedPermission === 'true';\n    return;\n  }\n  const modal = document.getElementById('soundPermissionModal');\n  modal.classList.add('show');\n  \n\n  setTimeout(() => {\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n  document.getElementById('soundPermissionAccept').onclick = () => {\n    soundPermissionGiven = true;\n    soundAllowed = true;\n    localStorage.setItem('soundPermission', 'true');\n    modal.classList.remove('show');\n    showNotification('Dźwięki zostały włączone', 'success');\n\tplayNotificationSound('success');\n  };\n  document.getElementById('soundPermissionReject').onclick = () => {\n    soundPermissionGiven = false;\n    soundAllowed = false;\n    localStorage.setItem('soundPermission', 'false');\n    modal.classList.remove('show');\n    showNotification('Dźwięki zostały wyłączone', 'info');\n  };\n  document.getElementById('playSuccessSound').onclick = () => {\n    playDemoSound('success');\n  };\n  document.getElementById('playAlertSound').onclick = () => {\n    playDemoSound('alert');\n  };\n}\nfunction generateNewStatistics() {\n  const now = new Date();\n  let totalDays = 0;\n  const oldestProducts = [];\n  const newestProducts = [];\n  products.forEach(p => {\n    const addedDate = new Date(p.dateAdded);\n    const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n    totalDays += daysInStorage;\n    oldestProducts.push({...p, days: daysInStorage});\n    if (daysInStorage <= 30) {\n      newestProducts.push({...p, days: daysInStorage});\n    }\n  });\n  const avgDays = products.length > 0 ? Math.floor(totalDays / products.length) : 0;\n  const avgYears = (avgDays / 365).toFixed(1);\n  const setTextIfExists = (elementId, text) => {\n    const el = document.getElementById(elementId);\n    if (el) el.textContent = text;\n  };\n  setTextIfExists('avgStorageTime', `${avgYears} lat`);\n  setTextIfExists('recentProducts', newestProducts.length);\n  const heatmap = document.getElementById('activityHeatmap');\n  if (heatmap) {\n    generateActivityHeatmap();\n  }\n  const oldestList = document.getElementById('oldestProducts');\n  if (oldestList) {\n    oldestList.innerHTML = '';\n    oldestProducts.sort((a, b) => b.days - a.days).slice(0, 5).forEach(p => {\n      const years = (p.days / 365).toFixed(1);\n      const item = document.createElement('div');\n      item.className = 'old-product-item';\n      item.innerHTML = `\n        <span class=\"old-product-name\">${p.name}</span>\n        <span class=\"old-product-years\">${years} lat</span>\n      `;\n      oldestList.appendChild(item);\n    });\n  }\n  const newestList = document.getElementById('newestProducts');\n  if (newestList) {\n    newestList.innerHTML = '';\n    newestProducts.slice(0, 5).forEach(p => {\n      const item = document.createElement('div');\n      item.className = 'old-product-item';\n      item.innerHTML = `\n        <span class=\"old-product-name\">${p.name}</span>\n        <span class=\"old-product-years\">${p.days} dni</span>\n      `;\n      newestList.appendChild(item);\n    });\n  }\n  let totalPriceRatio = 0;\n  let productsWithPrices = 0;\n  const missingPrices = [];\n  const categoryPrices = {};\n  products.forEach(p => {\n    if (p.currentPrice !== null && p.currentPrice !== undefined) {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n      const ratio = (currentPLN / purchasePLN) * 100;\n      totalPriceRatio += ratio;\n      productsWithPrices++;\n      if (!categoryPrices[p.category]) {\n        categoryPrices[p.category] = { totalPurchase: 0, totalCurrent: 0, count: 0 };\n      }\n      categoryPrices[p.category].totalPurchase += purchasePLN;\n      categoryPrices[p.category].totalCurrent += currentPLN;\n      categoryPrices[p.category].count++;\n    } else {\n      missingPrices.push(p);\n    }\n  });\n  const avgPriceRatio = productsWithPrices > 0 ? (totalPriceRatio / productsWithPrices).toFixed(1) : 0;\n  setTextIfExists('avgPriceRatio', `${avgPriceRatio}%`);\n  setTextIfExists('missingPricesCount', missingPrices.length);\n  const missingList = document.getElementById('missingPricesList');\n  if (missingList) {\n    missingList.innerHTML = '';\n    missingPrices.slice(0, 10).forEach(p => {\n      const item = document.createElement('div');\n      item.className = 'missing-price-item';\n      item.innerHTML = `\n        <span class=\"missing-price-name\">${p.name}</span>\n        <span class=\"missing-price-category\">${p.category}</span>\n      `;\n      missingList.appendChild(item);\n    });\n  }\n  const categoryList = document.getElementById('categoryPrices');\n  if (categoryList) {\n    categoryList.innerHTML = '';\n    for (const [category, data] of Object.entries(categoryPrices)) {\n      const avgPurchase = data.totalPurchase / data.count;\n      const avgCurrent = data.totalCurrent / data.count;\n      const ratio = ((avgCurrent / avgPurchase) * 100).toFixed(1);\n      \n      const item = document.createElement('div');\n      item.className = 'missing-price-item';\n      item.innerHTML = `\n        <span class=\"missing-price-name\">${category}</span>\n        <span>${formatCurrency(avgPurchase, 'PLN', true, 'extendedStats')} → ${formatCurrency(avgCurrent, 'PLN', true, 'extendedStats')} (${ratio}%)</span>\n      `;\n      categoryList.appendChild(item);\n    }\n  }\n  \n  generateActivityHeatmap();\n}\nfunction generateActivityHeatmap() {\n\tconst heatmap = document.getElementById('activityHeatmap');\n\tif (!heatmap) return; \n\theatmap.innerHTML = '';\n\tconst now = new Date();\n\tconst months = [];\n\tfor (let i = 11; i >= 0; i--) {\n\t\tconst monthDate = new Date(now);\n\t\tmonthDate.setMonth(now.getMonth() - i);\n\t\tmonths.push(monthDate);\n\t}\n\tconst activityData = {};\n\tproducts.forEach(p => {\n\t\tconst addedDate = new Date(p.dateAdded);\n\t\tconst dateKey = addedDate.toISOString().split('T')[0];\n\t\tif (!activityData[dateKey]) {\n\t\t\tactivityData[dateKey] = 0;\n\t\t}\n\t\tactivityData[dateKey]++;\n\t});\n\tmonths.forEach(month => {\n\t\tconst daysInMonth = new Date(month.getFullYear(), month.getMonth() + 1, 0).getDate();\n\t\tconst monthName = month.toLocaleString('pl-PL', { month: 'short' });\n\t\tconst monthHeader = document.createElement('div');\n\t\tmonthHeader.style.gridColumn = 'span 7';\n\t\tmonthHeader.style.textAlign = 'center';\n\t\tmonthHeader.style.fontSize = '0.9rem';\n\t\tmonthHeader.style.marginTop = '0.5rem';\n\t\tmonthHeader.textContent = monthName;\n\t\theatmap.appendChild(monthHeader);\n\t\tconst firstDay = new Date(month.getFullYear(), month.getMonth(), 1).getDay();\n\t\tfor (let i = 0; i < (firstDay === 0 ? 6 : firstDay - 1); i++) {\n\t\t\tconst emptyDay = document.createElement('div');\n\t\t\temptyDay.className = 'heatmap-day';\n\t\t\theatmap.appendChild(emptyDay);\n\t\t}\n\t\tfor (let day = 1; day <= daysInMonth; day++) {\n\t\t\tconst dayDate = new Date(month.getFullYear(), month.getMonth(), day);\n\t\t\tconst dateKey = dayDate.toISOString().split('T')[0];\n\t\t\tconst count = activityData[dateKey] || 0;\n\t\t\tconst dayElement = document.createElement('div');\n\t\t\tdayElement.className = count > 0 ? 'heatmap-day has-data' : 'heatmap-day';\n\t\t\tdayElement.style.opacity = count > 0 ? Math.min(0.3 + (count / 5), 1) : 0.3;\n\t\t\tif (count > 0) {\n\t\t\t\tconst tooltip = document.createElement('div');\n\t\t\t\ttooltip.className = 'heatmap-tooltip';\n\t\t\t\ttooltip.textContent = `${count} produktów - ${dayDate.toLocaleDateString('pl-PL')}`;\n\t\t\t\tdayElement.appendChild(tooltip);\n\t\t\t}\n\t\t\theatmap.appendChild(dayElement);\n\t\t}\n\t});\n}\nfunction closeStatsModal() {\n  logEvent('Modal statystyk został zamknięty');\n  document.getElementById('statsModal').classList.remove('show');\n}\nfunction toggleGallerySelectionMode() {\n    logEvent(`Przełączanie trybu selekcji galerii: ${!gallerySelectionMode ? 'ON' : 'OFF'}`);\n\tif (galleryOpenMode !== 'manage') return;\n\tgallerySelectionMode = !gallerySelectionMode;\n\tdocument.getElementById('gallerySelectionControls').style.display = \n\t\tgallerySelectionMode ? 'flex' : 'none';\n\tdocument.getElementById('gallerySelectBtn').style.display = \n\t\tgallerySelectionMode ? 'none' : 'inline-block';\n\tdocument.getElementById('galleryUploadBtn').style.display = \n\t\tgallerySelectionMode ? 'none' : 'inline-block';\n\tselectedGalleryImages = [];\n\trenderGallery();\n}\nfunction openGalleryImagePreview(index) {\n    const img = galleryImages[index];\n    const imageSrc = img.source === 'github' ? img.url : img.data;\n    document.getElementById('fullPreviewImg').src = imageSrc;\n    document.getElementById('imagePreviewModal').classList.add('show');\n}\nfunction openGallery() {\n    galleryOpenMode = 'manage';\n    gallerySelectionMode = false;\n    selectedGalleryImages = [];\n    galleryCurrentPage = 1;\n    document.getElementById('gallerySelectBtn').style.display = 'inline-block';\n    document.getElementById('galleryUploadBtn').style.display = 'inline-block';\n    document.getElementById('gallerySelectionControls').style.display = 'none';\n    document.getElementById('galleryUploadPanel').style.display = 'none';\n    const uploadBtn = document.getElementById('galleryUploadBtn');\n    uploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj zdjęcia';\n    uploadBtn.className = 'btn-success';\n    \n    if (window.matchMedia(\"(max-width: 768px)\").matches) {\n        const galleryGrid = document.getElementById('galleryContent');\n        galleryGrid.style.maxHeight = 'calc(98vh - 250px)';\n        galleryGrid.style.overflowY = 'auto';\n    }\n    renderGallery();\n    document.getElementById('galleryModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('galleryModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nasync function updateBackgroundsFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    \n    try {\n        const files = await fetchGitHubFiles('images/backgrounds');\n        if (!files) {\n            throw new Error('Brak plików tła na GitHub');\n        }\n        \n        let addedCount = 0;\n        let skippedCount = 0;\n        let errorCount = 0;\n        \n        if (window.isUpdatingBackgrounds) {\n            showNotification('Aktualizacja tła już trwa', 'warning');\n            loader.reset();\n            return;\n        }\n        \n        window.isUpdatingBackgrounds = true;\n        \n        const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.svg'];\n        const imageFiles = files.filter(file => {\n            const fileName = file.name.toLowerCase();\n            return imageExtensions.some(ext => fileName.endsWith(ext));\n        });\n\n        for (let i = 0; i < imageFiles.length; i++) {\n            const file = imageFiles[i];\n            loader.update(10 + (i / imageFiles.length) * 80);\n            \n            let fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n            fileName = fileName.replace(/_/g, ' ');\n            \n            const exists = backgroundImages.some(bg => {\n                const existingName = bg.name.toLowerCase().trim().replace(/\\s+/g, ' ');\n                const newName = fileName.toLowerCase().trim().replace(/\\s+/g, ' ');\n                return existingName === newName && bg.source === 'github';\n            });\n            \n            if (exists) {\n                skippedCount++;\n                continue;\n            }\n            \n            try {\n                backgroundImages.push({\n                    id: generateUniqueId(),\n                    name: fileName,\n                    url: file.download_url,\n                    dateAdded: new Date().toISOString(),\n                    source: 'github'\n                });\n                addedCount++;\n            } catch (fetchError) {\n                errorCount++;\n            }\n        }\n        \n        if (addedCount > 0) {\n            await saveBackgrounds();\n            renderBackgrounds();\n            updateBackgroundCount();\n            playNotificationSound('success');\n        } else if (skippedCount > 0) {\n        } else {\n        }\n        \n        loader.complete();\n        setTimeout(() => {\n            loader.reset();\n            window.isUpdatingBackgrounds = false;\n        }, 500);\n    } catch (error) {\n        loader.reset();\n        window.isUpdatingBackgrounds = false;\n        showNotification('Błąd podczas aktualizacji tła: ' + error.message, 'danger');\n    }\n}\nfunction closeGallery() {\n\tlogEvent('Galeria zdjęć została zamknięta');\n\tcancelGallerySelection();\n\tdocument.getElementById('galleryModal').classList.remove('show');\n\tgallerySelectionMode = false;\n\tselectedGalleryImages = [];\n\tgalleryOpenMode = null;\n\tdocument.getElementById('gallerySelectBtn').style.display = 'inline-block';\n\tdocument.getElementById('galleryUploadBtn').style.display = 'inline-block';\n\tdocument.getElementById('gallerySelectionControls').style.display = 'none';\n\tdocument.getElementById('galleryUploadPanel').style.display = 'none';\n\tconst uploadBtn = document.getElementById('galleryUploadBtn');\n\tuploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj zdjęcia';\n\tuploadBtn.className = 'btn-success';\n\tgallerySearchTerm = '';\n\tdocument.getElementById('gallerySearchInput').value = '';\n}\nfunction openGalleryForSelection() {\n\tselectedImageUrl = null;\n\tgalleryOpenMode = 'selectForProduct';\n\tgallerySelectionMode = false;\n\tselectedGalleryImages = [];\n\tdocument.getElementById('gallerySelectBtn').style.display = 'none';\n\tdocument.getElementById('galleryUploadBtn').style.display = 'none';\n\tdocument.getElementById('gallerySelectionControls').style.display = 'none';\n\trenderGallery(true);\n\tdocument.getElementById('galleryModal').classList.add('show');\n}\nfunction toggleUploadPanel() {\n\tconst panel = document.getElementById('galleryUploadPanel');\n\tconst uploadBtn = document.getElementById('galleryUploadBtn');\n\tlogEvent(`${panel.style.display === 'none' ? 'Otwarto' : 'Zamknięto'} panel uploadu galerii`);\n\tif (panel.style.display === 'none') {\n\t\tpanel.style.display = 'block';\n\t\tuploadBtn.innerHTML = '<i class=\"fas fa-times\"></i> Anuluj dodawanie';\n\t\tuploadBtn.className = 'btn-danger';\n\t\tdocument.getElementById('gallerySelectBtn').style.display = 'none';\n\t} else {\n\t\tpanel.style.display = 'none';\n\t\tuploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj zdjęcia';\n\t\tuploadBtn.className = 'btn-success';\n\t\tdocument.getElementById('gallerySelectBtn').style.display = 'inline-block';\n\t}\n}\nfunction selectGalleryImage(index) {\n    const img = galleryImages[index];\n    logEvent(`Wybrano obraz z galerii: ${img.name}`);\n    showNotification(`Wybrano zdjęcie: ${img.name}`, 'success');\n    \n    if (img.source === 'github') {\n        selectedImageUrl = img.url;\n        selectedImageSource = 'github';\n        selectedImageId = img.id;\n    } else {\n        selectedImageUrl = img.data;\n        selectedImageSource = 'local';\n        selectedImageId = img.id;\n    }\n    \n    if (galleryOpenMode === 'selectForProduct') {\n        if (editingProductIndex !== null) {\n            const previewContainer = document.getElementById(`editImagePreview-${editingProductIndex}`);\n            const previewImg = previewContainer.querySelector('img');\n            previewImg.src = selectedImageUrl;\n            previewContainer.style.display = 'flex';\n            \n            products[editingProductIndex].image = selectedImageUrl;\n            products[editingProductIndex].imageId = selectedImageId;\n            products[editingProductIndex].imageSource = selectedImageSource;\n        } else {\n            document.getElementById('previewImg').src = selectedImageUrl;\n            document.getElementById('imagePreview').style.display = 'flex';\n            document.getElementById('image').value = '';\n        }\n    }\n    closeGallery();\n}\nasync function uploadToGallery() {\n    logEvent(`Rozpoczęto przesyłanie zdjęć do galerii`);\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    try {\n        const input = document.getElementById('galleryUploadInput');\n        if (!input.files || input.files.length === 0) {\n            showNotification('Wybierz przynajmniej jedno zdjęcie', 'warning');\n            loader.reset();\n            return;\n        }\n        const files = Array.from(input.files);\n        const skippedFiles = [];\n        const addedFiles = [];\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            loader.update(10 + (i/files.length)*80);\n            const name = document.getElementById('galleryImageName').value.trim() || file.name.replace(/\\.[^/.]+$/, \"\");\n            if (!isImageNameUnique(name)) {\n                skippedFiles.push(file.name);\n                continue;\n            }\n            const reader = new FileReader();\n            const imageData = await new Promise((resolve) => {\n                reader.onload = function(e) {\n                    resolve(e.target.result);\n                };\n                reader.readAsDataURL(file);\n            });\n            galleryImages.push({\n                id: generateUniqueId(),\n                name: name,\n                data: imageData,\n                dateAdded: new Date().toISOString()\n            });\n            addedFiles.push(name);\n        }\n        if (skippedFiles.length > 0) {\n            const filesList = skippedFiles.join(', ');\n            showNotification(`Pominięto zdjęcia: ${filesList} - nazwa już istnieje`, 'warning', 5000);\n        }\n        if (addedFiles.length > 0) {\n\t\t\tlogEvent(`Dodano ${addedFiles.length} zdjęć do galerii`);\n            showNotification(`Dodano ${addedFiles.length} zdjęć do galerii`, 'success');\n\t\t\tplayNotificationSound('success');\n            await saveGallery();\n            renderGallery();\n        } else {\n            showNotification('Nie dodano żadnych zdjęć', 'info');\n        }\n        input.value = '';\n        document.getElementById('galleryImageName').value = '';\n        document.getElementById('galleryUploadPanel').style.display = 'none';\n        const uploadBtn = document.getElementById('galleryUploadBtn');\n        uploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj zdjęcia';\n        uploadBtn.className = 'btn-success';\n        document.getElementById('gallerySelectBtn').style.display = 'inline-block';\n        updateGalleryCount();\n        loader.complete();\n        setTimeout(() => loader.reset(), 1000);\n    } catch (error) {\n        loader.reset();\n        showNotification(`Błąd podczas przetwarzania zdjęć: ${error.message}`, 'danger');\n    }\n    logEvent(`Dodano ${addedFiles.length} zdjęć do galerii`);\n}\nfunction deleteGalleryImage(index) {\n    const imgName = galleryImages[index].name;\n    logEvent(`Próba usunięcia zdjęcia z galerii: ${imgName}`);\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć zdjęcie \"${imgName}\"? Ta operacja usunie również to zdjęcie z wszystkich produktów, które go używają.`,\n        async function(confirmed) {\n            if (!confirmed) return;\n            const loader = new PokeballLoader('pokeballLoader').start(0);\n            loader.update(30);\n            try {\n                galleryImages.splice(index, 1);\n                loader.update(60);\n                \n                let updatedProducts = 0;\n                products.forEach(product => {\n                    if (product.image === galleryImages[index]?.data || \n                        (product.imageId && product.imageId === galleryImages[index]?.id)) {\n                        delete product.image;\n                        delete product.imageId;\n                        updatedProducts++;\n                    }\n                });\n                await saveGallery();\n                await saveProducts();\n                loader.update(80);\n                renderGallery();\n                renderProducts(applyAllFilters());\n                loader.complete();\n                setTimeout(() => {\n                    loader.reset();\n                    showNotification(`Usunięto zdjęcie i zaktualizowano ${updatedProducts} produktów`, 'success');\n\t\t\t\t\tplayNotificationSound('success');\n                    logEvent(`Usunięto zdjęcie z galerii: ${imgName}`);\n                }, 500);\n                updateGalleryCount();\n            } catch (error) {\n                loader.reset();\n                showNotification('Błąd usuwania zdjęcia: ' + error.message, 'danger');\n            }\n        }\n    );\n}\nfunction requestDeleteGalleryImage(index) {\n    deleteGalleryImage(index);\n}\nasync function deleteSelectedGalleryImages() {\n    if (!selectedGalleryImages.length) {\n        showNotification('Nie zaznaczono żadnych zdjęć', 'warning');\n        return;\n    }\n    const count = selectedGalleryImages.length;\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć ${count} zaznaczonych zdjęć? Ta operacja usunie również te zdjęcia z produktów, które ich używają.`,\n        async function(confirmed) {\n            if (!confirmed) return;\n            const loader = new PokeballLoader('pokeballLoader').start(0);\n            loader.update(10);\n            try {\n                const deletedImages = selectedGalleryImages.map(i => galleryImages[i]);\n                selectedGalleryImages.sort((a, b) => b - a).forEach(i => {\n                    galleryImages.splice(i, 1);\n                });\n                loader.update(30);\n                let updatedProducts = 0;\n                deletedImages.forEach(image => {\n                    products.forEach(product => {\n                        if (product.image === image.data || \n                            (product.imageId && product.imageId === image.id)) {\n                            \n                            delete product.image;\n                            delete product.imageId;\n                            updatedProducts++;\n                        }\n                    });\n                });\n                loader.update(60);\n                await saveGallery();\n                await saveProducts();\n                loader.update(80);\n                selectedGalleryImages = [];\n                galleryCurrentPage = 1;\n                cancelGallerySelection();\n                renderGallery();\n                renderProducts(applyAllFilters());\n                loader.complete();\n                setTimeout(() => {\n                    loader.reset();\n                    showNotification(`Usunięto ${count} zdjęć i zaktualizowano ${updatedProducts} produktów`, 'success');\n\t\t\t\t\tplayNotificationSound('success');\n                }, 500);\n                updateGalleryCount();\n            } catch (error) {\n                loader.reset();\n                showNotification('Błąd usuwania zdjęć: ' + error.message, 'danger');\n            }\n        }\n    );\n}\nfunction cancelGallerySelection() {\n  gallerySelectionMode = false;\n  document.getElementById('gallerySelectionControls').style.display = 'none';\n  document.getElementById('gallerySelectBtn').style.display = 'inline-block';\n  document.getElementById('galleryUploadBtn').style.display = 'inline-block';\n  selectedGalleryImages = [];\n  const counter = document.getElementById('gallerySelectionCounter');\n  if (counter) counter.remove();\n  renderGallery();\n}\nfunction searchGallery() {\n    const term = document.getElementById('gallerySearchInput').value.trim();\n    logEvent(`Wyszukiwanie w galerii: \"${term}\"`);\n  gallerySearchTerm = document.getElementById('gallerySearchInput').value.toLowerCase().trim();\n  galleryCurrentPage = 1;\n  const selectMode = galleryOpenMode === 'selectForProduct';\n  renderGallery(selectMode);\n}\nfunction sortGallery(criteria) {\n\tswitch(criteria) {\n\t\tcase 'name-asc':\n\t\t\tgalleryImages.sort((a, b) => a.name.localeCompare(b.name));\n\t\t\tbreak;\n\t\tcase 'name-desc':\n\t\t\tgalleryImages.sort((a, b) => b.name.localeCompare(a.name));\n\t\t\tbreak;\n\t\tcase 'date-asc':\n\t\t\tgalleryImages.sort((a, b) => new Date(a.dateAdded) - new Date(b.dateAdded));\n\t\t\tbreak;\n\t\tcase 'date-desc':\n\t\t\tgalleryImages.sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded));\n\t\t\tbreak;\n\t\tcase 'size-asc':\n\t\t\tgalleryImages.sort((a, b) => a.data.length - b.data.length);\n\t\t\tbreak;\n\t\tcase 'size-desc':\n\t\t\tgalleryImages.sort((a, b) => b.data.length - a.data.length);\n\t\t\tbreak;\n\t}\n\trenderGallery();\n}\nfunction formatFileSize(dataUrl) {\n\tconst sizeInBytes = Math.floor(dataUrl.length * 0.75);\n\tif (sizeInBytes < 1024) {\n\t\treturn sizeInBytes + ' B';\n\t} else if (sizeInBytes < 1024 * 1024) {\n\t\treturn (sizeInBytes / 1024).toFixed(1) + ' KB';\n\t} else {\n\t\treturn (sizeInBytes / (1024 * 1024)).toFixed(1) + ' MB';\n\t}\n}\nfunction renderGallery(selectMode = false) {\n  const galleryContent = document.getElementById('galleryContent');\n  galleryContent.innerHTML = '';\n  galleryFilteredImages = [];\n  galleryDisplayedIndexes = [];\n  \n  if (gallerySearchTerm) {\n    galleryImages.forEach((img, index) => {\n      if (img.name.toLowerCase().includes(gallerySearchTerm)) {\n        galleryFilteredImages.push(img);\n        galleryDisplayedIndexes.push(index);\n      }\n    });\n  } else {\n    galleryFilteredImages = [...galleryImages];\n    galleryDisplayedIndexes = galleryImages.map((_, index) => index);\n  }\n  \n  galleryTotalPages = Math.ceil(galleryFilteredImages.length / paginationConfig.galleryItemsPerPage);\n  galleryCurrentPage = Math.min(galleryCurrentPage, galleryTotalPages);\n  \n  const startIndex = (galleryCurrentPage - 1) * paginationConfig.galleryItemsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.galleryItemsPerPage, galleryFilteredImages.length);\n  const currentPageImages = galleryFilteredImages.slice(startIndex, endIndex);\n  const currentPageIndexes = galleryDisplayedIndexes.slice(startIndex, endIndex);\n  \n  updateGalleryCount();\n  \n  if (galleryFilteredImages.length === 0) {\n    galleryContent.innerHTML = `\n      <div class=\"gallery-empty\">\n        <i class=\"fas fa-image\"></i>\n        <h3>${gallerySearchTerm ? 'Brak wyników' : 'Brak zdjęć'}</h3>\n        <p>${gallerySearchTerm ? 'Spróbuj innej frazy' : 'Dodaj zdjęcia'}</p>\n      </div>\n    `;\n    return;\n  }\n  \n  currentPageImages.forEach((img, pageIndex) => {\n    const originalIndex = currentPageIndexes[pageIndex];\n    const item = document.createElement('div');\n    item.className = 'gallery-item';\n    \n    const isGitHubImage = img.source === 'github';\n    \n    if (gallerySelectionMode) {\n      if (!isGitHubImage) {\n        item.classList.add('selectable');\n      } else {\n        item.classList.add('github-disabled');\n      }\n      if (selectedGalleryImages.includes(originalIndex)) {\n        item.classList.add('selected');\n      }\n    }\n    \n    const showActionButtons = galleryOpenMode === 'manage' && !gallerySelectionMode && !isGitHubImage;\n    item.setAttribute('data-index', originalIndex);\n    \n    const imageSrc = isGitHubImage ? img.url : img.data;\n    \n    item.innerHTML = `\n      <div class=\"gallery-image-container\">\n        <div class=\"image-placeholder\">\n          <i class=\"fas fa-spinner\"></i>\n        </div>\n        <img data-src=\"${imageSrc}\" alt=\"${img.name}\" class=\"lazy\" \n             data-source=\"${img.source || 'local'}\" \n             ${isGitHubImage ? 'data-github-url=\"' + img.url + '\"' : ''}>\n      </div>\n      <span>\n        ${img.name} \n      </span>\n      <div class=\"image-info\">\n        ${isGitHubImage ? 'Online' : formatFileSize(img.data)}\n        ${isGitHubImage ? '<i class=\"fa fa-globe\" title=\"Obraz online\" style=\"margin-left: 5px; color: #333; font-size: 0.8em;\"></i>' : ''}\n      </div>\n      ${showActionButtons ? `\n        <button class=\"delete-btn\" title=\"Usuń zdjęcie\">\n          <i class=\"fas fa-times\"></i>\n        </button>\n        <button class=\"edit-btn\" title=\"Edytuj nazwę\">\n          <i class=\"fas fa-edit\"></i>\n        </button>\n      ` : ''}\n    `;\n    \n    if (gallerySelectionMode) {\n      if (!isGitHubImage) {\n        item.addEventListener('click', () => toggleGalleryImageSelection(originalIndex));\n      }\n    } else if (selectMode) {\n      item.addEventListener('click', () => selectGalleryImage(originalIndex));\n    } else {\n      const imgElement = item.querySelector('img');\n      imgElement.addEventListener('click', () => openGalleryImagePreview(originalIndex));\n      \n      if (showActionButtons) {\n        const deleteBtn = item.querySelector('.delete-btn');\n        deleteBtn.addEventListener('click', (e) => {\n          e.stopPropagation();\n          requestDeleteGalleryImage(originalIndex);\n        });\n        \n        const editBtn = item.querySelector('.edit-btn');\n        editBtn.addEventListener('click', (e) => {\n          e.stopPropagation();\n          editGalleryImageName(originalIndex);\n        });\n      }\n    }\n    \n    galleryContent.appendChild(item);\n  });\n  \n  renderPagination();\n  setTimeout(initLazyLoading, 100);\n}\n\nfunction renderBackgrounds() {\n  const content = document.getElementById('backgroundContent');\n  content.innerHTML = '';\n  \n  backgroundTotalPages = Math.ceil(backgroundImages.length / paginationConfig.backgroundItemsPerPage);\n  backgroundCurrentPage = Math.min(backgroundCurrentPage, backgroundTotalPages);\n  \n  const startIndex = (backgroundCurrentPage - 1) * paginationConfig.backgroundItemsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.backgroundItemsPerPage, backgroundImages.length);\n  const currentPageImages = backgroundImages.slice(startIndex, endIndex);\n  \n  if (backgroundImages.length === 0) {\n    content.innerHTML = `\n      <div class=\"background-empty\">\n        <i class=\"fas fa-image\"></i>\n        <h3>Brak zdjęć tła</h3>\n        <p>Dodaj tła, aby zmienić wygląd aplikacji</p>\n      </div>\n    `;\n    return;\n  }\n  \n  currentPageImages.forEach((img, index) => {\n    const globalIndex = startIndex + index;\n    const isSelected = selectedBackgroundId === img.id;\n    const isGitHubBackground = img.source === 'github';\n    const item = document.createElement('div');\n    item.className = 'background-item';\n    \n    if (isSelected) {\n      item.classList.add('active-background');\n    }\n    \n    const imageSrc = isGitHubBackground ? img.url : img.data;\n    \n    item.innerHTML = `\n      <div class=\"background-checkbox\">\n        <input type=\"checkbox\" id=\"bgCheck-${globalIndex}\" \n            ${isSelected ? 'checked' : ''}\n            onchange=\"selectBackground(${globalIndex}, this.checked)\">\n        <label for=\"bgCheck-${globalIndex}\"></label>\n      </div>\n      <div class=\"background-image-container\">\n        <img src=\"${imageSrc}\" alt=\"${img.name}\" \n            onclick=\"openBackgroundPreview(${globalIndex})\"\n            data-source=\"${img.source || 'local'}\"\n            ${isGitHubBackground ? 'data-github-url=\"' + img.url + '\"' : ''}>\n      </div>\n      <div style=\"align-items: center;display: flex;justify-content: center;flex-direction: column;\">\n        <span>\n          ${img.name} \n          ${isGitHubBackground ? '<i class=\"fa fa-globe\" title=\"Obraz online\" style=\"margin-left: 5px; color: #333; font-size: 0.8em;\"></i>' : ''}\n        </span>\n        <div class=\"background-info\">\n          ${!isGitHubBackground ? `\n            <div class=\"background-actions\">\n              <button class=\"btn-info edit-icon-btn\" onclick=\"editBackgroundName(${globalIndex})\">\n                <i class=\"fas fa-edit\"></i>\n              </button>\n              <button class=\"btn-info edit-icon-btn\" style=\"background-color:var(--danger); color:white;width: 30px; height: 30px;\" onclick=\"requestDeleteBackground(${globalIndex})\">\n                <i class=\"fas fa-trash\"></i>\n              </button>\n            </div>\n          ` : ''}\n        </div>\n      </div>\n    `;\n    \n    content.appendChild(item);\n  });\n  \n  renderBackgroundPagination();\n}\nasync function saveImageToDB(imageData, storeName) {\n\treturn new Promise(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst db = await openDB();\n\t\t\tconst tx = db.transaction(storeName, 'readwrite');\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst id = generateUniqueId();\n\t\t\tawait store.put({ id, data: imageData });\n\t\t\tresolve(id);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n}\nasync function migrateToImageReferences() {\n    logEvent('Rozpoczęcie migracji obrazów');\n\tconst loader = new PokeballLoader('pokeballLoader').start(0);\n\ttry {\n\t\tfor (const product of products) {\n\t\t\tif (product.image && !product.imageId) {\n\t\t\t\tproduct.imageId = await saveImageToDB(product.image, 'productImages');\n\t\t\t}\n\t\t}\n\t\tfor (const galleryImage of galleryImages) {\n\t\t\tif (galleryImage.data && !galleryImage.id) {\n\t\t\t\tconst imageId = await saveImageToDB(galleryImage.data, 'galleryImages');\n\t\t\t\tgalleryImage.id = imageId;\n\t\t\t}\n\t\t}\n\t\tlocalStorage.setItem('products', JSON.stringify(products));\n\t\tawait saveGallery();\n\t\tloader.complete();\n\t\tsetTimeout(() => loader.reset(), 500);\n\t} catch (error) {\n\t\tloader.reset();\n\t\tshowNotification('Błąd migracji danych. Skontaktuj się z supportem.', 'danger');\n\t}\n}\nfunction initLazyLoading() {\n  const lazyImages = document.querySelectorAll('img.lazy');\n  const observer = new IntersectionObserver((entries, observer) => {\n\tentries.forEach(entry => {\n\t  if (entry.isIntersecting) {\n\t\tconst img = entry.target;\n\t\tconst originalSrc = img.dataset.src;\n\t\timg.src = originalSrc;\n\t\timg.onload = function() {\n\t\t\timg.classList.add('loaded');\n\t\t\tconst placeholder = img.parentElement.querySelector('.image-placeholder');\n\t\t\tif (placeholder) {\n\t\t\t\tplaceholder.style.display = 'none';\n\t\t\t}\n\t\t};\n\t\timg.onerror = function() {\n\t\t\tconst placeholder = img.parentElement.querySelector('.image-placeholder');\n\t\t\tif (placeholder) {\n\t\t\t\tplaceholder.innerHTML = '<i class=\"fas fa-times-circle\"></i> Błąd ładowania';\n\t\t\t}\n\t\t};\n\t\timg.classList.remove('lazy');\n\t\tobserver.unobserve(img);\n\t  }\n\t});\n  });\n  lazyImages.forEach(img => {\n\tobserver.observe(img);\n  });\n}\nfunction renderPagination() {\n  const galleryContainer = document.getElementById('galleryModal').querySelector('.modal-content');\n  const oldPagination = galleryContainer.querySelector('.pagination-container');\n  if (oldPagination) oldPagination.remove();\n  const paginationContainer = document.createElement('div');\n  paginationContainer.className = 'pagination-container';\n  paginationContainer.style.display = 'flex';\n  paginationContainer.style.flexDirection = 'column';\n  paginationContainer.style.alignItems = 'center';\n  paginationContainer.style.marginTop = '1rem';\n  paginationContainer.style.width = '100%';\n  const buttonsContainer = document.createElement('div');\n  buttonsContainer.className = 'pagination';\n  const prevButton = document.createElement('button');\n  prevButton.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevButton.disabled = galleryCurrentPage === 1;\n  prevButton.addEventListener('click', () => {\n\tif (galleryCurrentPage > 1) {\n\t  galleryCurrentPage--;\n\t  renderGallery();\n\t}\n  });\n  const nextButton = document.createElement('button');\n  nextButton.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextButton.disabled = galleryCurrentPage === galleryTotalPages;\n  nextButton.addEventListener('click', () => {\n\tif (galleryCurrentPage < galleryTotalPages) {\n\t  galleryCurrentPage++;\n\t  renderGallery();\n\t}\n  });\n  buttonsContainer.appendChild(prevButton);\n  buttonsContainer.appendChild(nextButton);\n  const paginationInfo = document.createElement('div');\n  paginationInfo.className = 'gallery-pagination-info';\n  paginationInfo.textContent = `Strona ${galleryCurrentPage} z ${galleryTotalPages} • ${galleryFilteredImages.length} zdjęć`;\n  paginationContainer.appendChild(buttonsContainer);\n  paginationContainer.appendChild(paginationInfo);\n  galleryContainer.appendChild(paginationContainer);\n  setTimeout(initLazyLoading, 100);\n}\nfunction generateUniqueId() {\n\treturn Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n}\nasync function saveProductImagesToDB() {\n\ttry {\n\t\tconst db = await openDB();\n\t\tconst tx = db.transaction('productImages', 'readwrite');\n\t\tconst store = tx.objectStore('productImages');\n\t\tawait store.clear();\n\t\tproducts.forEach(p => {\n\t\t\tif (p.image) {\n\t\t\t\tstore.put({\n\t\t\t\t\tid: p.name,\n\t\t\t\t\tdata: p.image\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t}\n}\nfunction loadProductImage(product) {\n    if (product.imageSource === 'github' && product.imageId) {\n        const galleryImage = galleryImages.find(img => img.id === product.imageId && img.source === 'github');\n        return galleryImage ? galleryImage.url : (product.image || '');\n    } else {\n        return product.image || '';\n    }\n}\nasync function loadProductImagesFromDB() {\n\ttry {\n\t\tconst db = await openDB();\n\t\tconst tx = db.transaction('productImages', 'readonly');\n\t\tconst store = tx.objectStore('productImages');\n\t\tconst request = store.getAll();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\trequest.onsuccess = function() {\n\t\t\t\tconst images = request.result || [];\n\t\t\t\timages.forEach(img => {\n\t\t\t\t\tconst product = products.find(p => p.name === img.id);\n\t\t\t\t\tif (product) {\n\t\t\t\t\t\tproduct.image = img.data;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresolve();\n\t\t\t};\n\t\t\trequest.onerror = function() {\n\t\t\t\treject('Błąd ładowania obrazów produktów');\n\t\t\t};\n\t\t});\n\t} catch (error) {\n\t\tlogEvent('Błąd ładowania obrazów:', error);\n\t}\n}\nasync function migrateProductImageReferences() {\n\tlet needsMigration = false;\n\tproducts = products.map(product => {\n\t\tif (product.image && !product.imageId) {\n\t\t\tconst galleryImage = galleryImages.find(img => img.data === product.image);\n\t\t\tif (galleryImage) {\n\t\t\t\tneedsMigration = true;\n\t\t\t\treturn {\n\t\t\t\t\t...product,\n\t\t\t\t\timageId: galleryImage.id\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn product;\n\t});\n\tif (needsMigration) {\n\t\tawait saveProducts();\n\t}\n}\nfunction toggleGalleryImageSelection(index) {\n    const img = galleryImages[index];\n    if (img.source === 'github') {\n        return;\n    }\n    const idx = selectedGalleryImages.indexOf(index);\n    if (idx > -1) {\n        selectedGalleryImages.splice(idx, 1);\n    } else {\n        selectedGalleryImages.push(index);\n    }\n    const item = document.querySelector(`.gallery-item[data-index=\"${index}\"]`);\n    if (item) item.classList.toggle('selected', selectedGalleryImages.includes(index));\n    updateSelectionCounter();\n}\nfunction updateSelectionCounter() {\n  const counter = document.getElementById('gallerySelectionCounter');\n  if (!counter) {\n\tconst selectionControls = document.getElementById('gallerySelectionControls');\n\tconst counterEl = document.createElement('div');\n\tcounterEl.id = 'gallerySelectionCounter';\n\tcounterEl.className = 'selection-counter';\n\tcounterEl.innerHTML = `<i class=\"fas fa-check-circle\"></i> Zaznaczono: ${selectedGalleryImages.length}`;\n\tselectionControls.insertBefore(counterEl, selectionControls.firstChild);\n  } else {\n\tcounter.innerHTML = `<i class=\"fas fa-check-circle\"></i> Zaznaczono: ${selectedGalleryImages.length}`;\n  }\n}\nfunction checkIOSConnection() {\n  return new Promise(resolve => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('HEAD', 'https://www.google.com/favicon.ico?cache=' + Math.random(), true);\n    xhr.timeout = 5000;\n    xhr.onload = function() {\n      resolve(true);\n    };\n    xhr.onerror = function() {\n      resolve(false);\n    };\n    xhr.ontimeout = function() {\n      resolve(false);\n    };\n    try {\n      xhr.send();\n    } catch (error) {\n      resolve(false);\n    }\n  });\n}\nfunction setupConnectionMonitoring() {\n  setInterval(async () => {\n    const isOnline = await checkInternetConnection();\n    if (!isOnline && !document.querySelector('.no-internet-container')) {\n      showNoInternetMessage();\n    }\n  }, 10000);\n  window.addEventListener('online', async () => {\n    const isReallyOnline = await checkInternetConnection();\n    if (isReallyOnline) {\n      hideNoInternetMessage();\n      showNotification('Połączenie internetowe zostało przywrócone', 'success');\n      setTimeout(() => {\n        location.reload();\n      }, 1000);\n    }\n  });\n  window.addEventListener('offline', () => {\n    showNoInternetMessage();\n    showNotification('Utracono połączenie internetowe', 'danger');\n  });\n}\ndocument.addEventListener('DOMContentLoaded', async function() {\n  const isOnline = await checkInternetConnection();\n  if (!isOnline) {\n    showNoInternetMessage();\n    return;\n  }\n  setupConnectionMonitoring();\n  const blockedBrowsers = [\n    { \n      name: \"Microsoft Edge\", \n      pattern: /Edg/,\n      message: \"Microsoft Edge nie jest kompatybilny z tą aplikacją\"\n    },\n  ];\n  const userAgent = navigator.userAgent;\n  let blockedBrowser = null;\n  for (const browser of blockedBrowsers) {\n    if (browser.pattern.test(userAgent)) {\n      blockedBrowser = browser;\n      break;\n    }\n  }\n  if (blockedBrowser) {\n    document.body.classList.add('edge-blocked');\n    const contentHTML = `\n      <div class=\"edge-blocked-content\">\n        <div class=\"pokeball-container\">\n          <div class=\"pokeball bounce\">\n            <div class=\"pokeball-top\"></div>\n            <div class=\"pokeball-bottom\"></div>\n            <div class=\"pokeball-center\"></div>\n          </div>\n        </div>\n        <h1>\n          <i class=\"fas fa-exclamation-triangle\"></i> ${blockedBrowser.name} nie jest obsługiwany\n        </h1>\n        <p>\n          ${blockedBrowser.message}. Prosimy skorzystać z jednej z zalecanych przeglądarek:\n        </p>\n        <div class=\"browser-list\">\n          <a href=\"https://www.mozilla.org/firefox/\" target=\"_blank\" class=\"browser-item\">\n            <i class=\"fab fa-firefox-browser\"></i>\n            Firefox\n          </a>\n          <a href=\"https://www.google.com/chrome/\" target=\"_blank\" class=\"browser-item\">\n            <i class=\"fab fa-chrome\"></i>\n            Google Chrome\n          </a>\n          <a href=\"https://brave.com/\" target=\"_blank\" class=\"browser-item\">\n            <i class=\"fab fa-brave\"></i>\n            Brave\n          </a>\n          <a href=\"https://www.opera.com/\" target=\"_blank\" class=\"browser-item\">\n            <i class=\"fab fa-opera\"></i>\n            Opera\n          </a>\n        </div>\n        <p class=\"note\">\n          Po zainstalowaniu nowej przeglądarki, uruchom narzędzie ponownie.\n        </p>\n      </div>\n    `;\n    document.body.innerHTML = contentHTML;\n    const style = document.createElement('style');\n    style.textContent = `\n      body {background: #000 !important;color: #fff;display: flex;flex-direction: column;justify-content: center;align-items: center;height: 100vh;text-align: center;padding: 20px;font-family: Arial, sans-serif;margin: 0;}\n      .edge-blocked-content {max-width: 800px;width: 100%;display: flex;flex-direction: column;align-items: center;}\n      .pokeball-container {display: flex;flex-direction: column;align-items: center;justify-content: center;margin-bottom: 30px;}\n      .pokeball {width: 100px;height: 100px;position: relative;margin: 0 auto;}\n      .pokeball-top {position: absolute;top: 0;left: 0;width: 100%;height: 50%;background: #ff3a30;border-radius: 50px 50px 0 0;border-bottom: 2px solid #000;}\n      .pokeball-bottom {position: absolute;bottom: 0;left: 0;width: 100%;height: 50%;background: #fff;border-radius: 0 0 50px 50px;border-top: 2px solid #000;}\n      .pokeball-center {position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);width: 20px;height: 20px;background: #3a3a3a;border-radius: 50%;border: 3px solid #000;z-index: 10;}\n      @keyframes bounce {0%, 100% { transform: translateY(0) rotate(0deg); }25% { transform: translateY(-20px) rotate(10deg); }50% { transform: translateY(0) rotate(0deg); }75% { transform: translateY(-15px) rotate(-10deg); }}\n      .bounce {animation: bounce 1.5s ease-in-out infinite;}\n      .browser-list {display: grid;grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));gap: 25px;margin: 40px 0;width: 100%;}\n      .browser-item {color: #fff;text-decoration: none;transition: transform 0.3s;display: block;}\n      .browser-item:hover {background: #000 !important;transform: translateY(-5px);}\n      .browser-item i {font-size: 3rem;display: block;margin-bottom: 15px;}\n      .browser-item:nth-child(1) i { color: #FF9500; }\n      .browser-item:nth-child(2) i { color: #4CAF50; }\n      .browser-item:nth-child(3) i { color: #FF2000; }\n      .browser-item:nth-child(4) i { color: #FF1B2D; }\n      h1 {margin-bottom: 20px;font-size: 2rem;color: #ff3a30;text-align: center;}\n      p {margin-bottom: 30px;font-size: 1.2rem;line-height: 1.6;text-align: center;}\n      .note {font-size: 0.9rem;color: #aaa;text-align: center;}\n      .loader-text {margin-top: 15px;font-size: 1.2rem;text-align: center;}\n    `;\n    document.head.appendChild(style);\n    let progress = 0;\n    const loaderText = document.querySelector('.loader-text');\n    const interval = setInterval(() => {\n      progress += 5;\n      loaderText.textContent = `${progress}%`;\n      if (progress >= 100) {\n        clearInterval(interval);\n        loaderText.innerHTML = '<i class=\"fas fa-ban\"></i> Blokada';\n      }\n    }, 100);\n    const fontAwesome = document.createElement('link');\n    fontAwesome.rel = 'stylesheet';\n    fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css';\n    document.head.appendChild(fontAwesome);\n    return;\n  }\n  const loader = document.getElementById('pokeballLoader');\n  const loaderText = loader.querySelector('.loader-text');\n  const startTime = Date.now();\n  const minLoadTime = 1500;\n  const updateLoaderText = (text) => {\n    if (loaderText) loaderText.textContent = text;\n  };\n  const updateProgress = (current, total) => {\n    const percent = Math.round((current / total) * 100);\n    updateLoaderText(`Ładowanie aplikacji... ${percent}%`);\n    return percent;\n  };\n  const tasks = [\n    { action: async () => await loadBackgrounds(), weight: 10, name: 'Ładowanie tła' },\n    { action: async () => {\n        const savedBackgroundId = localStorage.getItem('selectedBackground');\n        if (savedBackgroundId) {\n            const img = backgroundImages.find(bg => bg.id === savedBackgroundId);\n            if (img) {\n                selectedBackgroundId = savedBackgroundId;\n                applyBackgroundStyle();\n            }\n        }\n    }, weight: 5, name: 'Stosowanie tła' },\n    { action: async () => await openDB(), weight: 15, name: 'Inicjalizacja bazy danych' },\n    { \n        action: async () => {\n            products = JSON.parse(localStorage.getItem('products')) || [];\n            categories = JSON.parse(localStorage.getItem('categories')) || [];\n            exchangeRates = JSON.parse(localStorage.getItem('exchangeRates')) || { EUR: 4.25, USD: 3.62, PLN: 1.0, lastUpdated: null };\n            currencySymbols = JSON.parse(localStorage.getItem('currencySymbols')) || { PLN: 'zł', EUR: '€', USD: '$' };\n            let localShops = JSON.parse(localStorage.getItem('shops')) || [];\n            if (localShops.length === 0) {\n                const githubShops = await fetchShopsFromGitHub();\n                if (githubShops && githubShops.length > 0) {\n                    shops = githubShops;\n                    localStorage.setItem('shops', JSON.stringify(shops));\n                    showNotification('Pobrano listę sklepów', 'success');\n                } else {\n                    shops = [];\n                }\n            } else {\n                shops = localShops;\n            }\n            effects = JSON.parse(localStorage.getItem('effects')) || [];\n            if (categories.length === 0) {\n                const githubCategories = await fetchCategoriesFromGitHub();\n                if (githubCategories && githubCategories.length > 0) {\n                    categories = githubCategories;\n                    localStorage.setItem('categories', JSON.stringify(categories));\n                    showNotification('Pobrano kategorie', 'success');\n                }\n            }\n            if (effects.length === 0) {\n                const githubEffects = await fetchEffectsFromGitHub();\n                if (githubEffects && githubEffects.length > 0) {\n                    effects = githubEffects;\n                    localStorage.setItem('effects', JSON.stringify(effects));\n                    showNotification('Pobrano efekty', 'success');\n                }\n            }\n            defaultCategories.forEach(defaultCat => {\n                const exists = categories.some(cat => cat.name === defaultCat.name);\n                if (!exists) {\n                    categories.push(defaultCat);\n                }\n            });\n            defaultEffects.forEach(defaultEffect => {\n                const exists = effects.some(effect => effect === defaultEffect);\n                if (!exists) {\n                    effects.push(defaultEffect);\n                }\n            });\n            const hasSingles = categories.some(c => c.name === 'Singles');\n            if (!hasSingles) {\n                categories.push({\n                    name: 'Singles',\n                    bg: '#6a1b9a',\n                    text: '#ffffff'\n                });\n                saveCategories();\n            }\n        }, \n        weight: 10, \n        name: 'Wczytywanie danych' \n    },\n    { action: async () => {\n        for (const product of products) {\n          if (!product.id) {\n            product.id = generateUniqueId();\n          }\n          const history = await priceHistory.getPriceHistory(product.id);\n          if (history.length === 0) {\n            const initialPrice = product.currentPrice !== null ? \n              product.currentPrice : product.price;\n            const initialCurrency = product.currentPrice !== null ? \n              (product.currentCurrency || product.currency) : product.currency;\n            await priceHistory.addPricePoint(\n              product.id,\n              initialPrice,\n              initialCurrency,\n              new Date(product.dateAdded)\n            );\n          }\n        }\n    }, weight: 15, name: 'Migracja danych produktów' },\n    { action: async () => await loadGallery(), weight: 10, name: 'Ładowanie galerii' },\n    { action: async () => {\n        const złotoExists = categories.some(cat => cat.name === 'Złoto');\n        if (!złotoExists) {\n            categories.push({name: 'Złoto', bg: '#FFD700', text: '#000'});\n            localStorage.setItem('categories', JSON.stringify(categories));\n        }\n    }, weight: 5, name: 'Migracja kategorii' },\n    { action: async () => {\n        const needsMigration =\n          products.some(p => p.image && !p.imageId) ||\n          galleryImages.some(img => img.data && !img.id);\n        if (needsMigration) {\n          await migrateToImageReferences();\n          localStorage.setItem('products', JSON.stringify(products));\n          localStorage.setItem('galleryImages', JSON.stringify(galleryImages));\n        }\n    }, weight: 10, name: 'Migracja referencji obrazów' },\n    { action: async () => await loadProductImagesFromDB(), weight: 5, name: 'Ładowanie obrazów produktów' },\n    { action: async () => {\n        checkEmptyState();\n        initSearch();\n        updateCurrencySelects();\n        updateCategorySelects();\n        fillEffectSelect();\n        updateSummary();\n    }, weight: 5, name: 'Inicjalizacja interfejsu' },\n    { action: async () => await renderProducts(applyAllFilters()), weight: 5, name: 'Renderowanie produktów' },\n    { action: async () => {\n        await startDailyPriceUpdate();\n        await removeDuplicatePricePoints();\n        await checkExchangeRates();\n        startExchangeRateUpdater();\n        await updateAllFromGitHub();\n    }, weight: 5, name: 'Aktualizacja danych' }\n  ];\n  let totalWeight = tasks.reduce((sum, task) => sum + task.weight, 0);\n  let completedWeight = 0;\n  try {\n    logEvent('Rozpoczęcie ładowania aplikacji');\n    for (const task of tasks) {\n      logEvent(`Rozpoczęcie: ${task.name}`);\n      await task.action();\n      completedWeight += task.weight;\n      const progressPercent = updateProgress(completedWeight, totalWeight);\n      logEvent(`Zakończono: ${task.name} (${progressPercent}%)`);\n    }\n    initLazyLoading();\n    document.getElementById('sortSelect').value = 'date-asc';\n    renderProducts(applyAllFilters());\n    sortProducts();\n    if (products.length > 0) {\n      await migrateExistingProducts();\n    }\n    if (products.some(p => p.category === 'Złoto')) {\n      setTimeout(() => {\n        updateGoldPrices();\n      }, 3000);\n    }\n    paginationConfig = JSON.parse(localStorage.getItem('paginationConfig')) || paginationConfig;\n    updateLoaderText('Narzędzie gotowe! 100%');\n    const elapsed = Date.now() - startTime;\n    const remaining = Math.max(minLoadTime - elapsed, 0);\n    setTimeout(() => {\n      loader.style.opacity = '0';\n      setTimeout(() => {\n        loader.style.display = 'none';\n        showNotification('Aplikacja gotowa!', 'success');\n        logEvent('Aplikacja w pełni załadowana');\n      }, 500);\n    }, remaining);\n  } catch (error) {\n    logEvent('Błąd ładowania aplikacji:', error);\n    updateLoaderText('Błąd ładowania!');\n    if (loaderText) loaderText.style.color = '#ff6b6b';\n    setTimeout(() => {\n      loader.style.display = 'none';\n    }, 3000);\n    logEvent('Krytyczny błąd ładowania: ' + error.message);\n  }\n});\nasync function updateShopsFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(30);\n    \n    try {\n        const githubShops = await fetchShopsFromGitHub();\n        if (githubShops && githubShops.length > 0) {\n            const existingShopIds = new Set(shops.map(shop => shop.id));\n            const newShops = githubShops.filter(shop => !existingShopIds.has(shop.id));\n            if (newShops.length > 0) {\n                shops.push(...newShops);\n                saveShops();\n                renderShopsList();\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n                showNotification(`Dodano ${newShops.length} nowych sklepów`, 'success');\n                playNotificationSound('success');\n            } else {\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n            }\n        } else {\n            throw new Error('Nie udało się pobrać sklepów');\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji sklepów: ' + error.message, 'danger');\n    }\n}\n\ndocument.getElementById('gallerySelectBtn').addEventListener('click', toggleGallerySelectionMode);\ndocument.getElementById('gallerySelectionControls').querySelector('.btn-danger').addEventListener('click', deleteSelectedGalleryImages);\ndocument.getElementById('gallerySelectionControls').querySelector('.btn-info').addEventListener('click', cancelGallerySelection);\ndocument.getElementById('galleryUploadBtn').addEventListener('click', toggleUploadPanel);\ndocument.addEventListener('keydown', function(e) {\n\tif (e.key === 'Escape') {\n\t\tdocument.querySelectorAll('.modal').forEach(modal => {\n\t\t\tmodal.classList.remove('show');\n\t\t});\n\t}\n\tif ((e.ctrlKey || e.metaKey) && e.key === 'n') {\n\t\tdocument.getElementById('name').focus();\n\t\te.preventDefault();\n\t}\n\tif ((e.ctrlKey || e.metaKey) && e.key === 'f') {\n\t\tdocument.getElementById('searchInput').focus();\n\t\te.preventDefault();\n\t}\n\tif ((e.ctrlKey || e.metaKey) && e.key === 's') {\n\t\tsaveProducts();\n\t\tshowNotification('Dane zapisane', 'success', 2000);\n\t\tplayNotificationSound('success');\n\t\te.preventDefault();\n\t}\n\tif (e.key === 'Escape') {\n\t\tdocument.querySelectorAll('.modal.show').forEach(modal => {\n\t\t\tmodal.classList.remove('show');\n\t\t});\n\t}\n});\ndocument.querySelectorAll('#productForm input').forEach(input => {\n\tinput.addEventListener('keydown', function(e) {\n\t\tif (e.key === 'Enter') {\n\t\t\tdocument.getElementById('productForm').dispatchEvent(new Event('submit'));\n\t\t}\n\t});\n});\ndocument.addEventListener('click', function(e) {\n\tif (e.target.classList.contains('modal')) {\n\t\tcloseExchangeModal();\n\t\tcloseImagePreview();\n\t\tcloseProductPreview();\n\t\tcloseCategoriesModal();\n\t\tcloseInstructionModal();\n\t\tcloseStatsModal();\n\t\tcloseGallery();\n\t\tcloseCurrencyEditModal();\n\t}\n});\ndocument.getElementById('searchInput').addEventListener('keydown', function(e) {\n\tif (e.key === 'Enter') {\n\t\tsearchProducts();\n\t}\n});\n(function() {\n  const selectors = [\n\t'button',\n\t'.btn-success',\n\t'.btn-danger',\n\t'.btn-info',\n\t'.btn-warning',\n\t'.btn-primary',\n\t'.btn-shop',\n\t'.btn-gallery',\n\t'.btn-category',\n\t'.btn-stats',\n\t'.btn-instruction',\n\t'.btn-select',\n\t'.btn-update',\n\t'.custom-file-btn',\n\t'.edit-icon-btn',\n\t'.close-modal',\n\t'.hamburger',\n\t'.close-notification',\n\t'.delete-btn',\n\t'.edit-btn',\n\t'.btn-cardmarket',\n\t'.gallery-header-buttons button',\n\t'.gallery-sort-controls button',\n\t'.confirmation-buttons button',\n\t'.shop-item .actions button',\n\t'.category-item .actions button',\n\t'.add-shop-form button',\n\t'.add-currency-form button',\n\t'.add-category-form button',\n\t'.category-edit-form button',\n\t'.import-btn-wrapper'\n  ].join(', ');\n\n  function addShimmerToElement(el) {\n\tif (el.tagName === 'BUTTON' && el.closest('.import-btn-wrapper')) return;\n\tif (el.querySelector(':scope > .shimmer')) return;\n\tconst oldChildren = Array.from(el.childNodes);\n\tconst shimmer  = document.createElement('span');\n\tshimmer.className = 'shimmer';\n\tconst textWrap = document.createElement('span');\n\ttextWrap.className = 'text';\n\ttextWrap.style.display = 'contents';\n\toldChildren.forEach(n => textWrap.appendChild(n));\n\tconst cs = getComputedStyle(el);\n\tif (cs.position === 'static') el.style.position = 'relative';\n\tif (cs.overflow !== 'hidden') el.style.overflow = 'hidden';\n\tel.insertBefore(shimmer, el.firstChild);\n\tel.appendChild(textWrap);\n\tshimmer.style.animationPlayState = 'paused';\n\tel.addEventListener('mouseenter', () => {\n\t  shimmer.style.animationPlayState = 'running';\n\t});\n\tel.addEventListener('mouseleave', () => {\n\t  shimmer.style.animationPlayState = 'paused';\n\t});\n\tel.addEventListener('focusin', () => {\n\t  shimmer.style.animationPlayState = 'running';\n\t});\n\tel.addEventListener('focusout', () => {\n\t  shimmer.style.animationPlayState = 'paused';\n\t});\n  }\n  function scanAll() {\n\tdocument.querySelectorAll(selectors).forEach(addShimmerToElement);\n  }\n  document.addEventListener('DOMContentLoaded', scanAll);\n  scanAll();\n  new MutationObserver(muts => {\n\tmuts.forEach(m => {\n\t  if (m.addedNodes.length) scanAll();\n\t});\n  }).observe(document.body, { childList: true, subtree: true });\n})();\nconst img       = document.getElementById('card3dImage');\nconst container = document.getElementById('card3dContainer');\nconst card      = container.querySelector('.card');\nconst faces     = container.querySelectorAll('.card-face');\nimg.addEventListener('load', () => {\n  const w = img.naturalWidth;\n  const h = img.naturalHeight;\n  [ container, card, ...faces ].forEach(el => {\n    el.style.width  = w + 'px';\n    el.style.height = h + 'px';\n  });\n  container.style.display = 'block';\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  const container = document.querySelector('.card-container');\n  const card = container.querySelector('.card');\n  const cardShine = container.querySelector('.card__shine');\n  const cardGlare = container.querySelector('.card__glare');\n  let isInteracting = false;\n  function updateCardVars(x, y) {\n    const rect = container.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    const dx = x - centerX;\n    const dy = y - centerY;\n    const pointerFromLeft = (x - rect.left) / rect.width;\n    const pointerFromTop = (y - rect.top) / rect.height;\n    const pointerFromCenter = Math.min(Math.sqrt((dx / rect.width) ** 2 + (dy / rect.height) ** 2), 1);\n    const rotateY = dx / 10;\n    const rotateX = -dy / 10;\n    card.style.setProperty('--rotate-x', `${rotateX}deg`);\n    card.style.setProperty('--rotate-y', `${rotateY}deg`);\n    card.style.setProperty('--pointer-from-center', pointerFromCenter);\n    card.style.setProperty('--pointer-from-left', pointerFromLeft);\n    card.style.setProperty('--pointer-from-top', pointerFromTop);\n    cardShine.style.setProperty('--pointer-x', `${x}px`);\n    cardShine.style.setProperty('--pointer-y', `${y}px`);\n    cardGlare.style.setProperty('--pointer-x', `${pointerFromLeft * 100}%`);\n    cardGlare.style.setProperty('--pointer-y', `${pointerFromTop * 100}%`);\n  }\n  function resetCardVars() {\n    card.style.setProperty('--rotate-x', `0deg`);\n    card.style.setProperty('--rotate-y', `0deg`);\n  }\n  container.addEventListener('mousemove', e => {\n    isInteracting = true;\n    updateCardVars(e.clientX, e.clientY);\n  });\n  container.addEventListener('mouseleave', () => {\n    isInteracting = false;\n    resetCardVars();\n  });\n  container.addEventListener('touchstart', e => {\n    isInteracting = true;\n    const t = e.touches[0];\n    updateCardVars(t.clientX, t.clientY);\n  }, { passive: false });\n  container.addEventListener('touchmove', e => {\n    if (!isInteracting) return;\n    const t = e.touches[0];\n    updateCardVars(t.clientX, t.clientY);\n  }, { passive: false });\n  container.addEventListener('touchend', () => {\n    isInteracting = false;\n    resetCardVars();\n  });\n  updateCardVars(window.innerWidth / 2, window.innerHeight / 2);\n});": "let currentTranslations = {};\nlet currentLanguage = 'PL';\n\nconst availableLanguages = {\n    'PL': {\n        name: 'Polski',\n        flag: '🇵🇱',\n        file: 'https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/lang/PL.json'\n    },\n    'EN': {\n        name: 'English', \n        flag: '🇬🇧',\n        file: 'https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/lang/EN.json'\n    },\n    'DE': {\n        name: 'Deutsch',\n        flag: '🇩🇪', \n        file: 'https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/lang/DE.json'\n    }\n};\n\n// Funkcja ładowania tłumaczenia\nasync function loadLanguage(langCode) {\n    if (!availableLanguages[langCode]) {\n        console.error('Language not supported:', langCode);\n        return;\n    }\n\n    try {\n        showLoader('Ładowanie tłumaczenia...');\n        const response = await fetch(availableLanguages[langCode].file);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        currentTranslations = await response.json();\n        currentLanguage = langCode;\n        \n        applyTranslations();\n        updateLanguageButton();\n        saveLanguagePreference();\n        hideLoader();\n        \n        showNotification(`Język zmieniony na ${availableLanguages[langCode].name}`, 'success');\n        \n    } catch (error) {\n        console.error('Error loading language file:', error);\n        hideLoader();\n        showNotification('Błąd ładowania tłumaczenia', 'danger');\n        // Fallback do domyślnego języka\n        if (langCode !== 'PL') {\n            loadLanguage('PL');\n        }\n    }\n}\n\n// Funkcja aplikująca tłumaczenia\nfunction applyTranslations() {\n    // Tłumaczenie elementów z atrybutem data-translate\n    document.querySelectorAll('[data-translate]').forEach(element => {\n        const key = element.getAttribute('data-translate');\n        if (currentTranslations[key]) {\n            element.textContent = currentTranslations[key];\n        }\n    });\n\n    // Tłumaczenie placeholderów\n    document.querySelectorAll('[data-translate-placeholder]').forEach(element => {\n        const key = element.getAttribute('data-translate-placeholder');\n        if (currentTranslations[key]) {\n            element.setAttribute('placeholder', currentTranslations[key]);\n        }\n    });\n\n    // Tłumaczenie tytułów\n    document.querySelectorAll('[data-translate-title]').forEach(element => {\n        const key = element.getAttribute('data-translate-title');\n        if (currentTranslations[key]) {\n            element.setAttribute('title', currentTranslations[key]);\n        }\n    });\n\n    // Tłumaczenie atrybutów alt\n    document.querySelectorAll('[data-translate-alt]').forEach(element => {\n        const key = element.getAttribute('data-translate-alt');\n        if (currentTranslations[key]) {\n            element.setAttribute('alt', currentTranslations[key]);\n        }\n    });\n\n    // Tłumaczenie wartości przycisków\n    document.querySelectorAll('[data-translate-value]').forEach(element => {\n        const key = element.getAttribute('data-translate-value');\n        if (currentTranslations[key]) {\n            element.value = currentTranslations[key];\n        }\n    });\n}\n\n// Aktualizacja przycisku języka\nfunction updateLanguageButton() {\n    const button = document.getElementById('languageToggle');\n    const span = document.getElementById('currentLanguage');\n    if (button && span) {\n        span.textContent = currentLanguage;\n    }\n}\n\n// Zapisywanie preferencji języka\nfunction saveLanguagePreference() {\n    localStorage.setItem('selectedLanguage', currentLanguage);\n}\n\n// Ładowanie preferencji języka\nfunction loadLanguagePreference() {\n    const saved = localStorage.getItem('selectedLanguage');\n    return saved || 'PL';\n}\n\n// Modal języka\nfunction openLanguageModal() {\n    const modal = document.getElementById('languageModal');\n    const list = document.getElementById('languageList');\n    \n    if (!modal || !list) return;\n    \n    // Wypełnij listę języków\n    list.innerHTML = '';\n    Object.entries(availableLanguages).forEach(([code, lang]) => {\n        const li = document.createElement('li');\n        li.innerHTML = `\n            <span class=\"language-flag\">${lang.flag}</span>\n            <span>${lang.name}</span>\n        `;\n        li.onclick = () => loadLanguage(code);\n        \n        if (code === currentLanguage) {\n            li.classList.add('selected');\n        }\n        \n        list.appendChild(li);\n    });\n    \n    modal.style.display = 'flex';\n    setTimeout(() => modal.classList.add('show'), 10);\n}\n\nfunction closeLanguageModal() {\n    const modal = document.getElementById('languageModal');\n    if (modal) {\n        modal.classList.remove('show');\n        setTimeout(() => modal.style.display = 'none', 300);\n    }\n}\n\n// Inicjalizacja systemu tłumaczeń\nasync function initLanguageSystem() {\n    const lang = loadLanguagePreference();\n    await loadLanguage(lang);\n    \n    // Event listener dla przycisku języka\n    const languageToggle = document.getElementById('languageToggle');\n    if (languageToggle) {\n        languageToggle.addEventListener('click', openLanguageModal);\n    }\n}\n\nfunction exportTextsForTranslation() {\n    const texts = {};\n    \n    // Selektory elementów, które zawierają dynamiczne treści (ignoruj)\n    const dynamicSelectors = [\n        '.price-difference',\n        '.stat-value',\n        '.summary-value',\n        '.detail-value',\n        '.log-message',\n        '.notification',\n        '#totalValue',\n        '#purchaseValue',\n        '#currentValue',\n        '#valueDifference',\n        '#totalProfit',\n        '#totalLoss',\n        '#productsWithPrice',\n        '#totalProducts',\n        '#profitPercentage',\n        '#lossPercentage',\n        '.gallery-count',\n        '.selection-counter',\n        '.gallery-pagination-info',\n        '.page-info',\n        '.memory-stats span',\n        '.browser-info',\n        '.progress-text',\n        '.product h3',\n        '.product-content',\n        '.old-product-item',\n        '.empty-state',\n        '.gold-buyback-value',\n        '.preview-detail-value',\n        '.extended-stat-value',\n        '.extended-list-item',\n        '.stat-table td'\n    ];\n\n    // Funkcja sprawdzająca czy element jest dynamiczny\n    function isDynamicElement(element) {\n        // Sprawdź czy element lub jego rodzic jest na liście dynamicznych selektorów\n        return dynamicSelectors.some(selector => element.matches(selector) || element.closest(selector));\n    }\n\n    // Funkcja sprawdzająca czy tekst jest stały (nie dynamiczny)\n    function isStaticText(text) {\n        const dynamicPatterns = [\n            /^\\d+[,.]?\\d*\\s*[zł€$%]$/i, // ceny, procenty\n            /^\\d+[,.]?\\d*$/, // same liczby\n            /^\\d+\\s*\\/\\s*\\d+$/, // format \"10 / 20\"\n            /^[0-9:]+$/, // godziny, daty numeryczne\n            /^\\d{4}-\\d{2}-\\d{2}/, // daty\n            /^[0-9.,]+\\s*[MBKB]$/i, // rozmiary plików\n            /^[0-9.]+%$/, // procenty\n            /^(0|100)%$/ // typowe wartości procentowe\n        ];\n\n        return !dynamicPatterns.some(pattern => pattern.test(text.trim()));\n    }\n\n    // Zbierz teksty z elementów\n    document.querySelectorAll('body *').forEach(element => {\n        // Pomijaj elementy dynamiczne\n        if (isDynamicElement(element)) return;\n\n        // Pomijaj elementy z klasami wskazującymi na dynamiczną zawartość\n        if (element.classList.contains('dynamic') || \n            element.classList.contains('calculated') ||\n            element.id && element.id.includes('Value') ||\n            element.id && element.id.includes('Count') ||\n            element.id && element.id.includes('Total')) {\n            return;\n        }\n\n        // Pomijaj elementy wewnątrz produktów (są dynamiczne)\n        if (element.closest('.product') && !element.closest('.button-group')) {\n            return;\n        }\n\n        // Pomijaj elementy wewnątrz statystyk\n        if (element.closest('.stats-container') && !element.closest('h2')) {\n            return;\n        }\n\n        // Tylko elementy bez dzieci lub z prostą strukturą\n        if (element.children.length === 0 || \n            (element.children.length === 1 && element.children[0].tagName === 'I')) {\n            \n            const text = element.textContent.trim();\n            \n            if (text && \n                text.length > 1 && \n                isStaticText(text) &&\n                !texts[text] &&\n                // Dodatkowe filtry dla polskich tekstów\n                (text.includes(' ') || text.length > 3) && // musi być dłuższy niż 3 znaki lub zawierać spacje\n                !text.match(/^[A-Z]{2,4}$/) && // pomijaj skróty walut\n                !text.match(/^[0-9]+$/) // pomijaj same liczby\n            ) {\n                texts[text] = text;\n            }\n        }\n    });\n    \n    // Zbierz placeholdery (tylko stałe)\n    document.querySelectorAll('[placeholder]').forEach(element => {\n        const text = element.getAttribute('placeholder');\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n    \n    // Zbierz tytuły (tylko stałe)\n    document.querySelectorAll('[title]').forEach(element => {\n        const text = element.getAttribute('title');\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n    \n    // Zbierz wartości przycisków (tylko stałe)\n    document.querySelectorAll('button:not(.product button), input[type=\"submit\"]').forEach(element => {\n        const text = element.textContent.trim() || element.value;\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n\n    // Zbierz etykiety formularzy\n    document.querySelectorAll('label').forEach(element => {\n        const text = element.textContent.trim();\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n\n    // Zbierz nagłówki\n    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(element => {\n        const text = element.textContent.trim();\n        if (text && isStaticText(text) && !texts[text]) {\n            texts[text] = text;\n        }\n    });\n\n    // Ręcznie dodaj kluczowe teksty, które mogły być pominięte\n    const manualTexts = {\n        'Magazyn Produktów': 'Magazyn Produktów',\n        'Kontrolki': 'Kontrolki',\n        'Dodaj nowy produkt': 'Dodaj nowy produkt',\n        'Eksportuj dane': 'Eksportuj dane',\n        'Importuj dane': 'Importuj dane',\n        'Kurs walut': 'Kurs walut',\n        'Kategorie': 'Kategorie',\n        'Galeria zdjęć': 'Galeria zdjęć',\n        'Sklepy': 'Sklepy',\n        'Efekty': 'Efekty',\n        'Pamięć': 'Pamięć',\n        'Historia / Logi': 'Historia / Logi',\n        'Wyczyść wszystkie dane': 'Wyczyść wszystkie dane',\n        'Zapisz wszystko': 'Zapisz wszystko',\n        'Ustawienia': 'Ustawienia',\n        'Instrukcja': 'Instrukcja',\n        'Statystyki magazynu': 'Statystyki magazynu',\n        'Wartość magazynu (podczas zakupu)': 'Wartość magazynu (podczas zakupu)',\n        'Wartość zakupu produktów': 'Wartość zakupu produktów',\n        'Aktualna wartość produktów': 'Aktualna wartość produktów',\n        'Różnica wartości': 'Różnica wartości',\n        'Łączny zysk': 'Łączny zysk',\n        'Łączna strata': 'Łączna strata',\n        'Produkty z ceną': 'Produkty z ceną',\n        'Lista produktów': 'Lista produktów',\n        'Filtruj po kategorii:': 'Filtruj po kategorii:',\n        'Wszystkie kategorie': 'Wszystkie kategorie',\n        'Sortuj:': 'Sortuj:',\n        'Nazwa (A-Z)': 'Nazwa (A-Z)',\n        'Nazwa (Z-A)': 'Nazwa (Z-A)',\n        'Kategoria (A-Z)': 'Kategoria (A-Z)',\n        'Kategoria (Z-A)': 'Kategoria (Z-A)',\n        'Cena zakupu (rosnąco)': 'Cena zakupu (rosnąco)',\n        'Cena zakupu (malejąco)': 'Cena zakupu (malejąco)',\n        'Rok zakupu (rosnąco)': 'Rok zakupu (rosnąco)',\n        'Rok zakupu (malejąco)': 'Rok zakupu (malejąco)',\n        'Ilość (rosnąco)': 'Ilość (rosnąco)',\n        'Ilość (malejąco)': 'Ilość (malejąco)',\n        'Zysk (rosnąco)': 'Zysk (rosnąco)',\n        'Zysk (malejąco)': 'Zysk (malejąco)',\n        'Data dodania (rosnąco)': 'Data dodania (rosnąco)',\n        'Data dodania (malejąco)': 'Data dodania (malejąco)',\n        'Wpisz szukany element...': 'Wpisz szukany element...',\n        'Zaznacz wiele': 'Zaznacz wiele',\n        'Usuń zaznaczone': 'Usuń zaznaczone',\n        'Anuluj zaznaczenie': 'Anuluj zaznaczenie',\n        'Magazyn jest pusty': 'Magazyn jest pusty',\n        'Dodaj pierwszy produkt korzystając z przycisku \"Dodaj nowy produkt\" w sekcji Kontrolki lub sidebar.': 'Dodaj pierwszy produkt korzystając z przycisku \"Dodaj nowy produkt\" w sekcji Kontrolki lub sidebar.'\n    };\n\n    // Połącz ręczne teksty z automatycznie znalezionymi\n    const allTexts = { ...texts, ...manualTexts };\n\n    // Sortuj alfabetycznie dla lepszej czytelności\n    const sortedTexts = {};\n    Object.keys(allTexts).sort().forEach(key => {\n        sortedTexts[key] = allTexts[key];\n    });\n\n    // Stwórz i pobierz plik JSON\n    const dataStr = JSON.stringify(sortedTexts, null, 2);\n    const dataBlob = new Blob([dataStr], {type: 'application/json'});\n    \n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'translation_base_PL.json';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    console.log('Wyeksportowano teksty do tłumaczenia:', sortedTexts);\n    showNotification('Stałe teksty wyeksportowane do pliku JSON', 'success');\n    \n    return sortedTexts;\n}\nwindow.exportTranslations = exportTextsForTranslation;\nwindow.quickExport = quickExportTranslations;\nfunction quickExportTranslations() {\n    console.log('Eksportowanie tekstów do tłumaczenia...');\n    const result = exportTextsForTranslation();\n    console.log('Wyeksportowane teksty:', result);\n}\n// Wywołaj inicjalizację po załadowaniu DOM\ndocument.addEventListener('DOMContentLoaded', initLanguageSystem);\nlet paginationConfig = JSON.parse(localStorage.getItem('paginationConfig')) || {\n  productsPerPage: 20,\n  categoriesPerPage: 10,\n  effectsPerPage: 10,\n  shopsPerPage: 10,\n  currenciesPerPage: 10,\n  logsPerPage: 10,\n  galleryItemsPerPage: 16,\n  backgroundItemsPerPage: 10\n}\nlet currencyConfig = JSON.parse(localStorage.getItem('currencyConfig')) || {\n    extendedStatsCurrency: 'PLN',\n    mainStatsCurrency: 'PLN',\n    priceDiffCurrency: 'PLN', \n    priceHistoryCurrency: 'PLN',\n    otherListsCurrency: 'PLN',\n    goldBuybackCurrency: 'PLN'\n};\nconst SOUND_URLS = {\n  success: \"data:audio/mpeg;base64,n  alert: \"data:audio/mpeg;base64,\"\n};\nlet priceTrendAllow = false;\nlet productsCurrentPage = 1;\nlet categoriesCurrentPage = 1;\nlet effectsCurrentPage = 1;\nlet shopsCurrentPage = 1;\nlet currenciesCurrentPage = 1;\nlet eventLogs = [];\nlet productNameHelpModalTimeout = null;\nlet isHelpModalOpen = false;\nlet logsCurrentPage = 1;\nlet logsPerPage = paginationConfig.logsPerPage;\nlet currentDisplayedProducts = [];\nlet currentFilter = 'all';\nlet currentSort = 'date-asc';\nlet currentSearch = '';\nlet editingProductIndex = null;\nlet priceTrendCache = JSON.parse(localStorage.getItem('priceTrendCache')) || {};\nconst PRICE_TREND_CACHE_DURATION = 3 * 60 * 60 * 1000;\nlet soundAllowed = false;\ndocument.addEventListener('click', () => { soundAllowed = true; }, { once: true });\nlet confirmationCallback = null;\nlet confirmationContext = null;\nlet editingShopId = null;\nlet showControlsPanel = true;\nlet showHamburgerOnDesktop = false;\nlet showInstructionButton = true;\nlet showStatisticsSection = true;\nlet showNotifications = true;\nlet showAdvancedButtons = true;\nlet editingCategoryIndex = null;\nlet editingGalleryImageIndex = null;\nlet editingCurrencyCode = null;\nlet galleryCurrentPage = 1;\nlet galleryTotalPages = 1;\nlet galleryFilteredImages = [];\nlet galleryDisplayedIndexes = [];\nlet notificationQueue = [];\nlet isNotificationVisible = false;\nlet audioContextUnlocked = false;\nlet galleryOpenMode = null;\nlet selectedImageUrl = null;\nlet gallerySearchTerm = '';\nlet gallerySelectionMode = false;\nlet selectedGalleryImages = [];\nlet galleryImages = [];\nlet backgroundImages = [];\nlet backgroundCurrentPage = 1;\nlet backgroundTotalPages = 1;\nlet backgroundSelectionMode = false;\nlet selectedBackgroundImages = [];\nlet selectedBackgroundId = null;\nlet backgroundSearchTerm = '';\nlet editingBackgroundIndex = null;\nconst CARD_CONDITIONS = ['Mint', 'Near Mint', 'Excellent', 'Good', 'Light Played', 'Played', 'Poor'];\nconst LANGUAGES = ['Angielski', 'Japoński', 'Francuski', 'Niemiecki', 'Hiszpański', 'Włoski', 'Portugalski'];\nlet effects = JSON.parse(localStorage.getItem('effects')) || [];\nconst defaultEffects = [\n  \"Common & Uncommon\",\n  \"Reverse Holo non-rares\",\n  \"Holofoil Rare\",\n  \"Galaxy/Cosmos Holofoil\",\n  \"Holofoil Amazing Rare\",\n  \"Radiant Holofoil\",\n  \"Trainer Gallery Holofoil\",\n  \"Pokemon V\",\n  \"Pokemon V (Full Art)\",\n  \"Pokemon V (Alternate Art)\",\n  \"VMax\",\n  \"VMax (Alternate/Rainbow)\",\n  \"VStar\",\n  \"Trainer Holo (Full Art / Trainer Gallery)\",\n  \"Rainbow Rare (VMax, VStar)\",\n  \"Secret Rare (Gold)\",\n  \"Trainer Gallery (V / VMax)\",\n  \"Shiny Vault (Basic / Stage 1 / V / VMax)\"\n];\ndefaultEffects.forEach(defaultEffect => {\n    const exists = effects.some(effect => effect === defaultEffect);\n    if (!exists) {\n        effects.push(defaultEffect);\n    }\n});\nlocalStorage.setItem('effects', JSON.stringify(effects));\nlet editingEffectIndex = null;\nlet goldBuybackInterval = null;\nlet lastGoldBuybackUpdate = null;\nlet systemFontsLoaded = false;\nconst darkModeToggle = document.getElementById('darkModeToggle');\nconst darkModeIcon = document.getElementById('darkModeIcon');\nlet darkMode = localStorage.getItem('darkMode') === 'true';\nlet products = JSON.parse(localStorage.getItem('products')) || [];\nconst productList = document.getElementById('productList');\nconst totalValue = document.getElementById('totalValue');\nconst purchaseValue = document.getElementById('purchaseValue');\nconst currentValue = document.getElementById('currentValue');\nconst valueDifference = document.getElementById('valueDifference');\nconst totalProfit = document.getElementById('totalProfit');\nconst totalLoss = document.getElementById('totalLoss');\nconst profitPercentage = document.getElementById('profitPercentage');\nconst lossPercentage = document.getElementById('lossPercentage');\nconst productsWithPrice = document.getElementById('productsWithPrice');\nconst totalProducts = document.getElementById('totalProducts');\nconst emptyState = document.getElementById('emptyState');\nconst form = document.getElementById('productForm');\nconst notification = document.getElementById('notification');\nconst selectionControls = document.getElementById('selectionControls');\nconst originalShowConfirmation = showConfirmation;\nlet categories = JSON.parse(localStorage.getItem('categories')) || [];\nconst PROTECTED_CATEGORY_NAMES = [\n  'Inne', 'Złoto', 'Singles',\n  'Boosters','Booster Box','Elite Trainer Box','Ultra Premium',\n  'Tins','Mini Tins','Blisters','Trainer Kits','Theme Decks','Box Sets','Akcesoria'\n];\nconst defaultCategories = [\n  { name: 'Inne', bg: '#ededed', text: '#333' },\n  { name: 'Złoto', bg: '#FFD700', text: '#000' },\n  { name: 'Singles', bg: '#6a1b9a', text: '#ffffff' },\n  { name: 'Boosters', bg: '#30e62d', text: '#ffffff' },\n  { name: 'Booster Box', bg: '#d80e0e', text: '#ffffff' },\n  { name: 'Elite Trainer Box', bg: '#577be5', text: '#ffffff' },\n  { name: 'Ultra Premium', bg: '#d35cff', text: '#ffffff' },\n  { name: 'Tins', bg: '#1fd690', text: '#ffffff' },\n  { name: 'Mini Tins', bg: '#4421f2', text: '#ffffff' },\n  { name: 'Blisters', bg: '#c44703', text: '#ffffff' },\n  { name: 'Trainer Kits', bg: '#2ff9eb', text: '#333' },\n  { name: 'Theme Decks', bg: '#f96cd3', text: '#333' },\n  { name: 'Box Sets', bg: '#d7f019', text: '#333' },\n  { name: 'Akcesoria', bg: '#000000', text: '#ffffff' }\n];\ndefaultCategories.forEach(defaultCat => {\n    const exists = categories.some(cat => cat.name === defaultCat.name);\n    if (!exists) {\n        categories.push(defaultCat);\n    }\n});\nlocalStorage.setItem('categories', JSON.stringify(categories));\nconst categorySelect = document.getElementById('category');\nconst categoryFilter = document.getElementById('categoryFilter');\nlet currencySymbols = JSON.parse(localStorage.getItem('currencySymbols')) || { PLN: 'zł', EUR: '€', USD: '$' };\nlet exchangeRates = JSON.parse(localStorage.getItem('exchangeRates')) || { EUR: 4.25, USD: 3.62, PLN: 1.0, lastUpdated: null };\nlet selectedProducts = [];\nlet selectionMode = false;\nconst NBP_API_URL = 'https://api.nbp.pl/api/exchangerates/rates/a/';\nclass PokeballLoader {\n\tconstructor(elementId) {\n\t\tthis.element = document.getElementById(elementId);\n\t\tthis.textElement\t = this.element?.querySelector('.loader-text')\t|| null;\n\t\tthis.pokeballElement = this.element?.querySelector('.pokeball')\t\t|| null;\n\t\tthis.progress\t\t= 0;\n\t\tthis.isAnimating\t = false;\n\t}\n\tstart(progress = 0) {\n\t\tthis.isAnimating = true;\n\t\tif (this.element) {\n\t\t\tthis.element.style.display = 'flex';\n\t\t\tthis.element.classList.add('loading-active');\n\t\t\tthis.element.classList.remove('loading-complete');\n\t\t}\n\t\tdocument.body.classList.add('loading-active');\n\t\tthis.update(progress);\n\t\treturn this;\n\t}\n\tupdate(progress) {\n\t\tif (!this.isAnimating) return this;\n\t\tthis.progress = Math.max(0, Math.min(100, progress));\n\t\tif (this.textElement) {\n\t\t\tthis.textElement.textContent = `${Math.round(this.progress)}%`;\n\t\t}\n\t\treturn this;\n\t}\n\tcomplete() {\n\t\tif (this.element) {\n\t\t\tthis.element.classList.remove('loading-active');\n\t\t\tthis.element.classList.add('loading-complete');\n\t\t}\n\t\tthis.update(100);\n\t\treturn this;\n\t}\n\treset() {\n\t\tthis.progress = 0;\n\t\tif (this.textElement) {\n\t\t\tthis.textElement.textContent = '0%';\n\t\t}\n\t\tif (this.element) {\n\t\t\tthis.element.style.display = 'none';\n\t\t\tthis.element.classList.remove('loading-active', 'loading-complete');\n\t\t}\n\t\tdocument.body.classList.remove('loading-active');\n\t\tthis.isAnimating = false;\n\t\treturn this;\n\t}\n}\nclass PriceHistory {\n  constructor(dbName = 'product_db', storeName = 'price_history') {\n    this.dbName = dbName;\n    this.storeName = storeName;\n    this.dbPromise = this.openDB();\n  }\n  async openDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, 3);\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        const oldVersion = event.oldVersion;\n        if (oldVersion < 1) {\n          const store = db.createObjectStore(this.storeName, {\n            keyPath: 'id',\n            autoIncrement: true\n          });\n          store.createIndex('productId', 'productId', { unique: false });\n        }\n        if (oldVersion < 2) {\n          const transaction = event.target.transaction;\n          const store = transaction.objectStore(this.storeName);\n          \n          if (!store.indexNames.contains('date')) {\n            store.createIndex('date', 'date', { unique: false });\n          }\n        }\n        if (oldVersion < 3) {\n          logEvent(\"Migracja do wersji 3 bazy danych\");\n        }\n      };\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        this.migrateOldRecords(db).then(() => {\n          resolve(db);\n        }).catch(error => {\n          logEvent('Błąd migracji rekordów:', error);\n          resolve(db);\n        });\n      };\n      \n      request.onerror = (event) => reject(event.target.error);\n    });\n  }\n  async migrateOldRecords(db) {\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      const request = store.getAll();\n      request.onsuccess = async () => {\n        const records = request.result;\n        let updatedCount = 0;\n        let needsHistoricalUpdate = false;\n        for (const record of records) {\n          let shouldUpdate = false;\n          if (record.exchangeRate === undefined) {\n            record.exchangeRate = exchangeRates[record.currency] || 1;\n            record.needsHistoricalUpdate = true;\n            shouldUpdate = true;\n            needsHistoricalUpdate = true;\n          }\n          if (record.needsHistoricalUpdate === undefined) {\n            record.needsHistoricalUpdate = false;\n            shouldUpdate = true;\n          }\n          \n          if (shouldUpdate) {\n            await store.put(record);\n            updatedCount++;\n          }\n        }\n\n        if (updatedCount > 0) {\n          if (needsHistoricalUpdate) {\n            this.updateHistoricalRatesInBackground();\n          }\n        }\n        resolve();\n      };\n\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async updateHistoricalRatesInBackground() {\n    setTimeout(async () => {\n      try {\n        const updatedCount = await this.updateHistoricalRates();\n        if (updatedCount > 0) {\n          showNotification(`Zaktualizowano historyczne kursy dla ${updatedCount} rekordów`, 'success');\n        }\n      } catch (error) {\n        logEvent('Błąd aktualizacji historycznych kursów:', error);\n      }\n    }, 5000);\n  }\n\n  async getHistoricalExchangeRate(currency, date) {\n    if (currency === 'PLN') return 1;\n    const formattedDate = date.toISOString().split('T')[0];\n    try {\n      const cacheKey = `historical_rate_${currency}_${formattedDate}`;\n      const cachedRate = localStorage.getItem(cacheKey);\n      \n      if (cachedRate) {\n        return parseFloat(cachedRate);\n      }\n      const response = await fetch(`https://api.nbp.pl/api/exchangerates/rates/a/${currency}/${formattedDate}/?format=json`);\n      if (!response.ok) {\n        return await this.getLastAvailableRate(currency, date);\n      }\n      const data = await response.json();\n      const rate = data.rates[0].mid;\n      localStorage.setItem(cacheKey, rate.toString());\n      return rate;\n    } catch (error) {\n      logEvent(`Błąd pobierania historycznego kursu dla ${currency} z dnia ${formattedDate}:`, error);\n      return await this.getLastAvailableRate(currency, date) || exchangeRates[currency] || 1;\n    }\n  }\n  async getLastAvailableRate(currency, date) {\n    for (let i = 1; i <= 7; i++) {\n      const previousDate = new Date(date);\n      previousDate.setDate(previousDate.getDate() - i);\n      \n      const formattedDate = previousDate.toISOString().split('T')[0];\n      const cacheKey = `historical_rate_${currency}_${formattedDate}`;\n      const cachedRate = localStorage.getItem(cacheKey);\n      \n      if (cachedRate) {\n        return parseFloat(cachedRate);\n      }\n      try {\n        const response = await fetch(`https://api.nbp.pl/api/exchangerates/rates/a/${currency}/${formattedDate}/?format=json`);\n        \n        if (response.ok) {\n          const data = await response.json();\n          const rate = data.rates[0].mid;\n          localStorage.setItem(cacheKey, rate.toString());\n          return rate;\n        }\n      } catch (error) {\n        logEvent(`Błąd pobierania kursu z dnia ${formattedDate}:`, error);\n      }\n    }\n    return null;\n  }\n  async getPriceHistory(productId) {\n    const db = await this.dbPromise;\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readonly');\n      const store = tx.objectStore(this.storeName);\n      const index = store.index('productId');\n      const request = index.getAll(IDBKeyRange.only(productId));\n      request.onsuccess = () => {\n        const data = request.result\n          .map(item => ({ \n            id: item.id,\n            date: new Date(item.date), \n            price: item.price,\n            currency: item.currency,\n            exchangeRate: item.exchangeRate,\n            needsHistoricalUpdate: item.needsHistoricalUpdate || false\n          }))\n          .sort((a, b) => a.date - b.date);\n        resolve(data);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n  async addPricePoint(productId, price, currency, date = new Date()) {\n    const db = await this.dbPromise;\n    const exchangeRate = exchangeRates[currency];\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      const request = store.add({\n        id: generateUniqueId(),\n        productId,\n        price,\n        currency,\n        exchangeRate,\n        needsHistoricalUpdate: false,\n        date: date.toISOString()\n      });\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n  async updateHistoricalRates() {\n    const db = await this.dbPromise;\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      const request = store.getAll();\n      request.onsuccess = async () => {\n        const records = request.result;\n        let updatedCount = 0;\n        for (const record of records) {\n          if (record.needsHistoricalUpdate) {\n            const historicalRate = await this.getHistoricalExchangeRate(\n              record.currency, \n              new Date(record.date)\n            );\n            if (historicalRate && historicalRate !== record.exchangeRate) {\n              record.exchangeRate = historicalRate;\n              record.needsHistoricalUpdate = false;\n              await store.put(record);\n              updatedCount++;\n            }\n          }\n        }\n        resolve(updatedCount);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\nconst priceHistory = new PriceHistory();\nfunction openPaginationConfigModal() {\n  document.getElementById('productsPerPageInput').value = paginationConfig.productsPerPage;\n  document.getElementById('categoriesPerPageInput').value = paginationConfig.categoriesPerPage;\n  document.getElementById('effectsPerPageInput').value = paginationConfig.effectsPerPage;\n  document.getElementById('shopsPerPageInput').value = paginationConfig.shopsPerPage;\n  document.getElementById('currenciesPerPageInput').value = paginationConfig.currenciesPerPage;\n  document.getElementById('logsPerPageInput').value = paginationConfig.logsPerPage;\n  document.getElementById('galleryItemsPerPageInput').value = paginationConfig.galleryItemsPerPage;\n  document.getElementById('backgroundItemsPerPageInput').value = paginationConfig.backgroundItemsPerPage;\n  document.getElementById('paginationConfigModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('paginationConfigModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction closePaginationConfigModal() {\n  document.getElementById('paginationConfigModal').classList.remove('show');\n}\nfunction savePaginationConfig() {\n  paginationConfig.productsPerPage = parseInt(document.getElementById('productsPerPageInput').value) || 20;\n  paginationConfig.categoriesPerPage = parseInt(document.getElementById('categoriesPerPageInput').value) || 10;\n  paginationConfig.effectsPerPage = parseInt(document.getElementById('effectsPerPageInput').value) || 10;\n  paginationConfig.shopsPerPage = parseInt(document.getElementById('shopsPerPageInput').value) || 10;\n  paginationConfig.currenciesPerPage = parseInt(document.getElementById('currenciesPerPageInput').value) || 10;\n  paginationConfig.logsPerPage = parseInt(document.getElementById('logsPerPageInput').value) || 10;\n  paginationConfig.galleryItemsPerPage = parseInt(document.getElementById('galleryItemsPerPageInput').value) || 16;\n  paginationConfig.backgroundItemsPerPage = parseInt(document.getElementById('backgroundItemsPerPageInput').value) || 18;\n  if (paginationConfig.productsPerPage < 5) paginationConfig.productsPerPage = 5;\n  if (paginationConfig.productsPerPage > 100) paginationConfig.productsPerPage = 100;\n  if (paginationConfig.categoriesPerPage < 5) paginationConfig.categoriesPerPage = 5;\n  if (paginationConfig.categoriesPerPage > 50) paginationConfig.categoriesPerPage = 50;\n  if (paginationConfig.effectsPerPage < 5) paginationConfig.effectsPerPage = 5;\n  if (paginationConfig.effectsPerPage > 50) paginationConfig.effectsPerPage = 50;\n  if (paginationConfig.shopsPerPage < 5) paginationConfig.shopsPerPage = 5;\n  if (paginationConfig.shopsPerPage > 50) paginationConfig.shopsPerPage = 50;\n  if (paginationConfig.currenciesPerPage < 5) paginationConfig.currenciesPerPage = 5;\n  if (paginationConfig.currenciesPerPage > 50) paginationConfig.currenciesPerPage = 50;\n  if (paginationConfig.logsPerPage < 5) paginationConfig.logsPerPage = 5;\n  if (paginationConfig.logsPerPage > 50) paginationConfig.logsPerPage = 50;\n  if (paginationConfig.galleryItemsPerPage < 8) paginationConfig.galleryItemsPerPage = 8;\n  if (paginationConfig.galleryItemsPerPage > 48) paginationConfig.galleryItemsPerPage = 48;\n  if (paginationConfig.galleryItemsPerPage % 4 !== 0) {\n    paginationConfig.galleryItemsPerPage = Math.round(paginationConfig.galleryItemsPerPage / 4) * 4;\n  }\n  if (paginationConfig.backgroundItemsPerPage < 6) paginationConfig.backgroundItemsPerPage = 6;\n  if (paginationConfig.backgroundItemsPerPage > 36) paginationConfig.backgroundItemsPerPage = 36;\n  if (paginationConfig.backgroundItemsPerPage % 6 !== 0) {\n    paginationConfig.backgroundItemsPerPage = Math.round(paginationConfig.backgroundItemsPerPage / 6) * 6;\n  }\n  localStorage.setItem('paginationConfig', JSON.stringify(paginationConfig));\n  const refreshModal = (modalId, currentPageVar, renderFunction) => {\n    const modal = document.getElementById(modalId);\n    if (modal && modal.classList.contains('show')) {\n      currentPageVar = 1;\n      renderFunction();\n    }\n  };\n  refreshModal('productsModal', productsCurrentPage, () => renderProducts(applyAllFilters()));\n  refreshModal('categoriesModal', categoriesCurrentPage, renderCategoriesList);\n  refreshModal('effectsModal', effectsCurrentPage, renderEffectsList);\n  refreshModal('shopsModal', shopsCurrentPage, renderShopsList);\n  refreshModal('exchangeModal', currenciesCurrentPage, renderExchangeRates);\n  refreshModal('logsModal', logsCurrentPage, renderLogs);\n  refreshModal('galleryModal', galleryCurrentPage, renderGallery);\n  refreshModal('backgroundModal', backgroundCurrentPage, renderBackgrounds);\n  closePaginationConfigModal();\n  logEvent('Zaktualizowano konfigurację paginacji');\n  showNotification('Konfiguracja paginacji zapisana', 'success');\n  playNotificationSound('success');\n}\nfunction addPaginationInfo() {\n  const containers = [\n    { id: 'productsPagination', type: 'produktów', value: paginationConfig.productsPerPage },\n    { id: 'categoriesPagination', type: 'kategorii', value: paginationConfig.categoriesPerPage },\n    { id: 'effectsPagination', type: 'efektów', value: paginationConfig.effectsPerPage },\n    { id: 'shopsPagination', type: 'sklepów', value: paginationConfig.shopsPerPage },\n    { id: 'currenciesPagination', type: 'walut', value: paginationConfig.currenciesPerPage },\n    { id: 'logsPagination', type: 'logów', value: paginationConfig.logsPerPage }\n  ];\n}\nasync function renderPriceHistoryChart(productId) {\n    const chartContainer = document.querySelector('.price-chart-container');\n    if (!chartContainer) return;\n    chartContainer.innerHTML = '<div class=\"price-chart-loading\"></div>';\n    try {\n        const history = await priceHistory.getPriceHistory(productId);\n        if (!history || history.length < 2) {\n            chartContainer.innerHTML = '<div class=\"no-data-message\">Wymagane minimum 2 punkty danych</div>';\n            return;\n        }\n        const isMobile = window.innerWidth <= 768;\n        const labels = [];\n        const data = [];\n        const needsUpdate = history.some(point => point.needsHistoricalUpdate);\n        if (needsUpdate) {\n            chartContainer.innerHTML = `\n                <div class=\"historical-update-info\">\n                    <p>Trwa aktualizacja historycznych kursów walut...</p>\n                    <div class=\"progress-bar\">\n                        <div class=\"progress\"></div>\n                    </div>\n                    <p>Wykres zostanie odświeżony automatycznie</p>\n                </div>\n            `;\n            setTimeout(() => {\n                renderPriceHistoryChart(productId);\n            }, 3000);\n            return;\n        }\n        const targetCurrency = currencyConfig.priceHistoryCurrency;\n        history.forEach(entry => {\n            const date = new Date(entry.date);\n            labels.push(`${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`);\n            const convertedValue = convertToCurrency(entry.price, entry.currency, targetCurrency);\n            data.push(convertedValue);\n        });\n        chartContainer.innerHTML = '<canvas id=\"priceHistoryChart\"></canvas>';\n        const ctx = document.getElementById('priceHistoryChart').getContext('2d');\n        if (window.priceChartInstance) {\n            window.priceChartInstance.destroy();\n        }\n        window.priceHistoryData = history;\n        window.priceChartInstance = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: `Cena (${getCurrencySymbol(targetCurrency)})`,\n                    data: data,\n                    borderColor: '#4DB6AC',\n                    backgroundColor: 'rgba(77, 182, 172, 0.1)',\n                    borderWidth: 3,\n                    pointBackgroundColor: '#00796B',\n                    pointBorderColor: '#004D40',\n                    pointRadius: isMobile ? 3 : 5,\n                    pointHoverRadius: isMobile ? 5 : 7,\n                    tension: 0.4,\n                    fill: true\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const point = history[context.dataIndex];\n                                const convertedValue = convertToCurrency(point.price, point.currency, targetCurrency);\n                                return `Cena: ${convertedValue.toFixed(2)} ${getCurrencySymbol(targetCurrency)} (${point.price} ${point.currency})`;\n                            },\n                            afterLabel: function(context) {\n                                const point = history[context.dataIndex];\n                                return `Kurs: 1 ${point.currency} = ${point.exchangeRate} PLN`;\n                            }\n                        }\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: false,\n                        grid: {\n                            color: 'rgba(0, 0, 0, 0.05)'\n                        },\n                        ticks: {\n                            display: !isMobile,\n                            callback: function(value) {\n                                return value.toFixed(2) + ` ${getCurrencySymbol(targetCurrency)}`;\n                            }\n                        },\n                        title: {\n                            display: !isMobile,\n                            text: `Aktualna cena (${getCurrencySymbol(targetCurrency)})`\n                        }\n                    },\n                    x: {\n                        grid: {\n                            display: false\n                        },\n                        ticks: {\n                            display: !isMobile\n                        }\n                    }\n                },\n                animation: {\n                    duration: 1000,\n                    easing: 'easeOutQuart'\n                }\n            }\n        });\n        ctx.canvas.onclick = async (event) => {\n            const points = window.priceChartInstance.getElementsAtEventForMode(\n                event, 'nearest', { intersect: true }, true\n            );\n            if (points.length) {\n                const pointIndex = points[0].index;\n                const point = history[pointIndex];\n                showPointDetails(point);\n            }\n        };\n    } catch (error) {\n        logEvent('Błąd renderowania wykresu:', error);\n        chartContainer.innerHTML = '<div class=\"error-message\">Błąd generowania wykresu</div>';\n    }\n}\ndocument.getElementById('reloadSound').addEventListener('click', function(e) {\n  e.preventDefault();\n  const successAudio = new Audio(SOUND_URLS.success);\n  successAudio.load().catch(e => logEvent('Failed to load success sound', e));\n  const alertAudio = new Audio(SOUND_URLS.alert);\n  alertAudio.load().catch(e => logEvent('Failed to load alert sound', e));\n  showNotification('Dźwięki zostały przeładowane. Spróbuj ponownie.', 'info');\n});\nfunction convertToPLN(amount, currency) {\n    if (currency === 'PLN') {\n        return amount;\n    }\n    if (!exchangeRates[currency]) {\n        logEvent(`Nieznana waluta: ${currency}. Dostępne kursy:`, exchangeRates);\n        throw new Error(`Nieznana waluta: ${currency}`);\n    }\n    const rate = exchangeRates[currency];\n    if (isNaN(rate) || rate <= 0) {\n        logEvent(`Nieprawidłowy kurs wymiany dla ${currency}: ${rate}`);\n        throw new Error(`Nieprawidłowy kurs wymiany dla ${currency}`);\n    }\n    return amount * rate;\n}\nfunction handleResponsiveLayout() {\n  const sidebar = document.getElementById('sidebar');\n  const controlsPanel = document.querySelector('.controls-panel');\n  const hamburger = document.getElementById('hamburger');\n  if (window.innerWidth <= 992) {\n    if (hamburger) hamburger.style.display = 'flex';\n    if (controlsPanel) controlsPanel.style.display = 'none';\n    if (sidebar) {\n      sidebar.style.display = 'block';\n      sidebar.classList.remove('show');\n    }\n  } else {\n    if (hamburger) hamburger.style.display = showHamburgerOnDesktop ? 'flex' : 'none';\n    if (controlsPanel) controlsPanel.style.display = showControlsPanel ? 'block' : 'none';\n    if (sidebar) {\n      sidebar.style.display = showHamburgerOnDesktop ? 'block' : 'none';\n      sidebar.classList.remove('show');\n      document.getElementById('sidebarOverlay').classList.remove('show');\n    }\n  }\n}\nasync function migrateExistingProducts() {\n  const loader = new PokeballLoader('pokeballLoader').start(0);\n  try {\n    for (const [index, product] of products.entries()) {\n      loader.update((index / products.length) * 80);\n      if (!product.id) {\n        product.id = generateUniqueId();\n      }\n      const history = await priceHistory.getPriceHistory(product.id);\n      if (history.length === 0) {\n        const initialPrice = product.currentPrice !== null ? \n          product.currentPrice : product.price;\n        const initialCurrency = product.currentPrice !== null ? \n          (product.currentCurrency || product.currency) : product.currency;\n        await priceHistory.addPricePoint(\n          product.id,\n          initialPrice,\n          initialCurrency,\n          new Date(product.dateAdded)\n        );\n        const db = await priceHistory.dbPromise;\n        const tx = db.transaction('price_history', 'readwrite');\n        const store = tx.objectStore('price_history');\n        const allPoints = await store.getAll();\n        for (const point of allPoints) {\n            if (!point.id) {\n                point.id = generateUniqueId();\n                await store.put(point);\n            }\n        }\n      }\n    }\n    showNotification('Zaktualizowano historię cen dla istniejących produktów', 'success');\n    playNotificationSound('success');\n  } catch (error) {\n    logEvent('Błąd migracji produktów:', error);\n    showNotification('Błąd podczas aktualizacji historii cen', 'danger');\n  } finally {\n    loader.complete();\n    setTimeout(() => loader.reset(), 500);\n  }\n}\nfunction initLogs() {\n    const savedLogs = localStorage.getItem('eventLogs');\n    if (savedLogs) {\n        try {\n            eventLogs = JSON.parse(savedLogs);\n            cleanupOldLogs();\n        } catch (e) {\n            eventLogs = [];\n            logEvent('Błąd parsowania logów, zainicjowano nowe');\n        }\n    } else {\n        logEvent('Aplikacja została uruchomiona');\n    }\n}\ndocument.addEventListener('DOMContentLoaded', initLogs);\nfunction saveLogs() {\n  localStorage.setItem('eventLogs', JSON.stringify(eventLogs));\n}\nfunction applyAllFilters() {\n  let result = [...products];\n  if (currentFilter !== 'all') {\n    result = result.filter(p => p.category === currentFilter);\n  }\n  if (currentSearch) {\n    const term = currentSearch.toLowerCase();\n    result = result.filter(p => \n      p.name.toLowerCase().includes(term) || \n      p.category.toLowerCase().includes(term) ||\n      (p.effect && p.effect.toLowerCase().includes(term)) ||\n      String(p.year).includes(term)\n    );\n  }\n  result = sortList(result, currentSort);\n  return result;\n}\nfunction sortList(list, criteria) {\n  return [...list].sort((a, b) => {\n    if (criteria === 'name-asc') return a.name.localeCompare(b.name);\n    if (criteria === 'name-desc') return b.name.localeCompare(a.name);\n    if (criteria === 'category-asc') return a.category.localeCompare(b.category);\n    if (criteria === 'category-desc') return b.category.localeCompare(a.category);\n    if (criteria === 'price-asc') return a.price - b.price;\n    if (criteria === 'price-desc') return b.price - a.price;\n    if (criteria === 'year-asc') return a.year - b.year;\n    if (criteria === 'year-desc') return b.year - a.year;\n    if (criteria === 'quantity-asc') return a.quantity - b.quantity;\n    if (criteria === 'quantity-desc') return b.quantity - a.quantity;\n    if (criteria === 'date-asc') return new Date(a.dateAdded) - new Date(b.dateAdded);\n    if (criteria === 'date-desc') return new Date(b.dateAdded) - new Date(a.dateAdded);\n    if (criteria.includes('profit')) {\n      const calcProfit = (p) => {\n        if (!p.currentPrice) return 0;\n        const purchasePLN = convertToPLN(p.price, p.currency);\n        const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n        return (currentPLN - purchasePLN) * p.quantity;\n      };\n      const profitA = calcProfit(a);\n      const profitB = calcProfit(b);\n      return criteria === 'profit-asc' ? profitA - profitB : profitB - profitA;\n    }\n    return 0;\n  });\n}\nfunction logEvent(message) {\n  const timestamp = new Date().toISOString();\n  eventLogs.push({ timestamp, message });\n  saveLogs();\n}\nfunction renderLogs() {\n  const logsList = document.getElementById('logsList');\n  logsList.innerHTML = '';\n  const reversedLogs = [...eventLogs].reverse();\n  const startIndex = (logsCurrentPage - 1) * logsPerPage;\n  const endIndex = Math.min(startIndex + logsPerPage, reversedLogs.length);\n  const logsToShow = reversedLogs.slice(startIndex, endIndex);\n  \n  if (logsToShow.length === 0) {\n    logsList.innerHTML = '<div class=\"log-entry\">Brak zdarzeń w historii</div>';\n  } else {\n    logsToShow.forEach(log => {\n      const logEntry = document.createElement('div');\n      logEntry.className = 'log-entry';\n      const dateObj = new Date(log.timestamp);\n      const formattedDate = dateObj.toLocaleString('pl-PL', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n      logEntry.innerHTML = `\n        <span class=\"log-date\">${formattedDate}</span>\n        <span class=\"log-message\">${log.message}</span>\n      `;\n      logsList.appendChild(logEntry);\n    });\n  }\n  renderLogsPagination(reversedLogs.length);\n}\nfunction renderLogsPagination(totalLogs) {\n  const paginationContainer = document.getElementById('logsPagination');\n  if (!paginationContainer) return;\n  \n  paginationContainer.innerHTML = '';\n  const totalPages = Math.ceil(totalLogs / logsPerPage);\n  \n  const prevButton = document.createElement('button');\n  prevButton.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevButton.disabled = logsCurrentPage === 1;\n  prevButton.addEventListener('click', () => {\n    if (logsCurrentPage > 1) {\n      logsCurrentPage--;\n      renderLogs();\n    }\n  });\n  \n  const nextButton = document.createElement('button');\n  nextButton.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextButton.disabled = logsCurrentPage === totalPages;\n  nextButton.addEventListener('click', () => {\n    if (logsCurrentPage < totalPages) {\n      logsCurrentPage++;\n      renderLogs();\n    }\n  });\n  \n  const pageInfo = document.createElement('span');\n  pageInfo.className = 'page-info';\n  pageInfo.textContent = `Strona ${logsCurrentPage} z ${totalPages}`;\n  \n  paginationContainer.appendChild(prevButton);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextButton);\n}\nfunction clearLogs() {\n  showConfirmation(\n    'Potwierdzenie',\n    'Czy na pewno chcesz wyczyścić całą historię zdarzeń?',\n    (confirmed) => {\n      if (confirmed) {\n        eventLogs = [];\n        saveLogs();\n        logsCurrentPage = 1;\n        renderLogs();\n        showNotification('Historia zdarzeń została wyczyszczona', 'success');\n\t\tplayNotificationSound('success');\n      }\n    }\n  );\n}\nfunction openLogsModal() {\n  logsCurrentPage = 1;\n  renderLogs();\n  document.getElementById('logsModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('logsModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction closeLogsModal() {\n  logEvent('Historia zdarzeń została zamknięta');\n  document.getElementById('logsModal').classList.remove('show');\n}\nfunction positionConfirmationModal() {\n\tconst confirmationModal = document.getElementById('deleteConfirmationModal');\n\tconst effectsModal = document.getElementById('effectsModal');\n\tif (effectsModal.classList.contains('show')) {\n\t\tconst rect = effectsModal.getBoundingClientRect();\n\t\tconfirmationModal.style.position = 'fixed';\n\t\tconfirmationModal.style.top = `${rect.top + window.scrollY}px`;\n\t\tconfirmationModal.style.left = `${rect.left + window.scrollX}px`;\n\t\tconfirmationModal.style.width = `${rect.width}px`;\n\t}\n}\nfunction startCurrencyEdit(code) {\n\tif (['PLN', 'EUR', 'USD'].includes(code)) {\n\t\tshowNotification('Nie można edytować podstawowych walut', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\teditingCurrencyCode = code;\n\topenExchangeModal();\n}\nfunction openEffectsModal() {\n  if (!document.getElementById('effectsPagination')) {\n    const paginationDiv = document.createElement('div');\n    paginationDiv.id = 'effectsPagination';\n    paginationDiv.className = 'pagination-container';\n    document.querySelector('.effects-modal-content').appendChild(paginationDiv);\n  }\n  \n  effectsCurrentPage = 1;\n  renderEffectsList();\n  document.getElementById('effectsModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('effectsModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction closeEffectsModal() {\n\tdocument.getElementById('effectsModal').classList.remove('show');\n}\nfunction renderEffectsList() {\n  const list = document.getElementById('effectsList');\n  list.innerHTML = '';\n  const startIndex = (effectsCurrentPage - 1) * paginationConfig.effectsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.effectsPerPage, effects.length);\n  const pageEffects = effects.slice(startIndex, endIndex);\n  \n  if (pageEffects.length === 0) {\n    list.innerHTML = '<p class=\"empty-state\">Brak efektów</p>';\n    renderEffectsPagination();\n    return;\n  }\n  \n  pageEffects.forEach((effect, index) => {\n    const globalIndex = startIndex + index;\n    const isEditing = globalIndex === editingEffectIndex;\n    const isDefault = isDefaultEffect(effect);\n    const item = document.createElement('div');\n    item.className = 'effect-item';\n    \n    if (isEditing) {\n      item.innerHTML = `\n        <input type=\"text\" class=\"edit-effect-name\" value=\"${effect}\" placeholder=\"Nowa nazwa efektu\">\n        <div class=\"buttons\">\n          <button class=\"btn-success\" onclick=\"saveEffectEdit(${globalIndex})\">\n            <i class=\"fas fa-save\"></i> Zapisz\n          </button>\n          <button class=\"btn-danger\" onclick=\"cancelEffectEdit()\">\n            <i class=\"fas fa-times\"></i> Anuluj\n          </button>\n        </div>\n      `;\n    } else {\n      item.innerHTML = `\n        <span>${effect} ${isDefault ? '<i class=\"fas fa-lock\" title=\"Domyślny efekt\"></i>' : ''}</span>\n        <div class=\"actions\">\n          ${!isDefault ? `\n            <button class=\"btn-info edit-icon-btn\" onclick=\"startEffectEdit(${globalIndex})\" title=\"Edytuj nazwę\">\n              <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn-danger\" onclick=\"removeEffect(${globalIndex})\" title=\"Usuń efekt\">\n              <i class=\"fas fa-trash\"></i>\n            </button>\n          ` : `\n            <button class=\"btn-info edit-icon-btn\" disabled title=\"Nie można edytować domyślnego efektu\">\n              <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn-danger\" disabled title=\"Nie można usunąć domyślnego efektu\">\n              <i class=\"fas fa-trash\"></i>\n            </button>\n          `}\n        </div>\n      `;\n    }\n    list.appendChild(item);\n  });\n  \n  renderEffectsPagination();\n  addPaginationInfo();\n}\ndocument.addEventListener('deviceready', function() {\n  checkConnection();\n  document.addEventListener('offline', onOffline, false);\n  document.addEventListener('online', onOnline, false);\n});\nfunction checkConnection() {\n  var networkState = navigator.connection.type;\n  var states = {};\n  states[Connection.UNKNOWN] = 'Unknown connection';\n  states[Connection.ETHERNET] = 'Ethernet connection';\n  states[Connection.WIFI] = 'WiFi connection';\n  states[Connection.CELL_2G] = 'Cell 2G connection';\n  states[Connection.CELL_3G] = 'Cell 3G connection';\n  states[Connection.CELL_4G] = 'Cell 4G connection';\n  states[Connection.CELL] = 'Cell generic connection';\n  states[Connection.NONE] = 'No network connection';\n  \n  if (networkState === Connection.NONE) {\n    showNoInternetMessage();\n  } else {\n    hideNoInternetMessage();\n  }\n}\nfunction onOnline() {\n  hideNoInternetMessage();\n  setTimeout(function() {\n    location.reload();\n  }, 2000);\n}\ndocument.getElementById('resetFontPermission').addEventListener('click', resetFontPermission);\nfunction resetFontPermission() {\n    localStorage.removeItem('fontPermission');\n    systemFontsLoaded = false;\n    showNotification('Zgoda została zresetowana. Możesz teraz ponownie wyrazić zgodę na udostępnienie czcionek dla aplikacji.', 'info');\n\tshowFontPermissionDialog(fontSelector);\n}\nasync function checkAndUpdatePriceHistoryOnRateChange() {\n    try {\n        const today = new Date().toISOString().split('T')[0];\n        const productsToUpdate = [];\n        for (const product of products) {\n            if (product.currentPrice !== null && product.currentPrice !== undefined) {\n                const currency = product.currentCurrency || product.currency;\n                const currentRate = exchangeRates[currency];\n                if (currentRate) {\n                    const history = await priceHistory.getPriceHistory(product.id);\n                    const todayEntry = history.find(entry => {\n                        const entryDate = new Date(entry.date).toISOString().split('T')[0];\n                        return entryDate === today;\n                    });\n                    if (todayEntry) {\n                        const entryRate = todayEntry.exchangeRate;\n                        if (entryRate !== currentRate) {\n                            productsToUpdate.push({\n                                productId: product.id,\n                                price: product.currentPrice,\n                                currency: currency,\n                                rate: currentRate\n                            });\n                        }\n                    } else {\n                        productsToUpdate.push({\n                            productId: product.id,\n                            price: product.currentPrice,\n                            currency: currency,\n                            rate: currentRate\n                        });\n                    }\n                }\n            }\n        }\n        for (const item of productsToUpdate) {\n            await priceHistory.addPricePoint(\n                item.productId,\n                item.price,\n                item.currency,\n                new Date()\n            );\n        }\n        if (productsToUpdate.length > 0) {\n        }\n    } catch (error) {\n        logEvent('Błąd podczas aktualizacji historii cen:', error);\n    }\n}\nfunction onOffline() {\n  showNoInternetMessage();\n}\nfunction checkInternetConnection() {\n  if (!navigator.onLine) {\n    return false;\n  }\n  if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {\n    return checkIOSConnection();\n  }\n  return true;\n}\nfunction hideNoInternetMessage() {\n  const messageContainer = document.querySelector('.no-internet-container');\n  if (messageContainer) {\n    messageContainer.remove();\n  }\n  document.querySelector('main').style.display = 'block';\n  document.querySelector('header').style.display = 'flex';\n}\nwindow.addEventListener('online', function() {\n  hideNoInternetMessage();\n  showNotification('Połączenie internetowe zostało przywrócone', 'success');\n});\nwindow.addEventListener('offline', function() {\n  showNoInternetMessage();\n  showNotification('Utracono połączenie internetowe', 'danger');\n  setTimeout(function() {\n      location.reload();\n  }, 2000);\n});\ndocument.addEventListener('DOMContentLoaded', initConnectionMonitoring);\nfunction showNoInternetMessage() {\n  const loader = document.getElementById('pokeballLoader');\n  loader.style.setProperty(\"background-color\", \"black\", \"important\");\n  const loaderText = loader.querySelector('.loader-text');\n  loaderText.style.display = 'none';\n  const messageContainer = document.createElement('div');\n  messageContainer.className = 'no-internet-container';\n  messageContainer.style.textAlign = 'center';\n  messageContainer.style.color = '#fff';\n  const icon = document.createElement('i');\n  icon.className = 'fas fa-wifi';\n  icon.style.fontSize = '3rem';\n  icon.style.marginBottom = '1rem';\n  icon.style.display = 'block';\n  const title = document.createElement('h2');\n  title.textContent = 'Brak połączenia z internetem';\n  title.style.marginBottom = '1rem';\n  title.style.fontSize = '1.5rem';\n  const description = document.createElement('p');\n  description.textContent = 'Aby aplikacja działała, potrzebujesz połączyć urządzenie z internetem.';\n  description.style.marginBottom = '1.5rem';\n  description.style.fontSize = '1rem';\n  description.style.opacity = '0.8';\n  const retryButton = document.createElement('button');\n  retryButton.textContent = 'Spróbuj ponownie';\n  retryButton.className = 'btn-success';\n  retryButton.style.marginTop = '1rem';\n  retryButton.onclick = function() {\n    location.reload();\n  };\n  messageContainer.appendChild(icon);\n  messageContainer.appendChild(title);\n  messageContainer.appendChild(description);\n  messageContainer.appendChild(retryButton);\n  loader.innerHTML = '';\n  loader.appendChild(messageContainer);\n  loader.style.display = 'flex';\n  window.addEventListener('online', function() {\n    location.reload();\n  });\n}\nfunction renderEffectsPagination() {\n  const paginationContainer = document.getElementById('effectsPagination');\n  if (!paginationContainer) return;\n  paginationContainer.innerHTML = '';\n  const totalPages = Math.ceil(effects.length / paginationConfig.effectsPerPage);\n  const prevBtn = document.createElement('button');\n  prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevBtn.disabled = effectsCurrentPage === 1;\n  prevBtn.addEventListener('click', () => {\n    if (effectsCurrentPage > 1) {\n      effectsCurrentPage--;\n      renderEffectsList();\n    }\n  });\n  const nextBtn = document.createElement('button');\n  nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextBtn.disabled = effectsCurrentPage === totalPages;\n  nextBtn.addEventListener('click', () => {\n    if (effectsCurrentPage < totalPages) {\n      effectsCurrentPage++;\n      renderEffectsList();\n    }\n  });\n  const pageInfo = document.createElement('span');\n  pageInfo.textContent = `Strona ${effectsCurrentPage} z ${totalPages}`;\n  paginationContainer.appendChild(prevBtn);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextBtn);\n}\nfunction isPriceOutdated(product) {\n  if (!product.currentPrice || !product.lastPriceUpdate) {\n    return false;\n  }\n  try {\n    const lastUpdate = new Date(product.lastPriceUpdate);\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n    return lastUpdate < sevenDaysAgo;\n  } catch (e) {\n    logEvent('Błąd sprawdzania daty ceny:', e);\n    return false;\n  }\n}\nfunction addEffect() {\n    const newEffect = document.getElementById('newEffect').value.trim();\n    logEvent(`Dodawanie nowego efektu: ${newEffect}`);\n    if (!newEffect) {\n        showNotification('Nazwa efektu nie może być pusta', 'warning');\n        return;\n    }\n    if (isDefaultEffect(newEffect)) {\n        showNotification('Efekt o tej nazwie już istnieje jako domyślny', 'warning');\n        return;\n    }\n    if (effects.includes(newEffect)) {\n        showNotification('Efekt o tej nazwie już istnieje', 'warning');\n        return;\n    }\n    effects.push(newEffect);\n    saveEffects();\n    renderEffectsList();\n    document.getElementById('newEffect').value = '';\n    showNotification(`Dodano efekt: ${newEffect}`, 'success');\n    playNotificationSound('success');\n    if (document.getElementById('effect')) {\n        fillEffectSelect();\n    }\n}\nfunction initVisibilitySettings() {\n  const savedControlsVisibility = localStorage.getItem('showControlsPanel');\n  const savedHamburgerVisibility = localStorage.getItem('showHamburgerOnDesktop');\n  showControlsPanel = savedControlsVisibility !== null ? savedControlsVisibility === 'true' : true;\n  showHamburgerOnDesktop = savedHamburgerVisibility !== null ? savedHamburgerVisibility === 'true' : false;\n  if (!showControlsPanel && !showHamburgerOnDesktop) {\n    showControlsPanel = true;\n    localStorage.setItem('showControlsPanel', 'true');\n  }\n  document.getElementById('controlsVisibilityToggle').checked = showControlsPanel;\n  document.getElementById('hamburgerVisibilityToggle').checked = showHamburgerOnDesktop;\n  applyVisibilitySettings();\n}\nfunction applyVisibilitySettings() {\n  const controlsPanel = document.querySelector('.controls-panel');\n  const hamburger = document.getElementById('hamburger');\n  if (controlsPanel) {\n    controlsPanel.style.display = showControlsPanel ? 'block' : 'none';\n  }\n  if (hamburger) {\n    if (window.innerWidth > 992) {\n      hamburger.style.display = showHamburgerOnDesktop ? 'flex' : 'none';\n    }\n  }\n}\nfunction saveVisibilitySettings() {\n  localStorage.setItem('showControlsPanel', showControlsPanel);\n  localStorage.setItem('showHamburgerOnDesktop', showHamburgerOnDesktop);\n  applyVisibilitySettings();\n  showNotification('Ustawienia widoczności zapisane', 'success');\n}\nfunction cleanupOldPriceTrendCache() {\n    const now = Date.now();\n    let cleanedCount = 0;\n    \n    for (const productName in priceTrendCache) {\n        const cached = priceTrendCache[productName];\n        if ((now - cached.timestamp) > PRICE_TREND_CACHE_DURATION * 2) {\n            delete priceTrendCache[productName];\n            cleanedCount++;\n        }\n    }\n    \n    if (cleanedCount > 0) {\n        localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n        logEvent(`Usunięto ${cleanedCount} starych wpisów z cache Price Trend`);\n    }\n}\nfunction saveVisibilitySettings() {\n  localStorage.setItem('showControlsPanel', showControlsPanel);\n  localStorage.setItem('showHamburgerOnDesktop', showHamburgerOnDesktop);\n  applyVisibilitySettings();\n  showNotification('Ustawienia widoczności zapisane', 'success');\n}\ndocument.getElementById('sidebarOverlay').addEventListener('click', function() {\n  const sidebar = document.getElementById('sidebar');\n  const overlay = document.getElementById('sidebarOverlay');\n  const hamburger = document.getElementById('hamburger');\n  sidebar.classList.remove('show');\n  overlay.classList.remove('show');\n  hamburger.classList.remove('open');\n  if (window.innerWidth > 992 && !showHamburgerOnDesktop) {\n    sidebar.style.display = 'none';\n  }\n});\ndocument.addEventListener('keydown', function(e) {\n  if (e.key === 'Escape') {\n    const sidebar = document.getElementById('sidebar');\n    const overlay = document.getElementById('sidebarOverlay');\n    const hamburger = document.getElementById('hamburger');\n    if (sidebar.classList.contains('show')) {\n      sidebar.classList.remove('show');\n      overlay.classList.remove('show');\n      hamburger.classList.remove('open');\n      if (window.innerWidth > 992 && !showHamburgerOnDesktop) {\n        sidebar.style.display = 'none';\n      }\n    }\n  }\n});\ndocument.getElementById('instructionVisibilityToggle').addEventListener('change', function() {\n    showInstructionButton = this.checked;\n    saveAdditionalVisibilitySettings();\n});\ndocument.getElementById('statisticsVisibilityToggle').addEventListener('change', function() {\n    showStatisticsSection = this.checked;\n    saveAdditionalVisibilitySettings();\n});\n\ndocument.getElementById('notificationsVisibilityToggle').addEventListener('change', function() {\n    showNotifications = this.checked;\n    saveAdditionalVisibilitySettings();\n});\ndocument.addEventListener('DOMContentLoaded', function() {\n  initAllSettings();\n  initAdvancedButtonsSetting();\n  initAdditionalVisibilitySettings();\n  initVisibilitySettings();\n  initProductNameHelp();\n  cleanupOldPriceTrendCache();\n  const controlsToggle = document.getElementById('controlsVisibilityToggle');\n  const hamburgerToggle = document.getElementById('hamburgerVisibilityToggle');\n  if (controlsToggle) {\n    controlsToggle.addEventListener('change', function() {\n      const newValue = this.checked;\n      if (!newValue && !showHamburgerOnDesktop) {\n        this.checked = true;\n        showNotification('Nie można wyłączyć obu opcji widoczności. Musi być widoczna przynajmniej jedna z nich.', 'warning');\n        return;\n      }\n      showControlsPanel = newValue;\n      saveVisibilitySettings();\n    });\n  }\n  if (hamburgerToggle) {\n    hamburgerToggle.addEventListener('change', function() {\n      const newValue = this.checked;\n      if (!newValue && !showControlsPanel) {\n        this.checked = true;\n        showNotification('Nie można wyłączyć obu opcji widoczności. Musi być widoczna przynajmniej jedna z nich.', 'warning');\n        return;\n      }\n      showHamburgerOnDesktop = newValue;\n      saveVisibilitySettings();\n    });\n  }\n  const originalHandleResponsiveLayout = handleResponsiveLayout;\n  handleResponsiveLayout = function() {\n    const sidebar = document.getElementById('sidebar');\n    const controlsPanel = document.querySelector('.controls-panel');\n    const hamburger = document.getElementById('hamburger');\n    if (window.innerWidth <= 992) {\n      if (hamburger) hamburger.style.display = 'flex';\n      if (controlsPanel) controlsPanel.style.display = 'none';\n      if (sidebar) sidebar.style.display = 'block';\n    } else {\n      if (hamburger) hamburger.style.display = showHamburgerOnDesktop ? 'flex' : 'none';\n      if (controlsPanel) controlsPanel.style.display = showControlsPanel ? 'block' : 'none';\n      if (sidebar) {\n        sidebar.style.display = 'none';\n        sidebar.classList.remove('show');\n        document.getElementById('sidebarOverlay').classList.remove('show');\n      }\n    }\n  };\n  window.addEventListener('resize', function() {\n    handleResponsiveLayout();\n    applyVisibilitySettings();\n  });\n});\nwindow.addEventListener('load', function() {\n  initVisibilitySettings();\n  applyVisibilitySettings();\n});\nfunction initSidebar() {\n  var sidebar = document.getElementById('sidebar');\n  var overlay = document.getElementById('sidebarOverlay');\n  var hamburger = document.getElementById('hamburger');\n  var closeBtn = document.getElementById('closeSidebar');\n  if (!sidebar) return;\n  if (hamburger) {\n    hamburger.addEventListener('click', toggleSidebar);\n  }\n  if (closeBtn) {\n    closeBtn.addEventListener('click', function () {\n      sidebar.classList.remove('show');\n      sidebar.style.display = 'none';\n      if (overlay) overlay.classList.remove('show');\n      if (hamburger) hamburger.classList.remove('open');\n    });\n  }\n  if (overlay) {\n    overlay.addEventListener('click', function (e) {\n      if (e.target === overlay) {\n        sidebar.classList.remove('show');\n        sidebar.style.display = 'none';\n        overlay.classList.remove('show');\n        if (hamburger) hamburger.classList.remove('open');\n      }\n    });\n  }\n  document.addEventListener('click', function (e) {\n    if (!sidebar.classList.contains('show')) return;\n    var clickedInside = sidebar.contains(e.target);\n    var clickedHamburger = hamburger && hamburger.contains(e.target);\n    if (!clickedInside && !clickedHamburger) {\n      sidebar.classList.remove('show');\n      sidebar.style.display = 'none';\n      if (overlay) overlay.classList.remove('show');\n      if (hamburger) hamburger.classList.remove('open');\n    }\n  });\n  var menuBtns = sidebar.querySelectorAll('.sidebar-menu button, .sidebar-menu a');\n  menuBtns.forEach(function (btn) {\n    btn.addEventListener('click', function () {\n      sidebar.classList.remove('show');\n      sidebar.style.display = 'none';\n      if (overlay) overlay.classList.remove('show');\n      if (hamburger) hamburger.classList.remove('open');\n    });\n  });\n}\nfunction toggleSidebar() {\n  var sidebar = document.getElementById('sidebar');\n  var overlay = document.getElementById('sidebarOverlay');\n  var hamburger = document.getElementById('hamburger');\n  if (!sidebar) return;\n  if (sidebar.classList.contains('show')) {\n    sidebar.classList.remove('show');\n    sidebar.style.display = 'none';\n    if (overlay) overlay.classList.remove('show');\n    if (hamburger) hamburger.classList.remove('open');\n  } else {\n    sidebar.style.display = 'block';\n    sidebar.classList.add('show');\n    if (overlay) overlay.classList.add('show');\n    if (hamburger) hamburger.classList.add('open');\n  }\n}\nfunction initConnectionMonitoring() {\n  initSidebar();\n  if (isCordova()) {\n    document.addEventListener('deviceready', function() {\n      initCordovaConnectionMonitoring();\n    }, false);\n  } else if (isReactNativeWebView()) {\n    initReactNativeConnectionMonitoring();\n  } else {\n    initStandardConnectionMonitoring();\n  }\n}\nfunction initStandardConnectionMonitoring() {\n  if (!navigator.onLine) {\n    showNoInternetMessage();\n  }\n  window.addEventListener('online', function() {\n    hideNoInternetMessage();\n    setTimeout(function() {\n      location.reload();\n    }, 1000);\n  });\n  window.addEventListener('offline', function() {\n    showNoInternetMessage();\n  });\n}\nfunction isReactNativeWebView() {\n  return !!(window.ReactNativeWebView);\n}\nfunction isCordova() {\n  return !!(window.cordova || window.PhoneGap || window.phonegap);\n}\nfunction startEffectEdit(index) {\n    if (isDefaultEffect(effects[index])) {\n        showNotification('Nie można edytować domyślnego efektu \"' + effects[index] + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    editingEffectIndex = index;\n    renderEffectsList();\n}\nfunction saveEffectEdit(index) {\n    const newName = document.querySelector('.edit-effect-name').value.trim();\n    if (!newName) {\n        showNotification('Nazwa efektu nie może być pusta', 'warning');\n        return;\n    }\n    if (isDefaultEffect(effects[index]) || isDefaultEffect(newName)) {\n        showNotification('Nie można edytować domyślnego efektu', 'warning');\n        return;\n    }\n    if (effects.includes(newName) && effects.indexOf(newName) !== index) {\n        showNotification('Efekt o tej nazwie już istnieje', 'warning');\n        return;\n    }\n    effects[index] = newName;\n    saveEffects();\n    editingEffectIndex = null;\n    renderEffectsList();\n    showNotification('Nazwa efektu została zmieniona', 'success');\n    playNotificationSound('success');\n}\nfunction isDefaultEffect(effectName) {\n    return defaultEffects.includes(effectName);\n}\nfunction cancelEffectEdit() {\n\teditingEffectIndex = null;\n\trenderEffectsList();\n}\nfunction removeEffect(index) {\n    const effectName = effects[index];\n    logEvent(`Próba usunięcia efektu: ${effectName}`);\n    if (isDefaultEffect(effectName)) {\n        showNotification('Nie można usunąć domyślnego efektu \"' + effectName + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć efekt \"${effectName}\"?`,\n        (confirmed) => {\n            if (confirmed) {\n                effects.splice(index, 1);\n                saveEffects();\n                renderEffectsList();\n                showNotification('Efekt został usunięty', 'success');\n                playNotificationSound('success');\n                logEvent(`Usunięto efekt: ${effectName}`);\n            }\n        }\n    );\n}\nfunction saveEffects() {\n\tlocalStorage.setItem('effects', JSON.stringify(effects));\n}\nfunction closeCurrencyEditModal() {\n\tdocument.getElementById('currencyEditModal').classList.remove('show');\n\teditingCurrencyCode = null;\n}\nfunction openCurrencyEdit(code) {\n    const baseCurrencies = ['PLN', 'USD', 'EUR'];\n    const nbpCurrencies = Object.keys(exchangeRates)\n        .filter(c => c !== 'PLN' && c !== 'USD' && c !== 'EUR' && c !== 'lastUpdated');\n    \n    if (baseCurrencies.includes(code) || nbpCurrencies.includes(code)) {\n        showNotification('Nie można edytować waluty ' + code + ' (dostarczana przez NBP)', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    \n    editingCurrencyCode = code;\n    document.getElementById('editCurrencyCode').value = code;\n    document.getElementById('editCurrencySymbol').value = currencySymbols[code] || '';\n    document.getElementById('editCurrencyRate').value = exchangeRates[code] || '';\n    document.getElementById('currencyEditModal').classList.add('show');\n}\nfunction saveCurrencyEdit() {\n\tconst newCode = document.getElementById('editCurrencyCode').value.trim().toUpperCase();\n\tconst newSymbol = document.getElementById('editCurrencySymbol').value.trim();\n\tconst newRate = parseFloat(document.getElementById('editCurrencyRate').value);\n\tif (!newCode || newCode.length !== 3) {\n\t\tshowNotification('Kod waluty musi składać się z 3 liter', 'warning');\n\t\treturn;\n\t}\n\tif (!newSymbol) {\n\t\tshowNotification('Symbol waluty jest wymagany', 'warning');\n\t\treturn;\n\t}\n\tif (isNaN(newRate) || newRate <= 0) {\n\t\tshowNotification('Nieprawidłowy kurs wymiany', 'warning');\n\t\treturn;\n\t}\n\tif (newCode !== editingCurrencyCode) {\n\t\tdelete exchangeRates[editingCurrencyCode];\n\t\tdelete currencySymbols[editingCurrencyCode];\n\t\t\n\t\texchangeRates[newCode] = newRate;\n\t\tcurrencySymbols[newCode] = newSymbol;\n\t} else {\n\t\texchangeRates[newCode] = newRate;\n\t\tcurrencySymbols[newCode] = newSymbol;\n\t}\n\tsaveExchangeRates();\n\tcloseCurrencyEditModal();\n\topenExchangeModal();\n\tshowNotification(`Zaktualizowano walutę ${newCode}`, 'success');\n\tplayNotificationSound('success');\n}\nfunction editGalleryImageName(index) {\n    const imgName = galleryImages[index].name;\n    logEvent(`Rozpoczęto edycję nazwy zdjęcia: ${imgName}`);\n\teditingGalleryImageIndex = index;\n\tconst img = galleryImages[index];\n\tdocument.getElementById('galleryEditImagePreview').src = img.data;\n\tdocument.getElementById('galleryEditImageName').value = img.name;\n\tdocument.getElementById('galleryImageEditModal').classList.add('show');\n}\nfunction closeGalleryImageEditModal() {\n\tdocument.getElementById('galleryImageEditModal').classList.remove('show');\n\teditingGalleryImageIndex = null;\n}\nfunction saveGalleryImageName() {\n    const newName = document.getElementById('galleryEditImageName').value.trim();\n    logEvent(`Zapis nowej nazwy zdjęcia: ${newName}`);\n    if (!newName) {\n        showNotification('Nazwa zdjęcia nie może być pusta', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    const exists = galleryImages.some((img, i) => \n        i !== editingGalleryImageIndex && \n        img.name.toLowerCase() === newName.toLowerCase()\n    );\n    if (exists) {\n        showNotification('Zdjęcie o takiej nazwie już istnieje i nie zostanie dodane do galeri, ani jako miniaturka do produktu', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    galleryImages[editingGalleryImageIndex].name = newName;\n    saveGallery();\n    renderGallery();\n    closeGalleryImageEditModal();\n    showNotification('Nazwa zdjęcia została zmieniona', 'success');\n    playNotificationSound('success');\n    logEvent(`Zaktualizowano nazwę zdjęcia na: ${newName}`);\n}\nfunction startCategoryEdit(index) {\n    if (isProtectedCategory(categories[index].name)) {\n        showNotification('Nie można edytować domyślnej kategorii \"' + categories[index].name + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    editingCategoryIndex = index;\n    renderCategoriesList();\n}\nfunction saveCategoryEdit() {\n    const newName = document.querySelector('.edit-category-name').value.trim();\n    if (!newName) {\n        showNotification('Nazwa kategorii nie może być pusta', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    if (isProtectedCategory(newName)) {\n        showNotification('Nie można użyć nazwy \"' + newName + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    const exists = categories.some((cat, i) =>\n        i !== editingCategoryIndex && cat.name.toLowerCase() === newName.toLowerCase()\n    );\n    if (exists) {\n        showNotification('Kategoria już istnieje', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    categories[editingCategoryIndex].name = newName;\n    saveCategories();\n    editingCategoryIndex = null;\n    renderCategoriesList();\n    showNotification('Nazwa kategorii została zmieniona', 'success');\n    playNotificationSound('success');\n}\nfunction cancelCategoryEdit() {\n\teditingCategoryIndex = null;\n\trenderCategoriesList();\n}\nfunction openShopEditModal(shopId) {\n\tconst shop = shops.find(s => s.id === shopId);\n\tif (!shop) return;\n\teditingShopId = shopId;\n\tdocument.getElementById('editShopName').value = shop.name;\n\tdocument.getElementById('editShopUrl').value = shop.url;\n\tdocument.getElementById('shopEditModal').classList.add('show');\n}\nfunction forceUpdateStatistics() {\n  try {\n    updateSummary();\n  } catch (e) {\n    logEvent('Błąd w updateSummary:', e);\n  }\n  try {\n    generateNewStatistics();\n  } catch (e) {\n    logEvent('Błąd w generateNewStatistics:', e);\n  }\n}\nfunction saveShopEdit() {\n    const name = document.getElementById('editShopName').value.trim();\n    logEvent(`Zapisywanie zmian sklepu: ${name}`);\n\tlet url = document.getElementById('editShopUrl').value.trim();\n\tif (!name || !url) {\n\t\tshowNotification('Wypełnij oba pola', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tif (!url.startsWith('http://') && !url.startsWith('https://')) {\n\t\turl = 'https://' + url;\n\t}\n\ttry {\n\t\tnew URL(url);\n\t} catch (e) {\n\t\tshowNotification('Podaj poprawny adres URL', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tconst shopIndex = shops.findIndex(s => s.id === editingShopId);\n\tif (shopIndex !== -1) {\n\t\tshops[shopIndex].name = name;\n\t\tshops[shopIndex].url = url;\n\t\tsaveShops();\n\t\trenderShopsList();\n\t\tcloseShopEditModal();\n\t\tshowNotification('Zmiany w sklepie zostały zapisane', 'success');\n\t\tplayNotificationSound('success');\n\t}\n    logEvent(`Zaktualizowano sklep: ${name}`);\n}\nasync function updateGoldPrices() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    try {\n        const goldPrice = await fetchGoldPrice();\n        if (goldPrice === null) {\n            showNotification('Nie udało się pobrać ceny złota', 'danger');\n            loader.reset();\n            return;\n        }\n        loader.update(30);\n        let updatedProducts = 0;\n        const today = new Date().toISOString().split('T')[0];\n        for (const product of products) {\n            if (product.category === 'Złoto') {\n                product.currentPrice = goldPrice;\n                product.currentCurrency = 'PLN';\n                product.lastPriceUpdate = new Date().toISOString();\n                await priceHistory.addPricePoint(\n                    product.id,\n                    goldPrice,\n                    'PLN',\n                    new Date()\n                );\n                \n                updatedProducts++;\n            }\n        }\n        loader.update(80);\n        await saveProducts();\n        loader.complete();\n        if (updatedProducts > 0) {\n            showNotification(`Zaktualizowano cenę złota dla ${updatedProducts} produktów`, 'success');\n            playNotificationSound('success');\n            if (document.getElementById('productPreviewModal').classList.contains('show')) {\n                const previewIndex = products.findIndex(p => p.id === currentChartProductId);\n                if (previewIndex !== -1 && products[previewIndex].category === 'Złoto') {\n                    openProductPreview(previewIndex);\n                }\n            }\n        } else {\n            showNotification('Brak produktów ze złotem do aktualizacji', 'info');\n\t\t\tcloseExchangeModal();\n        }\n        setTimeout(() => loader.reset(), 500);\n\t\tcloseExchangeModal();\n    } catch (error) {\n        loader.reset();\n        logEvent('Błąd aktualizacji ceny złota:', error);\n        showNotification('Błąd podczas aktualizacji ceny złota', 'danger');\n    }\n}\nfunction closeShopEditModal() {\n\tdocument.getElementById('shopEditModal').classList.remove('show');\n\teditingShopId = null;\n}\nfunction showInfoModal(message) {\n    document.getElementById('infoMessage').textContent = message;\n    document.getElementById('infoModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('infoModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeInfoModal() {\n\tdocument.getElementById('infoModal').classList.remove('show');\n}\nfunction showConfirmation(title, message, callback, context) {\n    document.getElementById('confirmationTitle').textContent = title;\n    document.getElementById('confirmationMessage').textContent = message;\n    confirmationCallback = callback;\n    confirmationContext = context;\n    document.getElementById('deleteConfirmationModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('deleteConfirmationModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction handleConfirmation(confirmed) {\n\tdocument.getElementById('deleteConfirmationModal').classList.remove('show');\n\tif (confirmationCallback) {\n\t\tconfirmationCallback(confirmed, confirmationContext);\n\t}\n\tconfirmationCallback = null;\n\tconfirmationContext = null;\n}\nlet shops = JSON.parse(localStorage.getItem('shops')) || [];\nfunction openClearDataModal() {\n    document.getElementById('clearDataModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('clearDataModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeClearDataModal() {\n\tdocument.getElementById('clearDataModal').classList.remove('show');\n}\nasync function confirmClearData() {\n    logEvent('Próba wyczyszczenia wszystkich danych');\n\tconst loader = new PokeballLoader('pokeballLoader').start(0);\n\tloader.update(30);\n\ttry {\n\t\tlocalStorage.clear();\n\t\tloader.update(50);\n\t\tconst db = await openDB();\n\t\tdb.close();\n\t\tindexedDB.deleteDatabase('ProductGalleryDB');\n\t\tloader.update(80);\n\t\tshops = [];\n\t\tcategories = [{\n\t\t\tname: 'Inne',\n\t\t\tbg: '#ededed',\n\t\t\ttext: '#333'\n\t\t}];\n\t\tproducts = [];\n\t\tgalleryImages = [];\n\t\texchangeRates = { EUR: 4.25, USD: 3.62, PLN: 1.0, lastUpdated: null };\n\t\tcurrencySymbols = { PLN: 'zł', EUR: '€', USD: '$' };\n\t\t\n\t\tloader.complete();\n\t\tsetTimeout(() => {\n\t\t\tloader.reset();\n\t\t\tshowNotification('Wszystkie dane zostały usunięte', 'success');\n\t\t\tplayNotificationSound('success');\n\t\t\tcloseClearDataModal();\n\t\t\tsetTimeout(() => {\n\t\t\t\tlocation.reload();\n\t\t\t}, 1500);\n\t\t}, 500);\n\t} catch (error) {\n\t\tloader.reset();\n\t\tlogEvent('Błąd podczas czyszczenia danych:', error);\n\t\tshowNotification('Wystąpił błąd podczas czyszczenia danych', 'danger');\n\t}\n    logEvent('Wszystkie dane zostały wyczyszczone');\n}\nfunction saveShops() {\n\tlocalStorage.setItem('shops', JSON.stringify(shops));\n}\nwindow.onerror = function(message, source, lineno, colno, error) {\n    const errorMsg = `Błąd: ${message} w ${source}:${lineno}`;\n    logEvent(errorMsg);\n    logEvent(errorMsg);\n};\nfunction addShop() {\n\tconst name = document.getElementById('newShopName').value.trim();\n    logEvent(`Dodawanie nowego sklepu: ${name}`);\n\tlet url = document.getElementById('newShopUrl').value.trim();\n\tif (!name || !url) {\n\t\tshowNotification('Wypełnij oba pola', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tif (!url.startsWith('http://') && !url.startsWith('https://')) {\n\t\turl = 'https://' + url;\n\t}\n\tif (url.startsWith('http://')) {\n\t\turl = url.replace('http://', 'https://');\n\t}\n\ttry {\n\t\tnew URL(url);\n\t} catch (e) {\n\t\tshowNotification('Podaj poprawny adres URL', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tshops.push({\n\t\tname,\n\t\turl,\n\t\tid: Date.now().toString()\n\t});\n\tsaveShops();\n\trenderShopsList();\n\tdocument.getElementById('newShopName').value = '';\n\tdocument.getElementById('newShopUrl').value = '';\n\tlogEvent(`Dodano sklep: ${name}`);\n\tshowNotification(`Dodano sklep: ${name}`, 'success');\n\tplayNotificationSound('success');\n}\nfunction removeShop(id) {\n    const shop = shops.find(s => s.id === id);\n    logEvent(`Próba usunięcia sklepu: ${shop.name}`);\n\tshowConfirmation(\n\t\t'Potwierdzenie usunięcia',\n\t\t'Czy na pewno chcesz usunąć ten sklep?',\n\t\tfunction(confirmed) {\n\t\t\tif (confirmed) {\n\t\t\t\tshops = shops.filter(shop => shop.id !== id);\n\t\t\t\tsaveShops();\n\t\t\t\trenderShopsList();\n\t\t\t\tlogEvent(`Usunięto sklep: ${shop.name}`);\n\t\t\t\tshowNotification('Sklep został usunięty', 'success');\n\t\t\t\tplayNotificationSound('success');\n\t\t\t}\n\t\t}\n\t);\n    if (confirmed) {\n        logEvent(`Usunięto sklep: ${shop.name}`);\n    }\n}\nfunction renderShopsList() {\n  const list = document.getElementById('shopsList');\n  list.innerHTML = '';\n  const startIndex = (shopsCurrentPage - 1) * paginationConfig.shopsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.shopsPerPage, shops.length);\n  const pageShops = shops.slice(startIndex, endIndex);\n  \n  if (pageShops.length === 0) {\n    list.innerHTML = '<p class=\"empty-state\">Brak sklepów</p>';\n    renderShopsPagination();\n    return;\n  }\n  \n  pageShops.forEach(shop => {\n    let faviconUrl = '';\n    try {\n      const urlObj = new URL(shop.url);\n      faviconUrl = `https://www.google.com/s2/favicons?domain=${urlObj.hostname}&sz=32`;\n    } catch (error) {\n      logEvent('Nieprawidłowy URL sklepu:', shop.url);\n      faviconUrl = '';\n    }\n    \n    const item = document.createElement('div');\n    item.className = 'shop-item';\n    const displayUrl = shop.url.length > 20 \n      ? shop.url.substring(0, 20) + '...' \n      : shop.url;\n    \n    const isFromGitHub = shop.source === 'github' || (shop.id && !shop.id.toString().startsWith('local'));\n    \n    item.innerHTML = `\n      <div class=\"shop-info\">\n        <div class=\"shop-icon\">\n          ${faviconUrl ? \n            `<img src=\"${faviconUrl}\" alt=\"Ikona sklepu\" onerror=\"this.parentNode.innerHTML\">` : \n            `<i class=\"fas fa-store\"></i>`\n          }\n        </div>\n        <div class=\"shop-details\">\n          <span class=\"shop-name\">\n            ${shop.name} \n            ${isFromGitHub ? '<i class=\"fa fa-globe\" title=\"Obraz online\" style=\"margin-left: 5px; color: #333; font-size: 0.9em;\"></i>' : ''}\n          </span>\n          <a href=\"${shop.url}\" target=\"_blank\" class=\"shop-link\" title=\"${shop.url}\">${displayUrl}</a>\n        </div>\n      </div>\n      <div class=\"actions\">\n        <button class=\"btn-info\" onclick=\"window.open('${shop.url}', '_blank')\" title=\"Otwórz sklep\">\n          <i class=\"fas fa-external-link-alt\"></i>\n        </button>\n        <button class=\"btn-info\" onclick=\"openShopEditModal('${shop.id}')\" title=\"Edytuj sklep\">\n          <i class=\"fas fa-edit\"></i>\n        </button>\n        <button class=\"btn-danger\" onclick=\"removeShop('${shop.id}')\" title=\"Usuń sklep\">\n          <i class=\"fas fa-trash\"></i>\n        </button>\n      </div>\n    `;\n    list.appendChild(item);\n  });\n  \n  renderShopsPagination();\n  addPaginationInfo();\n}\nfunction openShopsModal() {\n  if (!document.getElementById('shopsPagination')) {\n    const paginationDiv = document.createElement('div');\n    paginationDiv.id = 'shopsPagination';\n    paginationDiv.className = 'pagination-container';\n    document.querySelector('.shop-modal-content').appendChild(paginationDiv);\n  }\n  shopsCurrentPage = 1;\n  renderShopsList();\n  document.getElementById('shopsModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('shopsModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nasync function fetchShopsFromGitHub() {\n    try {\n        const response = await fetch('https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/shops.json');\n        if (!response.ok) {\n            throw new Error('Nie udało się pobrać sklepów');\n        }\n        const shopsFromGitHub = await response.json();\n        return shopsFromGitHub;\n    } catch (error) {\n        return null;\n    }\n}\nasync function fetchGitHubFiles(folderPath) {\n    try {\n        const response = await fetch(`https://api.github.com/repos/BarryV94/Magazyn-Produkt-w/contents/${folderPath}`);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        const files = await response.json();\n        \n        files.forEach(file => {\n        });\n        \n        return files;\n    } catch (error) {\n        return null;\n    }\n}\nasync function fetchGitHubImage(file) {\n    try {\n        const downloadUrl = file.download_url;\n        return downloadUrl;\n    } catch (error) {\n        logEvent('Błąd pobierania obrazu z GitHub:', error);\n        return null;\n    }\n}\nasync function updateGalleryFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    \n    try {\n        const files = await fetchGitHubFiles('images/gallery');\n        if (!files) {\n            throw new Error('Brak plików w galerii na GitHub');\n        }\n        \n        let addedCount = 0;\n        let updatedCount = 0;\n        let skippedCount = 0;\n        \n        const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.svg'];\n        const imageFiles = files.filter(file => {\n            const fileName = file.name.toLowerCase();\n            return imageExtensions.some(ext => fileName.endsWith(ext));\n        });\n\n        for (let i = 0; i < imageFiles.length; i++) {\n            const file = imageFiles[i];\n            loader.update(10 + (i / imageFiles.length) * 80);\n            \n            const fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n            \n            const existingImageIndex = galleryImages.findIndex(img => \n                img.name.toLowerCase().trim() === fileName.toLowerCase().trim() && \n                img.source === 'github'\n            );\n            \n            if (existingImageIndex !== -1) {\n                galleryImages[existingImageIndex].url = file.download_url;\n                galleryImages[existingImageIndex].dateAdded = new Date().toISOString();\n                updatedCount++;\n            } else {\n                galleryImages.push({\n                    id: generateUniqueId(),\n                    name: fileName,\n                    url: file.download_url,\n                    dateAdded: new Date().toISOString(),\n                    source: 'github'\n                });\n                addedCount++;\n            }\n        }\n\n        if (addedCount > 0 || updatedCount > 0) {\n            await saveGallery();\n            renderGallery();\n            updateGalleryCount();\n            \n            loader.complete();\n            setTimeout(() => loader.reset(), 500);\n            \n            let message = '';\n            \n            playNotificationSound('success');\n        } else {\n            loader.complete();\n            setTimeout(() => loader.reset(), 500);\n            showNotification('Brak nowych obrazów do dodania', 'info');\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji galerii: ' + error.message, 'danger');\n    }\n}\nfunction debugGalleryImages() {\n    galleryImages.forEach((img, index) => {\n    });\n}\nfunction imageExists(images, fileName) {\n    const normalizedName = fileName.toLowerCase().trim().replace(/\\s+/g, ' ');\n    return images.some(img => \n        img.name.toLowerCase().trim().replace(/\\s+/g, ' ') === normalizedName\n    );\n}\nasync function removeDuplicatePricePoints() {\n    const loader = new PokeballLoader('pokeballLoader');\n    loader.start(0);\n    loader.update(10);\n    try {\n        let totalRemoved = 0;\n        for (const product of products) {\n            const history = await priceHistory.getPriceHistory(product.id);\n            const uniqueMap = new Map();\n            const toRemove = [];\n            for (const point of history) {\n                const dateKey = new Date(point.date).toISOString().split('T')[0];\n                const priceKey = parseFloat(point.price).toFixed(2);\n                const key = `${dateKey}-${priceKey}-${point.currency}`;\n                if (uniqueMap.has(key)) {\n                    toRemove.push(point.id);\n                    totalRemoved++;\n                } else {\n                    uniqueMap.set(key, point);\n                }\n            }\n            if (toRemove.length > 0) {\n                const db = await priceHistory.dbPromise;\n                const tx = db.transaction('price_history', 'readwrite');\n                const store = tx.objectStore('price_history');\n                for (const id of toRemove) {\n                    await store.delete(id);\n                }\n                await tx.done;\n            }\n        }\n        if (totalRemoved > 0) {\n            logEvent(`Usunięto ${totalRemoved} zduplikowanych punktów cenowych.`);\n        }\n    } catch (error) {\n        logEvent('Błąd podczas usuwania duplikatów punktów cenowych:', error);\n        logEvent(`Błąd usuwania duplikatów punktów cenowych: ${error.message}`);\n    } finally {\n        loader.complete();\n        setTimeout(() => loader.reset(), 500);\n    }\n}\nfunction renderShopsPagination() {\n  const paginationContainer = document.getElementById('shopsPagination');\n  if (!paginationContainer) return;\n  paginationContainer.innerHTML = '';\n  const totalPages = Math.ceil(shops.length / paginationConfig.shopsPerPage);\n  \n  const prevBtn = document.createElement('button');\n  prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevBtn.disabled = shopsCurrentPage === 1;\n  prevBtn.addEventListener('click', () => {\n    if (shopsCurrentPage > 1) {\n      shopsCurrentPage--;\n      renderShopsList();\n    }\n  });\n  \n  const nextBtn = document.createElement('button');\n  nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextBtn.disabled = shopsCurrentPage === totalPages;\n  nextBtn.addEventListener('click', () => {\n    if (shopsCurrentPage < totalPages) {\n      shopsCurrentPage++;\n      renderShopsList();\n    }\n  });\n  \n  const pageInfo = document.createElement('span');\n  pageInfo.textContent = `Strona ${shopsCurrentPage} z ${totalPages}`;\n  \n  paginationContainer.appendChild(prevBtn);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextBtn);\n}\nfunction closeShopsModal() {\n  logEvent('Modal sklepów został zamknięty');\n  document.getElementById('shopsModal').classList.remove('show');\n}\nasync function openDB() {\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = indexedDB.open('ProductGalleryDB', 10);\n\t\trequest.onupgradeneeded = function(event) {\n\t\t\tconst db = event.target.result;\n\t\t\tconst oldVersion = event.oldVersion;\n\t\t\tif (oldVersion < 1) {\n\t\t\t\tif (!db.objectStoreNames.contains('productImages')) {\n\t\t\t\t\tdb.createObjectStore('productImages', { keyPath: 'id' });\n\t\t\t\t}\n\t\t\t\tif (!db.objectStoreNames.contains('galleryImages')) {\n\t\t\t\t\tdb.createObjectStore('galleryImages', { keyPath: 'id' });\n\t\t\t\t}\n\t\t\t}\n            if (!db.objectStoreNames.contains('backgroundImages')) {\n                db.createObjectStore('backgroundImages', { keyPath: 'id' });\n            }\n\t\t};\n\t\trequest.onsuccess = function(event) {\n\t\t\tresolve(event.target.result);\n\t\t};\n\t\trequest.onerror = function(event) {\n\t\t\treject('Błąd otwierania bazy danych: ' + event.target.error);\n\t\t};\n\t});\n}\nasync function loadBackgrounds() {\n    try {\n        const db = await openDB();\n        const tx = db.transaction('backgroundImages', 'readonly');\n        const store = tx.objectStore('backgroundImages');\n        const request = store.getAll();\n        return new Promise((resolve, reject) => {\n            request.onsuccess = function() {\n                const savedImages = request.result || [];\n                backgroundImages = [];\n                \n                for (const savedImg of savedImages) {\n                    if (savedImg.source === 'github') {\n                        backgroundImages.push({\n                            id: savedImg.id,\n                            name: savedImg.name,\n                            url: savedImg.url,\n                            dateAdded: savedImg.dateAdded,\n                            source: 'github'\n                        });\n                    } else {\n                        backgroundImages.push({\n                            id: savedImg.id,\n                            name: savedImg.name,\n                            data: savedImg.data,\n                            dateAdded: savedImg.dateAdded,\n                            source: 'local'\n                        });\n                    }\n                }\n                \n                updateBackgroundCount();\n                cleanupGalleryDuplicatesAutomatically();\n                resolve();\n            };\n            request.onerror = () => reject('Błąd ładowania tła');\n        });\n    } catch (error) {\n        logEvent('Błąd ładowania tła:', error);\n        backgroundImages = [];\n        updateBackgroundCount();\n    }\n}\nasync function saveBackgrounds() {\n    try {\n        const db = await openDB();\n        const tx = db.transaction('backgroundImages', 'readwrite');\n        const store = tx.objectStore('backgroundImages');\n        await store.clear();\n        \n        for (const img of backgroundImages) {\n            if (!img.id) {\n                img.id = generateUniqueId();\n            }\n            \n            const imageToSave = {\n                id: img.id,\n                name: img.name,\n                dateAdded: img.dateAdded,\n                source: img.source || 'local'\n            };\n            \n            if (img.source === 'github') {\n                imageToSave.url = img.url;\n            } else {\n                imageToSave.data = img.data;\n            }\n            \n            await store.put(imageToSave);\n        }\n        return new Promise(resolve => tx.oncomplete = resolve);\n    } catch (error) {\n        logEvent('Błąd zapisu tła:', error);\n    }\n}\nfunction updateBackgroundCount() {\n    document.getElementById('backgroundCount').textContent = backgroundImages.length;\n}\nfunction renderBackgrounds() {\n  const content = document.getElementById('backgroundContent');\n  content.innerHTML = '';\n  \n  backgroundTotalPages = Math.ceil(backgroundImages.length / paginationConfig.backgroundItemsPerPage);\n  backgroundCurrentPage = Math.min(backgroundCurrentPage, backgroundTotalPages);\n  \n  const startIndex = (backgroundCurrentPage - 1) * paginationConfig.backgroundItemsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.backgroundItemsPerPage, backgroundImages.length);\n  const currentPageImages = backgroundImages.slice(startIndex, endIndex);\n  \n  if (backgroundImages.length === 0) {\n    content.innerHTML = `\n      <div class=\"background-empty\">\n        <i class=\"fas fa-image\"></i>\n        <h3>Brak zdjęć tła</h3>\n        <p>Dodaj tła, aby zmienić wygląd aplikacji</p>\n      </div>\n    `;\n    return;\n  }\n  \n  currentPageImages.forEach((img, index) => {\n    const globalIndex = startIndex + index;\n    const isSelected = selectedBackgroundId === img.id;\n    const isFromGitHub = img.source === 'github';\n    const item = document.createElement('div');\n    item.className = 'background-item';\n    \n    if (isSelected) {\n      item.classList.add('active-background');\n    }\n    \n    const imageSrc = isFromGitHub ? img.url : img.data;\n    \n    item.innerHTML = `\n      <div class=\"background-checkbox\">\n        <input type=\"checkbox\" id=\"bgCheck-${globalIndex}\" \n          ${isSelected ? 'checked' : ''}\n          onchange=\"selectBackground(${globalIndex}, this.checked)\">\n        <label for=\"bgCheck-${globalIndex}\"></label>\n      </div>\n      <div class=\"background-image-container\">\n        <img src=\"${imageSrc}\" alt=\"${img.name}\" \n          onclick=\"openBackgroundPreview(${globalIndex})\"\n          data-source=\"${img.source || 'local'}\"\n          ${isFromGitHub ? 'data-github-url=\"' + img.url + '\"' : ''}>\n      </div>\n      <div style=\"align-items: center;display: flex;justify-content: center;flex-direction: column;\">\n        <span>\n          ${img.name} \n          ${isFromGitHub ? '<i class=\"fa fa-globe\" title=\"Obraz online\" style=\"margin-left: 5px; color: #333; font-size: 0.8em;\"></i>' : ''}\n        </span>\n        <div class=\"background-info\">\n          <div class=\"background-actions\">\n            <button class=\"btn-info edit-icon-btn\" onclick=\"editBackgroundName(${globalIndex})\" ${isFromGitHub ? 'disabled title=\"Nie można edytować obrazu z GitHub\" style=\"opacity: 0.5;\"' : ''}>\n              <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn-info edit-icon-btn\" style=\"background-color:var(--danger); color:white;width: 30px; height: 30px;\" onclick=\"requestDeleteBackground(${globalIndex})\" ${isFromGitHub ? 'disabled title=\"Nie można usunąć obrazu z GitHub\" style=\"opacity: 0.5;\"' : ''}>\n              <i class=\"fas fa-trash\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    content.appendChild(item);\n  });\n  \n  renderBackgroundPagination();\n}\nfunction backgroundImageExists(fileName) {\n    const normalizedName = fileName.toLowerCase().trim().replace(/\\s+/g, ' ');\n    const existingBackground = backgroundImages.find(bg => \n        bg.name.toLowerCase().trim().replace(/\\s+/g, ' ') === normalizedName\n    );\n    if (existingBackground && isFromGitHub(existingBackground)) {\n        return false;\n    }\n    return !existingBackground;\n}\nfunction renderBackgroundPagination() {\n    const container = document.getElementById('backgroundModal').querySelector('.modal-content');\n    const oldPagination = container.querySelector('.pagination-container');\n    if (oldPagination) oldPagination.remove();\n    if (backgroundTotalPages <= 1) return;\n    const pagination = document.createElement('div');\n    pagination.className = 'pagination-container';\n    const prevBtn = document.createElement('button');\n    prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\"></i>';\n    prevBtn.disabled = backgroundCurrentPage === 1;\n    prevBtn.addEventListener('click', () => {\n        if (backgroundCurrentPage > 1) {\n            backgroundCurrentPage--;\n            renderBackgrounds();\n        }\n    });\n    const nextBtn = document.createElement('button');\n    nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\"></i>';\n    nextBtn.disabled = backgroundCurrentPage === backgroundTotalPages;\n    nextBtn.addEventListener('click', () => {\n        if (backgroundCurrentPage < backgroundTotalPages) {\n            backgroundCurrentPage++;\n            renderBackgrounds();\n        }\n    });\n    const pageInfo = document.createElement('span');\n    pageInfo.textContent = `Strona ${backgroundCurrentPage} z ${backgroundTotalPages}`;\n    pagination.appendChild(prevBtn);\n    pagination.appendChild(pageInfo);\n    pagination.appendChild(nextBtn);\n    container.appendChild(pagination);\n}\nfunction openBackgroundPreview(index) {\n    const img = backgroundImages[index];\n    const imageSrc = img.source === 'github' ? img.url : img.data;\n    document.getElementById('fullPreviewImg').src = imageSrc;\n    document.getElementById('imagePreviewModal').classList.add('show');\n}\nasync function fetchGoldPrice() {\n    try {\n        const response = await fetch('https://api.nbp.pl/api/cenyzlota');\n        if (!response.ok) {\n            throw new Error('Błąd pobierania ceny złota');\n        }\n        const data = await response.json();\n        const price = data[0].cena;\n        exchangeRates.GOLD = price;\n        saveExchangeRates();\n        return price;\n    } catch (error) {\n        logEvent('Błąd pobierania ceny złota:', error);\n        return exchangeRates.GOLD || null;\n    }\n}\nasync function calculateGoldBuybackPrice(product, forceUpdate = false) {\n  try {\n    const now = new Date();\n    if (!forceUpdate && lastGoldBuybackUpdate && (now - lastGoldBuybackUpdate) < 300000) {\n      return {\n        buybackPrice: (product.currentPrice * 0.98) * product.quantity,\n        rateInfo: `Kurs z dnia ${lastGoldBuybackUpdate.toLocaleDateString('pl-PL')} ${lastGoldBuybackUpdate.toLocaleTimeString('pl-PL')} (dane z pamięci podręcznej)`,\n        usdRate: exchangeRates.USD || 4.0\n      };\n    }\n    const response = await fetch('https://api.nbp.pl/api/exchangerates/rates/a/usd/?format=json');\n    if (!response.ok) {\n      throw new Error('Nie udało się pobrać kursu USD');\n    }\n    const data = await response.json();\n    const usdPlnRate = data.rates[0].mid;\n    const rateDate = new Date(data.rates[0].effectiveDate);\n    const rateTime = new Date().toLocaleTimeString('pl-PL');\n    exchangeRates.USD = usdPlnRate;\n    exchangeRates.lastUpdated = new Date().toISOString();\n    saveExchangeRates();\n    lastGoldBuybackUpdate = new Date();\n    const totalBuybackPrice = (product.currentPrice * 0.98) * product.quantity;\n    return {\n      buybackPrice: totalBuybackPrice,\n      rateInfo: `Kurs z dnia ${rateDate.toLocaleDateString('pl-PL')} ${rateTime}`,\n      usdRate: usdPlnRate\n    };\n  } catch (error) {\n    logEvent('Błąd obliczania ceny odkupu:', error);\n    return {\n      buybackPrice: (product.currentPrice * 0.98) * product.quantity,\n      rateInfo: `Kurs z dnia ${exchangeRates.lastUpdated ? new Date(exchangeRates.lastUpdated).toLocaleDateString('pl-PL') : 'brak danych'} (używane zapisane dane)`,\n      usdRate: exchangeRates.USD || 4.0\n    };\n  }\n}\nasync function fetchLBMAGoldPrice() {\n    try {\n        const nbpGoldPricePLN = await fetchGoldPrice();\n        const usdToPlnRate = exchangeRates.USD;\n        const lbmaPriceUSD = nbpGoldPricePLN / usdToPlnRate;\n        return lbmaPriceUSD;\n    } catch (error) {\n        logEvent('Błąd pobierania ceny LBMA:', error);\n        return 1800;\n    }\n}\nasync function fetchUSDAverageRate() {\n    try {\n        const response = await fetch('https://api.nbp.pl/api/exchangerates/rates/a/usd/?format=json');\n        if (!response.ok) {\n            throw new Error('Błąd pobierania kursu USD');\n        }\n        const data = await response.json();\n        return data.rates[0].mid;\n    } catch (error) {\n        logEvent('Błąd pobierania kursu USD:', error);\n        return exchangeRates.USD || 4.0;\n    }\n}\nfunction startGoldPriceUpdates() {\n    setInterval(async () => {\n        const goldPrice = await fetchGoldPrice();\n        if (goldPrice !== null) {\n            exchangeRates.GOLD = goldPrice;\n            localStorage.setItem('exchangeRates', JSON.stringify(exchangeRates));\n            products.forEach(p => {\n                if (p.category === 'Złoto') {\n                    p.currentPrice = goldPrice;\n                    p.lastPriceUpdate = new Date().toISOString();\n                }\n            });\n            saveProducts();\n        }\n    }, 1800000);\n}\ndocument.addEventListener('DOMContentLoaded', startGoldPriceUpdates);\nasync function uploadToBackgroundGallery() {\n    const input = document.getElementById('backgroundUploadInput');\n    if (!input.files || !input.files[0]) return;\n    \n    const file = input.files[0];\n    const fileName = document.getElementById('backgroundImageName').value.trim() || \n                     file.name.replace(/\\.[^/.]+$/, \"\");\n    const nameExists = backgroundImages.some(bg => \n        bg.name.toLowerCase() === fileName.toLowerCase()\n    );\n    if (nameExists) {\n        showNotification('Tło o tej nazwie już istnieje', 'warning');\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = async function(e) {\n        backgroundImages.push({\n            id: generateUniqueId(),\n            name: fileName,\n            data: e.target.result,\n            dateAdded: new Date().toISOString()\n        });\n        await saveBackgrounds();\n        renderBackgrounds();\n        updateBackgroundCount();\n        input.value = '';\n        document.getElementById('backgroundImageName').value = '';\n        showNotification('Tło zostało dodane', 'success');\n\t\tplayNotificationSound('success');\n    };\n    reader.readAsDataURL(file);\n}\nfunction applyBackgroundStyle() {\n    const header = document.querySelector('header');\n    const body = document.body;\n    const sidebarHeader = document.querySelector('.sidebar-header');\n    \n    if (selectedBackgroundId) {\n        const img = backgroundImages.find(bg => bg.id === selectedBackgroundId);\n        if (img) {\n            let bgContainer = document.getElementById('bgContainer');\n            if (!bgContainer) {\n                bgContainer = document.createElement('div');\n                bgContainer.id = 'bgContainer';\n                bgContainer.style.position = 'fixed';\n                bgContainer.style.top = '0';\n                bgContainer.style.left = '0';\n                bgContainer.style.width = '100%';\n                bgContainer.style.height = '100%';\n                bgContainer.style.zIndex = '-1';\n                document.body.prepend(bgContainer);\n            }\n            \n            const imageSrc = img.source === 'github' ? img.url : img.data;\n            \n            bgContainer.innerHTML = `\n                <img \n                    src=\"${imageSrc}\" \n                    alt=\"Background\" \n                    id=\"bgImage\"\n                    style=\"\n                        position: absolute;\n                        width: 100%;\n                        height: 100%;\n                        object-fit: cover;\n                        transition: transform 0.3s ease-out;\n                    \"\n                    data-source=\"${img.source || 'local'}\"\n                    ${img.source === 'github' ? 'data-github-url=\"' + img.url + '\"' : ''}\n                >\n                <div id=\"bgOverlay\" style=\"\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background: linear-gradient(\n                        to bottom, \n                        rgba(0,0,0,0.3) 0%, \n                        rgba(0,0,0,0.1) 20%,\n                        rgba(0,0,0,0) 50%\n                    );\n                    z-index: 1;\n                \"></div>\n            `;\n            \n            const resizeBg = () => {\n                const bgImg = document.getElementById('bgImage');\n                if (bgImg) {\n                    const imgRatio = bgImg.naturalWidth / bgImg.naturalHeight;\n                    const screenRatio = window.innerWidth / window.innerHeight;\n                    \n                    if (imgRatio > screenRatio) {\n                        bgImg.style.width = '100%';\n                        bgImg.style.height = 'auto';\n                    } else {\n                        bgImg.style.width = 'auto';\n                        bgImg.style.height = '100%';\n                    }\n                    \n                    bgImg.style.left = '50%';\n                    bgImg.style.top = '50%';\n                    bgImg.style.transform = 'translate(-50%, -50%)';\n                }\n            };\n            \n            const bgImg = document.getElementById('bgImage');\n            if (bgImg.complete) {\n                resizeBg();\n            } else {\n                bgImg.onload = resizeBg;\n            }\n            window.addEventListener('resize', resizeBg);\n            \n            body.style.background = 'none';\n            if(header) {\n                header.style.cssText = `\n                    background: none !important;\n                    border-bottom: none !important;\n                    box-shadow: none !important;\n                `;\n            }\n            \n            if (sidebarHeader) {\n                sidebarHeader.style.backgroundImage = `url(${imageSrc})`;\n                sidebarHeader.style.backgroundSize = 'cover';\n                sidebarHeader.style.backgroundPosition = 'center';\n                sidebarHeader.style.backgroundRepeat = 'no-repeat';\n            }\n        }\n    } else {\n        const bgContainer = document.getElementById('bgContainer');\n        if (bgContainer) bgContainer.remove();\n        body.style.background = 'linear-gradient(135deg, #f5f5f5, #e0e0e0)';\n        if(header) {\n            header.style.cssText = `\n                background: linear-gradient(135deg, #790000, #ff0000);\n                border-bottom: 3px solid rgba(255,255,255,0.2);\n                box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n            `;\n        }\n        if (sidebarHeader) {\n            sidebarHeader.style.backgroundImage = '';\n            sidebarHeader.style.background = 'linear-gradient(135deg, #790000, #ff0000)';\n        }\n    }\n}\nasync function selectBackground(index, selected) {\n    if (!selected) {\n        if (selectedBackgroundId === backgroundImages[index].id) {\n            resetToDefaultBackground();\n        }\n        return;\n    }\n    const selectedBackground = backgroundImages[index];\n    selectedBackgroundId = selectedBackground.id;\n    localStorage.setItem('selectedBackground', selectedBackground.id);\n    applyBackgroundStyle();\n    await saveBackgrounds();\n    renderBackgrounds();\n\tlogEvent(`Zmieniono tło aplikacji: ${backgroundImages[index].name}`);\n    showNotification('Tło zostało zapisane', 'success');\n\tplayNotificationSound('success');\n}\nfunction initModalScrollButtons() {\n    const modals = document.querySelectorAll('.modal');\n    \n    modals.forEach(modal => {\n        let scrollButton = modal.querySelector('.modal-scroll-to-top');\n        \n        if (!scrollButton) {\n            scrollButton = document.createElement('button');\n            scrollButton.className = 'modal-scroll-to-top';\n            scrollButton.innerHTML = '↑';\n            scrollButton.title = 'Powrót do góry';\n            modal.appendChild(scrollButton);\n            \n            scrollButton.addEventListener('click', function() {\n                const modalContent = modal.querySelector('.modal-content');\n                if (modalContent) {\n                    modalContent.scrollTo({\n                        top: 0,\n                        behavior: 'smooth'\n                    });\n                }\n            });\n        }\n        \n        const scrollableElement = modal.querySelector('.modal-content') || modal;\n        \n        scrollableElement.addEventListener('scroll', function() {\n            if (this.scrollTop > 50) {\n                scrollButton.classList.add('show');\n            } else {\n                scrollButton.classList.remove('show');\n            }\n        });\n        \n        const observer = new MutationObserver(function(mutations) {\n            mutations.forEach(function(mutation) {\n                if (mutation.attributeName === 'class') {\n                    if (modal.classList.contains('show')) {\n                        const content = modal.querySelector('.modal-content');\n                        if (content) {\n                            content.scrollTop = 0;\n                        }\n                        scrollButton.classList.remove('show');\n                    }\n                }\n            });\n        });\n        \n        observer.observe(modal, { attributes: true });\n    });\n}\ndocument.addEventListener('DOMContentLoaded', function() {\n    initModalScrollButtons();\n});\nfunction updateMainFormFields() {\n    const category = document.getElementById('category').value;\n    const conditionField = document.getElementById('conditionField');\n    const languageField = document.getElementById('languageField');\n    const effectField = document.getElementById('effectField');\n    const currentPriceGroup = document.getElementById('currentPriceGroup');\n    const quantityLabel = document.getElementById('quantityLabel');\n    const priceLabel = document.getElementById('priceLabel');\n    const conditionSelect = document.getElementById('condition');\n    const languageSelect = document.getElementById('language');\n\n    conditionField.style.display = 'none';\n    languageField.style.display = 'none';\n    effectField.style.display = 'none';\n    \n    if (conditionSelect) conditionSelect.required = false;\n    if (languageSelect) languageSelect.required = false;\n\n    if (category === 'Singles') {\n        conditionField.style.display = 'block';\n        effectField.style.display = 'block';\n        if (conditionSelect) conditionSelect.required = true;\n    }\n\n    if (!['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n        languageField.style.display = 'block';\n        if (languageSelect) languageSelect.required = true;\n    } else {\n        languageField.style.display = 'none';\n        if (languageSelect) languageSelect.required = false;\n    }\n\n    if (category === 'Złoto') {\n        if (currentPriceGroup) currentPriceGroup.style.display = 'none';\n        if (quantityLabel) quantityLabel.textContent = 'Ilość (gram) *';\n        if (priceLabel) priceLabel.textContent = 'Cena zakupu za 1 gram *';\n    } else {\n        if (currentPriceGroup) currentPriceGroup.style.display = 'block';\n        if (quantityLabel) quantityLabel.textContent = 'Ilość *';\n        if (priceLabel) priceLabel.textContent = 'Cena zakupu jednej sztuki *';\n    }\n}\nasync function handleProductFormSubmit(e) {\n    e.preventDefault();\n    \n    resetMainFormValidation();\n    \n    const nm = document.getElementById('name').value.trim();\n    const cat = document.getElementById('category').value;\n    const qt = parseInt(document.getElementById('quantity').value);\n    const pr = parseFloat(document.getElementById('price').value);\n    const yr = parseInt(document.getElementById('year').value);\n    \n    let cp = null;\n    let currentCurrency = null;\n    \n    if (cat !== 'Złoto') {\n        cp = document.getElementById('currentPrice').value;\n        currentCurrency = document.getElementById('currentCurrency').value;\n    }\n    \n    const currency = document.getElementById('currency').value;\n    const file = document.getElementById('image').files[0];\n    const effectIn = document.getElementById('effect').value;\n    const conditionIn = cat === 'Singles' ? document.getElementById('condition').value : null;\n    const languageIn = !['Złoto', 'Akcesoria', 'Inne'].includes(cat) ? document.getElementById('language').value : null;\n\n    const errors = [];\n\n    if (!nm) {\n        errors.push('Nazwa produktu jest wymagana');\n        highlightField(document.getElementById('name'));\n    }\n\n    if (!cat) {\n        errors.push('Kategoria jest wymagana');\n        highlightField(document.getElementById('category'));\n    }\n\n    if (isNaN(qt) || qt < 1) {\n        errors.push('Nieprawidłowa ilość');\n        highlightField(document.getElementById('quantity'));\n    }\n\n    if (isNaN(pr) || pr <= 0) {\n        errors.push('Nieprawidłowa cena zakupu');\n        highlightField(document.getElementById('price'));\n    }\n\n    if (isNaN(yr) || yr < 2000 || yr > 2100) {\n        errors.push('Nieprawidłowy rok zakupu');\n        highlightField(document.getElementById('year'));\n    }\n\n    if (!currency) {\n        errors.push('Waluta jest wymagana');\n        highlightField(document.getElementById('currency'));\n    }\n\n    if (cat === 'Singles' && !conditionIn) {\n        errors.push('Stan karty jest wymagany dla kategorii Singles');\n        highlightField(document.getElementById('condition'));\n    }\n\n    if (!['Złoto', 'Akcesoria', 'Inne'].includes(cat) && !languageIn) {\n        errors.push('Język jest wymagany dla tej kategorii');\n        highlightField(document.getElementById('language'));\n    }\n\n    if (cat !== 'Złoto' && cp && cp.trim() !== '') {\n        const currentPriceValue = parseFloat(cp);\n        if (isNaN(currentPriceValue) || currentPriceValue < 0) {\n            errors.push('Nieprawidłowa aktualna cena');\n            highlightField(document.getElementById('currentPrice'));\n        }\n        if (!currentCurrency) {\n            errors.push('Waluta aktualnej ceny jest wymagana');\n            highlightField(document.getElementById('currentCurrency'));\n        }\n    }\n\n    if (errors.length > 0) {\n        showNotification('Popraw następujące błędy: ' + errors.join(', '), 'danger');\n        playNotificationSound('alert');\n        return;\n    }\n\n    let currentPriceValue = null;\n    if (cat !== 'Złoto' && cp && cp.trim() !== '') {\n        currentPriceValue = parseFloat(cp);\n    }\n\n    let finalName = nm;\n\n    let dataUrl = '';\n    if (file) {\n        dataUrl = await new Promise(resolve => {\n            const rd = new FileReader();\n            rd.onload = () => resolve(rd.result);\n            rd.readAsDataURL(file);\n        });\n    }\n    if (!dataUrl && selectedImageUrl) {\n        dataUrl = selectedImageUrl;\n    }\n\n    const productId = generateUniqueId();\n    const lastPriceUpdate = currentPriceValue !== null ? new Date().toISOString() : null;\n\n    if (cat === 'Złoto') {\n        const goldPrice = await fetchGoldPrice();\n        if (goldPrice !== null) {\n            currentPriceValue = goldPrice;\n            currentCurrency = 'PLN';\n        } else {\n            showNotification('Nie udało się pobrać ceny złota. Używam ostatniej znanej ceny.', 'warning');\n            currentPriceValue = exchangeRates.GOLD || pr;\n            currentCurrency = 'PLN';\n        }\n    }\n\n    products.push({\n        id: productId,\n        name: finalName,\n        category: cat,\n        quantity: qt,\n        price: pr,\n        year: yr,\n        currency: currency,\n        currentPrice: currentPriceValue,\n        currentCurrency: currentPriceValue !== null ? currentCurrency : null,\n        image: dataUrl,\n        dateAdded: new Date().toISOString(),\n        effect: cat === 'Singles' ? effectIn || null : null,\n        condition: conditionIn,\n        language: languageIn,\n        lastPriceUpdate: lastPriceUpdate\n    });\n\n    if (currentPriceValue !== null) {\n        try {\n            await priceHistory.addPricePoint(\n                productId,\n                currentPriceValue,\n                currentCurrency\n            );\n        } catch (error) {\n            logEvent('Błąd zapisu początkowego wpisu historii:', error);\n        }\n    }\n\n    await saveProducts();\n    renderProducts(applyAllFilters());\n    \n    form.reset();\n    document.getElementById('currency').value = 'PLN';\n    document.getElementById('currentCurrency').value = 'PLN';\n    document.getElementById('imagePreview').style.display = 'none';\n    \n    document.getElementById('conditionField').style.display = 'none';\n    document.getElementById('languageField').style.display = 'none';\n    \n    const quantityLabel = document.querySelector('label[for=\"quantity\"]');\n    if (quantityLabel) quantityLabel.textContent = 'Ilość';\n    \n    showNotification('Produkt został dodany', 'success');\n    playNotificationSound('success');\n    \n    closeAddNewProductModal();\n}\ndocument.addEventListener('DOMContentLoaded', function() {\n    populateConditionAndLanguageSelects();\n    fillEffectSelect();\n    updateCategorySelects();\n    document.getElementById('category').addEventListener('change', updateMainFormFields);\n    const form = document.getElementById('productForm');\n    form.removeEventListener('submit', handleProductFormSubmit);\n    form.addEventListener('submit', handleProductFormSubmit);\n    updateMainFormFields();\n});\nfunction reinitModalScrollButtons() {\n    initModalScrollButtons();\n}\nfunction resetToDefaultBackground() {\n    selectedBackgroundId = null;\n    localStorage.removeItem('selectedBackground');\n    applyBackgroundStyle();\n    renderBackgrounds();\n    showNotification('Przywrócono domyślne tło', 'success');\n\tplayNotificationSound('success');\n}\nasync function deleteBackground(index) {\n    const img = backgroundImages[index];\n    if (img.id === selectedBackgroundId) {\n        resetToDefaultBackground();\n    }\n    backgroundImages.splice(index, 1);\n    await saveBackgrounds();\n    renderBackgrounds();\n    updateBackgroundCount();\n}\nfunction requestDeleteBackground(index) {\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć tło \"${backgroundImages[index].name}\"?`,\n        (confirmed) => {\n            if (confirmed) {\n                deleteBackground(index);\n            }\n        }\n    );\n}\nfunction toggleBackgroundSelection(index) {\n    const idx = selectedBackgroundImages.indexOf(index);\n    if (idx > -1) {\n        selectedBackgroundImages.splice(idx, 1);\n    } else {\n        selectedBackgroundImages.push(index);\n    }\n    renderBackgrounds();\n    updateBackgroundSelectionCounter();\n}\nfunction updateBackgroundSelectionCounter() {\n    const counter = document.getElementById('backgroundSelectionCounter');\n    if (!counter) {\n        const selectionControls = document.getElementById('backgroundSelectionControls');\n        const counterEl = document.createElement('div');\n        counterEl.id = 'backgroundSelectionCounter';\n        counterEl.className = 'selection-counter';\n        counterEl.innerHTML = `<i class=\"fas fa-check-circle\"></i> Zaznaczono: ${selectedBackgroundImages.length}`;\n        selectionControls.insertBefore(counterEl, selectionControls.firstChild);\n    } else {\n        counter.innerHTML = `<i class=\"fas fa-check-circle\"></i> Zaznaczono: ${selectedBackgroundImages.length}`;\n    }\n}\nasync function deleteSelectedBackgrounds() {\n    if (!selectedBackgroundImages.length) return;\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć ${selectedBackgroundImages.length} zaznaczonych tła?`,\n        async (confirmed) => {\n            if (!confirmed) return;\n            const deletedIds = selectedBackgroundImages.map(i => backgroundImages[i].id);\n            if (deletedIds.includes(selectedBackgroundId)) {\n                selectedBackgroundId = null;\n                localStorage.removeItem('selectedBackground');\n                document.body.style.backgroundImage = '';\n                document.querySelector('.header-wrapper').style.backgroundColor = '';\n            }\n            selectedBackgroundImages.sort((a, b) => b - a).forEach(i => {\n                backgroundImages.splice(i, 1);\n            });\n            \n            await saveBackgrounds();\n            cancelBackgroundSelection();\n            renderBackgrounds();\n            updateBackgroundCount();\n        }\n    );\n}\nfunction cancelBackgroundSelection() {\n    backgroundSelectionMode = false;\n    document.getElementById('backgroundSelectionControls').style.display = 'none';\n    document.getElementById('backgroundSelectBtn').style.display = 'inline-block';\n    document.getElementById('backgroundUploadBtn').style.display = 'inline-block';\n    selectedBackgroundImages = [];\n    renderBackgrounds();\n}\nfunction toggleBackgroundSelectionMode() {\n    backgroundSelectionMode = !backgroundSelectionMode;\n    document.getElementById('backgroundSelectionControls').style.display = \n        backgroundSelectionMode ? 'flex' : 'none';\n    document.getElementById('backgroundSelectBtn').style.display = \n        backgroundSelectionMode ? 'none' : 'inline-block';\n    document.getElementById('backgroundUploadBtn').style.display = \n        backgroundSelectionMode ? 'none' : 'inline-block';\n    selectedBackgroundImages = [];\n    renderBackgrounds();\n}\nfunction toggleBackgroundUploadPanel() {\n    const panel = document.getElementById('backgroundUploadPanel');\n    const uploadBtn = document.getElementById('backgroundUploadBtn');\n    \n    if (panel.style.display === 'none') {\n        panel.style.display = 'block';\n        uploadBtn.innerHTML = '<i class=\"fas fa-times\"></i> Anuluj';\n        uploadBtn.className = 'btn-danger';\n    } else {\n        panel.style.display = 'none';\n        uploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj tło';\n        uploadBtn.className = 'btn-success';\n    }\n}\nfunction editBackgroundName(index) {\n\teditingBackgroundIndex = index;\n    const img = backgroundImages[index];\n    const previewElement = document.getElementById('backgroundEditImagePreview');\n    const nameInput = document.getElementById('backgroundEditImageName');\n    if (previewElement && nameInput) {\n        previewElement.src = img.data;\n        nameInput.value = img.name;\n        document.getElementById('backgroundImageEditModal').classList.add('show');\n    } else {\n        logEvent('Elementy modalne nie zostały znalezione!');\n        showNotification('Błąd: brak elementów edycji tła', 'danger');\n    }\n}\nfunction closeBackgroundImageEditModal() {\n    document.getElementById('backgroundImageEditModal').classList.remove('show');\n}\nfunction saveBackgroundImageName() {\n    const newName = document.getElementById('backgroundEditImageName').value.trim();\n    if (!newName) {\n        showNotification('Nazwa tła nie może być pusta', 'warning');\n        return;\n    }\n    const exists = backgroundImages.some((bg, i) => \n        i !== editingBackgroundIndex && \n        bg.name.toLowerCase() === newName.toLowerCase()\n    );\n    if (exists) {\n        showNotification('Tło o takiej nazwie już istnieje', 'warning');\n        return;\n    }\n    backgroundImages[editingBackgroundIndex].name = newName;\n    saveBackgrounds();\n    renderBackgrounds();\n    closeBackgroundImageEditModal();\n    showNotification('Nazwa tła została zmieniona', 'success');\n\tplayNotificationSound('success');\n}\nasync function refreshPriceTrend(productId) {\n  const product = products.find(p => p.id === productId);\n  if (!product) return;\n  \n  const trendElement = document.getElementById('previewPriceTrend');\n  trendElement.innerHTML = '<div class=\"loading-trend\">Ładowanie...</div>';\n  \n  const trend = await fetchCardmarketPriceTrend(product.name);\n  trendElement.innerHTML = trend ? \n    `<span class=\"price-trend-value\">${trend}</span>` : \n    '<span class=\"no-data\">Brak danych</span>';\n}\nasync function processImportFile(file) {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    try {\n        if (!file) return;\n        loader.update(20);\n        const zip = await JSZip.loadAsync(file);\n        \n        if (zip.file('settings.json')) {\n            const settingsData = await zip.file('settings.json').async('text');\n            const settings = JSON.parse(settingsData);\n            \n            if (settings.version >= 3) {\n                paginationConfig = settings.paginationConfig || paginationConfig;\n                \n                selectedBackgroundId = settings.selectedBackground || null;\n                \n                darkMode = settings.darkMode || false;\n                soundPermissionGiven = settings.soundPermission || false;\n                soundAllowed = settings.soundAllowed || false;\n                \n                if (settings.version >= 4) {\n                    currentFilter = settings.currentFilter || 'all';\n                    currentSort = settings.currentSort || 'date-asc';\n                    currentSearch = settings.currentSearch || '';\n                    productsCurrentPage = settings.productsCurrentPage || 1;\n                    categoriesCurrentPage = settings.categoriesCurrentPage || 1;\n                    effectsCurrentPage = settings.effectsCurrentPage || 1;\n                    shopsCurrentPage = settings.shopsCurrentPage || 1;\n                    currenciesCurrentPage = settings.currenciesCurrentPage || 1;\n                    logsCurrentPage = settings.logsCurrentPage || 1;\n                    galleryCurrentPage = settings.galleryCurrentPage || 1;\n                    backgroundCurrentPage = settings.backgroundCurrentPage || 1;\n                }\n                if (settings.version >= 5) {\n                    currencyConfig = settings.currencyConfig || currencyConfig;\n                    if (settings.visibilitySettings) {\n                        showControlsPanel = settings.visibilitySettings.showControlsPanel !== undefined ? settings.visibilitySettings.showControlsPanel : true;\n                        showHamburgerOnDesktop = settings.visibilitySettings.showHamburgerOnDesktop !== undefined ? settings.visibilitySettings.showHamburgerOnDesktop : false;\n                        showInstructionButton = settings.visibilitySettings.showInstructionButton !== undefined ? settings.visibilitySettings.showInstructionButton : true;\n                        showStatisticsSection = settings.visibilitySettings.showStatisticsSection !== undefined ? settings.visibilitySettings.showStatisticsSection : true;\n                        showNotifications = settings.visibilitySettings.showNotifications !== undefined ? settings.visibilitySettings.showNotifications : true;\n                        showAdvancedButtons = settings.visibilitySettings.showAdvancedButtons !== undefined ? settings.visibilitySettings.showAdvancedButtons : true;\n                    }\n                    if (settings.appearanceSettings) {\n                        localStorage.setItem('panelOpacity', settings.appearanceSettings.panelOpacity);\n                        localStorage.setItem('backgroundBlur', settings.appearanceSettings.backgroundBlur);\n                        localStorage.setItem('darkenEffect', settings.appearanceSettings.darkenEffect);\n                        localStorage.setItem('borderRadius', settings.appearanceSettings.borderRadius);\n                        localStorage.setItem('borderWidth', settings.appearanceSettings.borderWidth);\n                        localStorage.setItem('borderColor', settings.appearanceSettings.borderColor);\n                        if (settings.appearanceSettings.customColors) {\n                            localStorage.setItem('customColors', JSON.stringify(settings.appearanceSettings.customColors));\n                        }\n                        if (settings.appearanceSettings.appFont) {\n                            localStorage.setItem('appFont', settings.appearanceSettings.appFont);\n                        }\n                        localStorage.setItem('animationsEnabled', settings.appearanceSettings.animationsEnabled);\n                    }\n                    \n                    if (settings.priceTrendCache) {\n                        priceTrendCache = settings.priceTrendCache;\n                        localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n                    }\n                }\n                \n                document.body.classList.toggle('dark-mode', darkMode);\n                localStorage.setItem('paginationConfig', JSON.stringify(paginationConfig));\n                localStorage.setItem('selectedBackground', selectedBackgroundId);\n                localStorage.setItem('darkMode', darkMode);\n                localStorage.setItem('soundPermission', soundPermissionGiven);\n                localStorage.setItem('currencyConfig', JSON.stringify(currencyConfig));\n                localStorage.setItem('showControlsPanel', showControlsPanel);\n                localStorage.setItem('showHamburgerOnDesktop', showHamburgerOnDesktop);\n                localStorage.setItem('showInstructionButton', showInstructionButton);\n                localStorage.setItem('showStatisticsSection', showStatisticsSection);\n                localStorage.setItem('showNotifications', showNotifications);\n                localStorage.setItem('showAdvancedButtons', showAdvancedButtons);\n                \n                if (selectedBackgroundId) {\n                    setTimeout(() => {\n                        applyBackgroundStyle();\n                    }, 100);\n                }\n            }\n        }\n\n        if (zip.file('price_trend_cache.json')) {\n            try {\n                const cacheData = await zip.file('price_trend_cache.json').async('text');\n                const cacheObj = JSON.parse(cacheData);\n                if (cacheObj.priceTrendCache) {\n                    priceTrendCache = cacheObj.priceTrendCache;\n                    localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n                }\n            } catch (cacheError) {\n                logEvent('Błąd importu price trend cache:', cacheError);\n            }\n        }\n\n        loader.update(30);\n        \n        if (zip.file('products.json')) {\n            const productsData = await zip.file('products.json').async('text');\n            const productsObj = JSON.parse(productsData);\n            \n            let importedProducts = [];\n            if (productsObj.version === 4 && productsObj.products) {\n                importedProducts = productsObj.products.map(product => {\n                    if (product.imageSource === 'github' && product.imageGitHubName) {\n                        product.image = null;\n                        product.imageId = null;\n                    }\n                    return product;\n                });\n            } else if (productsObj.version === 3 && productsObj.products) {\n                importedProducts = productsObj.products;\n            } else if (productsObj.version === 2 && productsObj.products) {\n                importedProducts = productsObj.products;\n            } else {\n                importedProducts = productsObj;\n            }\n            \n            importedProducts.forEach(importedProduct => {\n                if (!importedProduct.id) {\n                    importedProduct.id = generateUniqueId();\n                }\n                \n                const exists = products.some(p => p.id === importedProduct.id);\n                if (!exists) {\n                    products.push(importedProduct);\n                }\n            });\n        }\n\n        if (zip.file('categories.json')) {\n            const categoriesData = await zip.file('categories.json').async('text');\n            const importedCategories = JSON.parse(categoriesData);\n            categories.push(...importedCategories);\n        }\n\n        if (zip.file('exchange.json')) {\n            const exchangeData = await zip.file('exchange.json').async('text');\n            const exchangeObj = JSON.parse(exchangeData);\n            if (exchangeObj.rates) {\n                Object.assign(exchangeRates, exchangeObj.rates);\n            }\n            if (exchangeObj.symbols) {\n                Object.assign(currencySymbols, exchangeObj.symbols);\n            }\n        }\n\n        if (zip.file('shops.json')) {\n            const shopsData = await zip.file('shops.json').async('text');\n            const importedShops = JSON.parse(shopsData);\n            shops.push(...importedShops);\n        }\n\n        if (zip.file('effects.json')) {\n            const effectsData = await zip.file('effects.json').async('text');\n            const importedEffects = JSON.parse(effectsData);\n            effects.push(...importedEffects);\n        }\n\n        if (zip.file('logs.json')) {\n            const logsData = await zip.file('logs.json').async('text');\n            const importedLogs = JSON.parse(logsData);\n            eventLogs.push(...importedLogs);\n        }\n\n        loader.update(50);\n\n        if (zip.file('price_history.json')) {\n            try {\n                const historyData = await zip.file('price_history.json').async('text');\n                const allHistory = JSON.parse(historyData);\n                const db = await priceHistory.dbPromise;\n                const tx = db.transaction('price_history', 'readwrite');\n                const store = tx.objectStore('price_history');\n                \n                await store.clear();\n                \n                for (const productHistory of allHistory) {\n                    for (const point of productHistory.history) {\n                        await store.add({\n                            id: generateUniqueId(),\n                            productId: productHistory.productId,\n                            date: point.date,\n                            price: point.price,\n                            currency: point.currency,\n                            exchangeRate: point.exchangeRate,\n                            needsHistoricalUpdate: point.needsHistoricalUpdate || false\n                        });\n                    }\n                }\n            } catch (historyError) {\n                logEvent('Błąd importu historii cen:', historyError);\n            }\n        }\n\n        loader.update(70);\n\n        if (zip.folder('images')) {\n            const imgFolder = zip.folder('images');\n            \n            if (imgFolder.folder('products')) {\n                const productImgFolder = imgFolder.folder('products');\n                const productFiles = [];\n                productImgFolder.forEach((relativePath, file) => {\n                    if (!file.dir) {\n                        productFiles.push(file);\n                    }\n                });\n                \n                logEvent(`Znaleziono ${productFiles.length} obrazów produktów`);\n                \n                for (const file of productFiles) {\n                    try {\n                        const base64Data = await file.async('base64');\n                        const imageData = `data:image/png;base64,${base64Data}`;\n                        const productId = file.name.replace('.png', '');\n                        const product = products.find(p => p.id === productId);\n                        if (product) {\n                            product.image = imageData;\n                            logEvent(`Przypisano obraz do produktu: ${product.name}`);\n                        }\n                    } catch (error) {\n                        logEvent('Błąd importu obrazu produktu:', file.name, error);\n                    }\n                }\n            }\n\n            if (imgFolder.folder('gallery')) {\n                const galleryFolder = imgFolder.folder('gallery');\n                const galleryFiles = [];\n                galleryFolder.forEach((relativePath, file) => {\n                    if (!file.dir) {\n                        galleryFiles.push(file);\n                    }\n                });\n                \n                logEvent(`Znaleziono ${galleryFiles.length} obrazów galerii`);\n                \n                for (const file of galleryFiles) {\n                    try {\n                        const base64Data = await file.async('base64');\n                        const imageData = `data:image/png;base64,${base64Data}`;\n                        \n                        let fileName = file.name;\n                        \n                        if (fileName.includes('/')) {\n                            const pathParts = fileName.split('/');\n                            fileName = pathParts[pathParts.length - 1];\n                        }\n                        \n                        fileName = fileName.replace('.png', '');\n                        \n                        logEvent(`Przetwarzanie pliku galerii: \"${file.name}\" -> \"${fileName}\"`);\n\n                        const exists = galleryImages.some(img => \n                            img.name.toLowerCase() === fileName.toLowerCase() && \n                            img.source !== 'github'\n                        );\n                        \n                        if (!exists) {\n                            galleryImages.push({\n                                id: generateUniqueId(),\n                                name: fileName,\n                                data: imageData,\n                                dateAdded: new Date().toISOString(),\n                                source: 'local'\n                            });\n                            logEvent(`Dodano do galerii: \"${fileName}\"`);\n                        } else {\n                            logEvent(`Pominięto istniejący obraz: \"${fileName}\"`);\n                        }\n                    } catch (error) {\n                        logEvent('Błąd importu obrazu galerii:', file.name, error);\n                    }\n                }\n                \n                await saveGallery();\n                logEvent(`Zapisano galerię po imporcie`);\n            }\n\n            if (imgFolder.folder('backgrounds')) {\n                const backgroundFolder = imgFolder.folder('backgrounds');\n                const backgroundFiles = [];\n                backgroundFolder.forEach((relativePath, file) => {\n                    if (!file.dir) {\n                        backgroundFiles.push(file);\n                    }\n                });\n                \n                logEvent(`Znaleziono ${backgroundFiles.length} obrazów tła`);\n                \n                for (const file of backgroundFiles) {\n                    try {\n                        const base64Data = await file.async('base64');\n                        const imageData = `data:image/png;base64,${base64Data}`;\n                        \n                        let fileName = file.name;\n                        \n                        if (fileName.includes('/')) {\n                            const pathParts = fileName.split('/');\n                            fileName = pathParts[pathParts.length - 1];\n                        }\n                        \n                        fileName = fileName.replace('.png', '');\n                        \n                        logEvent(`Przetwarzanie pliku tła: \"${file.name}\" -> \"${fileName}\"`);\n\n                        const exists = backgroundImages.some(bg => \n                            bg.name.toLowerCase() === fileName.toLowerCase() && \n                            bg.source !== 'github'\n                        );\n                        \n                        if (!exists) {\n                            backgroundImages.push({\n                                id: generateUniqueId(),\n                                name: fileName,\n                                data: imageData,\n                                dateAdded: new Date().toISOString(),\n                                source: 'local'\n                            });\n                            logEvent(`Dodano tło: \"${fileName}\"`);\n                        } else {\n                            logEvent(`Pominięto istniejące tło: \"${fileName}\"`);\n                        }\n                    } catch (error) {\n                        logEvent('Błąd importu tła:', file.name, error);\n                    }\n                }\n                \n                await saveBackgrounds();\n            }\n        }\n\n        loader.update(95);\n        \n        if (zip.file('selection_state.json')) {\n            try {\n                const selectionData = await zip.file('selection_state.json').async('text');\n                const selectionState = JSON.parse(selectionData);\n                \n                if (selectionState.selectedBackgroundId && !selectedBackgroundId) {\n                    selectedBackgroundId = selectionState.selectedBackgroundId;\n                    localStorage.setItem('selectedBackground', selectedBackgroundId);\n                }\n            } catch (selectionError) {\n                logEvent('Błąd importu stanu zaznaczeń:', selectionError);\n            }\n        }\n        \n        await saveProducts();\n        await saveCategories();\n        await saveExchangeRates();\n        await saveShops();\n        await saveEffects();\n        await saveLogs();\n        await saveGallery();\n        await saveBackgrounds();\n        \n        if (selectedBackgroundId) {\n            setTimeout(() => {\n                applyBackgroundStyle();\n            }, 500);\n        }\n\n        await updateCurrencySelects();\n        await updateCategorySelects();\n        await fillEffectSelect();\n        await renderProducts(applyAllFilters());\n        await forceUpdateStatistics();\n        await renderGallery();\n        await renderBackgrounds();\n        await removeDuplicatePricePoints();\n        \n        await restoreGitHubImagesAfterImport();\n        \n        document.getElementById('categoryFilter').value = currentFilter;\n        document.getElementById('sortSelect').value = currentSort;\n        document.getElementById('searchInput').value = currentSearch;\n        \n        initAllSettings();\n        applyVisibilitySettings();\n        applyAdditionalVisibilitySettings();\n        applyAdvancedButtonsSetting();\n        forceSaveAll();\n        await cleanupGalleryDuplicatesAutomatically();\n\n        loader.complete();\n        setTimeout(() => {\n            loader.reset();\n            showNotification('Import zakończony pomyślnie', 'success');\n            playNotificationSound('success');\n            \n            if (selectedBackgroundId) {\n                setTimeout(() => {\n                    applyBackgroundStyle();\n                    showNotification('Przywrócono ustawienia tła', 'success');\n                }, 1000);\n            }\n        }, 500);\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd przetwarzania pliku: ' + error.message, 'danger');\n    }\n}\nfunction isImageFromGitHub(imageData) {\n    return galleryImages.some(img => img.data === imageData && img.source === 'github');\n}\nasync function restoreGitHubImagesAfterImport() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    try {\n        let restoredProductImages = 0;\n        \n        for (const product of products) {\n            if (product.imageSource === 'github' && product.imageGitHubName && !product.image) {\n                const galleryImage = galleryImages.find(img => \n                    img.name.toLowerCase().trim() === product.imageGitHubName.toLowerCase().trim() && \n                    img.source === 'github'\n                );\n                \n                if (galleryImage) {\n                    product.image = galleryImage.url;\n                    product.imageId = galleryImage.id;\n                    restoredProductImages++;\n                }\n            }\n        }\n        \n        if (restoredProductImages > 0) {\n            await saveProducts();\n            renderProducts(applyAllFilters());\n            showNotification(`Przywrócono ${restoredProductImages} obrazów produktów z GitHub`, 'success');\n        }\n    } catch (error) {\n        logEvent('Błąd przywracania obrazów z GitHub:', error);\n        showNotification('Część obrazów z GitHub nie została przywrócona.', 'warning');\n    } finally {\n        loader.reset();\n    }\n}\nasync function fetchGitHubImageByName(imageName, type = 'gallery') {\n    try {\n        const folderPath = type === 'background' ? 'images/backgrounds' : 'images/gallery';\n        const files = await fetchGitHubFiles(folderPath);\n        if (files) {\n            const imageFile = files.find(file => {\n                const fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n                return fileName.toLowerCase() === imageName.toLowerCase();\n            });\n            \n            if (imageFile) {\n                return imageFile.download_url;\n            }\n        }\n    } catch (error) {\n        logEvent('Błąd pobierania obrazu z GitHub:', error);\n    }\n    return null;\n}\nfunction handleAndroidFileSelect(fileName, base64Data) {\n    logEvent('Wybieranie pliku z Androida: ' + fileName);\n    const byteCharacters = atob(base64Data);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const blob = new Blob([byteArray], {type: 'application/zip'});\n    const file = new File([blob], fileName, {type: 'application/zip'});\n    processImportFile(file);\n}\nfunction saveBackgroundStyle() {\n    if (selectedBackgroundId) {\n        const img = backgroundImages.find(bg => bg.id === selectedBackgroundId);\n        if (img) {\n            document.body.style.backgroundImage = `url(${img.data})`;\n            document.body.style.backgroundSize = 'cover';\n            document.body.style.backgroundAttachment = 'fixed';\n\t\t\tdocument.querySelector('header').style.background = 'transparent !importnat';\n\t\t\tdocument.querySelector('header').style.borderBottom = 'none !importnat';\n\t\t\tdocument.querySelector('header').style.boxShadow = 'none !importnat';\n            localStorage.setItem('selectedBackground', img.id);\n            showNotification('Tło zostało zapisane', 'success');\n\t\t\tplayNotificationSound('success');\n        }\n    } else {\n        document.body.style.backgroundImage = '';\n\t\tdocument.querySelector('header').style.background = 'linear-gradient(135deg, #790000, #ff0000)';\n\t\tdocument.querySelector('header').style.borderBottom = '3px solid rgba(255,255,255,0.2)';\n\t\tdocument.querySelector('header').style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';\n        localStorage.removeItem('selectedBackground');\n        showNotification('Przywrócono domyślne tło', 'info');\n    }\n    closeBackgroundModal();\n}\nasync function cleanupGalleryDuplicatesAutomatically() {\n    try {\n        const originalGalleryCount = galleryImages.length;\n        const originalBackgroundCount = backgroundImages.length;\n        \n        const uniqueGalleryImages = removeDuplicatesWithGitHubPriority(galleryImages);\n        const uniqueBackgroundImages = removeDuplicatesWithGitHubPriority(backgroundImages);\n        \n        const galleryChanged = originalGalleryCount !== uniqueGalleryImages.length;\n        const backgroundChanged = originalBackgroundCount !== uniqueBackgroundImages.length;\n        \n        if (galleryChanged || backgroundChanged) {\n            galleryImages.length = 0;\n            galleryImages.push(...uniqueGalleryImages);\n            \n            backgroundImages.length = 0;\n            backgroundImages.push(...uniqueBackgroundImages);\n            \n            await saveGallery();\n            await saveBackgrounds();\n            \n            renderGallery();\n            renderBackgrounds();\n            \n            const removedGallery = originalGalleryCount - galleryImages.length;\n            const removedBackground = originalBackgroundCount - backgroundImages.length;\n            \n            logEvent(`Automatyczne czyszczenie duplikatów: Usunięto ${removedGallery} z galerii, ${removedBackground} z tła`);\n            \n            if (removedGallery > 0 || removedBackground > 0) {\n                showNotification(`Automatycznie usunięto duplikaty: ${removedGallery} z galerii, ${removedBackground} z tła`, 'info', 3000);\n            }\n        }\n        \n    } catch (error) {\n        logEvent('Błąd podczas automatycznego czyszczenia duplikatów:', error);\n    }\n}\nfunction removeDuplicatesWithGitHubPriority(images) {\n    const grouped = {};\n    \n    images.forEach(img => {\n        const key = img.name.toLowerCase().trim().replace(/\\s+/g, ' ');\n        \n        if (!grouped[key]) {\n            grouped[key] = [];\n        }\n        grouped[key].push(img);\n    });\n    \n    const result = [];\n    \n    for (const key in grouped) {\n        const group = grouped[key];\n        \n        const githubImage = group.find(img => img.source === 'github');\n        \n        if (githubImage) {\n            result.push(githubImage);\n        } else {\n            const imageToKeep = group.reduce((newest, current) => {\n                const newestDate = new Date(newest.dateAdded || 0);\n                const currentDate = new Date(current.dateAdded || 0);\n                return currentDate > newestDate ? current : newest;\n            });\n            result.push(imageToKeep);\n        }\n    }\n    \n    return result;\n}\nfunction filterUserData(data, defaultData, identifier = 'name') {\n    return data.filter(item => {\n        if (typeof defaultData[0] === 'string') {\n            return !defaultData.includes(item);\n        } else {\n            return !defaultData.some(defaultItem => defaultItem[identifier] === item[identifier]);\n        }\n    });\n}\nfunction initAnimationSettings() {\n    const animationsEnabled = localStorage.getItem('animationsEnabled') !== 'false';\n    const toggle = document.getElementById('animationsToggle');\n    if (toggle) {\n        toggle.checked = animationsEnabled;\n        updateAnimations(animationsEnabled);\n        toggle.addEventListener('change', function() {\n            const enabled = this.checked;\n            localStorage.setItem('animationsEnabled', enabled);\n            updateAnimations(enabled);\n            showNotification(`Animacje ${enabled ? 'włączone' : 'wyłączone'}`, 'success');\n        });\n    }\n}\nfunction updateAnimations(enabled) {\n    if (enabled) {\n        document.body.classList.remove('no-animations');\n    } else {\n        document.body.classList.add('no-animations');\n    }\n}\nasync function loadSystemFonts(force = false) {\n    const fontSelector = document.getElementById('fontSelector');\n    if (!fontSelector) return;\n    const fontPermission = localStorage.getItem('fontPermission');\n    const permissionGranted = fontPermission === 'granted';\n    const permissionDenied = fontPermission === 'denied';\n    if (permissionGranted && !systemFontsLoaded && !force) {\n        showFontPermissionDialog(fontSelector);\n        return;\n    }\n    if (!permissionGranted && !permissionDenied && !force) {\n        showFontPermissionDialog(fontSelector);\n        return;\n    }\n    if (permissionGranted || force) {\n        try {\n            if ('queryLocalFonts' in window) {\n                const availableFonts = await window.queryLocalFonts();\n                const fontFamilies = new Set();\n                \n                fontFamilies.add('Systemowa domyślna');\n                \n                availableFonts.forEach(font => {\n                    fontFamilies.add(font.family);\n                });\n                \n                fontSelector.innerHTML = '';\n                fontFamilies.forEach(font => {\n                    const option = document.createElement('option');\n                    option.value = font === 'Systemowa domyślna' ? '' : font;\n                    option.textContent = font;\n                    fontSelector.appendChild(option);\n                });\n                \n                restoreSavedFont(fontSelector);\n                systemFontsLoaded = true;\n                return;\n            }\n        } catch (error) {\n            logEvent('Błąd pobierania czcionek systemowych:', error);\n        }\n    }\n    addFallbackFonts(fontSelector);\n    restoreSavedFont(fontSelector);\n}\nfunction showFontPermissionDialog(fontSelector) {\n    if (document.getElementById('fontPermissionModal')) return;\n    const modal = document.createElement('div');\n    modal.id = 'fontPermissionModal';\n    modal.className = 'modal';\n    modal.innerHTML = `\n        <div class=\"modal-content\" style=\"max-width: 500px;\">\n            <div class=\"modal-header\" style=\"text-align: center;display:block !important;\">\n                <h3>Dostęp do czcionek systemowych</h3>\n            </div>\n            <div class=\"modal-body\"><center>\n                <p>Aby wyświetlić listę czcionek dostępnych w systemie, aplikacja potrzebuje Twojej zgody na dostęp do nich.</p>\n                <p>Czy chcesz załadować czcionki systemowe?</p></center>\n            </div>\n            <div class=\"modal-footer\" style=\"display: flex; justify-content: space-between; gap: 10px;\">\n                <button id=\"fontPermissionDeny\" class=\"btn-danger\" style=\"flex: 1;\">\n                    <i class=\"fas fa-times\"></i> Nie wyrażam zgody\n                </button>\n                <button id=\"fontPermissionAllow\" class=\"btn-success\" style=\"flex: 1;\">\n                    <i class=\"fas fa-check\"></i> Wyrażam zgodę\n                </button>\n            </div>\n        </div>\n    `;\n    document.body.appendChild(modal);\n    modal.classList.add('show');\n  \n  \n    setTimeout(() => {\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n    document.getElementById('fontPermissionAllow').addEventListener('click', function() {\n        localStorage.setItem('fontPermission', 'granted');\n        modal.classList.remove('show');\n        setTimeout(() => modal.remove(), 300);\n        loadSystemFonts(true);\n    });\n    document.getElementById('fontPermissionDeny').addEventListener('click', function() {\n        localStorage.setItem('fontPermission', 'denied');\n        modal.classList.remove('show');\n        setTimeout(() => modal.remove(), 300);\n        addFallbackFonts(fontSelector);\n        restoreSavedFont(fontSelector);\n    });\n}\nfunction addFallbackFonts(fontSelector) {\n    const fallbackFonts = [\n        'Arial, sans-serif', 'Helvetica, sans-serif', 'Georgia, serif',\n        'Times New Roman, serif', 'Courier New, monospace', 'Verdana, sans-serif',\n        'Tahoma, sans-serif', 'Trebuchet MS, sans-serif', 'Impact, sans-serif', 'Comic Sans MS, cursive'\n    ];\n    if (fontSelector.options.length === 0) {\n        fontSelector.innerHTML = '<option value=\"\">Systemowa domyślna</option>';\n    }\n    fallbackFonts.forEach(font => {\n        const option = document.createElement('option');\n        option.value = font;\n        option.textContent = font.split(',')[0];\n        fontSelector.appendChild(option);\n    });\n}\nfunction restoreSavedFont(fontSelector) {\n    const savedFont = localStorage.getItem('appFont');\n    if (savedFont) {\n        fontSelector.value = savedFont;\n        updateFont(savedFont);\n    }\n}\nfunction showLoadFontsButton(fontSelector) {\n    if (document.getElementById('loadFontsBtn')) return;\n    const btn = document.createElement('button');\n    btn.id = 'loadFontsBtn';\n    btn.type = 'button';\n    btn.textContent = 'Załaduj czcionki systemowe';\n    btn.title = 'Kliknij aby aplikacja mogła uzyskać dostęp do czcionek systemowych';\n    fontSelector.parentNode.insertBefore(btn, fontSelector.nextSibling);\n    btn.addEventListener('click', async () => {\n        try {\n            // await loadSystemFonts();\n            btn.remove();\n        } catch (e) {\n            logEvent('Ponowne pobieranie czcionek nie powiodło się:', e);\n            if (e.name === 'SecurityError') {\n                alert('Przeglądarka nadal blokuje dostęp do czcionek. Spróbuj zaktualizować przeglądarkę lub użyć innej.');\n            }\n        }\n    }, { once: true });\n}\nfunction initFontSettings() {\n    const fontSelector = document.getElementById('fontSelector');\n    if (fontSelector) {\n        addFallbackFonts(fontSelector);\n        restoreSavedFont(fontSelector);\n        // loadSystemFonts();\n        fontSelector.addEventListener('change', function() {\n            const font = this.value;\n            localStorage.setItem('appFont', font);\n            updateFont(font);\n            showNotification(`Czcionka zmieniona`, 'success');\n        });\n    }\n}\nfunction updateFont(font) {\n    if (!font) {\n        document.body.style.fontFamily = '';\n    } else {\n        document.body.style.fontFamily = font;\n    }\n}\nfunction initAllSettings() {\n    initAnimationSettings();\n    initFontSettings();\n    initColorSettings();\n    initVisibilitySettings();\n    initAdditionalVisibilitySettings();\n    initAdvancedButtonsSetting();\n\tinitDarkModeSetting();\n    const savedCurrencyConfig = localStorage.getItem('currencyConfig');\n    if (savedCurrencyConfig) {\n        currencyConfig = JSON.parse(savedCurrencyConfig);\n    }\n}\ndocument.querySelectorAll('.theme-preset').forEach(button => {\n    button.addEventListener('click', function() {\n        const theme = this.dataset.theme;\n        applyThemePreset(theme);\n    });\n});\nfunction applyThemePreset(theme) {\n    const themes = {\n        default: {\n            primary: '#00796b',\n            accent: '#4db6ac',\n            gradientFrom: '#790000',\n            gradientTo: '#ff0000'\n        },\n        blue: {\n            primary: '#1565c0',\n            accent: '#42a5f5',\n            gradientFrom: '#004d7a',\n            gradientTo: '#008793'\n        },\n        green: {\n            primary: '#2e7d32',\n            accent: '#4caf50',\n            gradientFrom: '#2d5016',\n            gradientTo: '#4a7c59'\n        },\n        purple: {\n            primary: '#7b1fa2',\n            accent: '#ba68c8',\n            gradientFrom: '#3f2b96',\n            gradientTo: '#a8c0ff'\n        }\n    };\n    const themeColors = themes[theme];\n    document.getElementById('primaryColorPicker').value = themeColors.primary;\n    document.getElementById('accentColorPicker').value = themeColors.accent;\n    document.getElementById('headerGradientFrom').value = themeColors.gradientFrom;\n    document.getElementById('headerGradientTo').value = themeColors.gradientTo;\n    applyCustomColors();\n}\nfunction initSliders() {\n    const opacitySlider = document.getElementById('panelOpacity');\n    const opacityValue = document.getElementById('opacityValue');\n    if (opacitySlider && opacityValue) {\n        opacitySlider.addEventListener('input', function() {\n            const value = this.value;\n            opacityValue.textContent = `${Math.round(value * 100)}%`;\n            document.documentElement.style.setProperty('--panel-opacity', value);\n            localStorage.setItem('panelOpacity', value);\n            document.querySelectorAll('.panel').forEach(panel => {\n                panel.style.opacity = value;\n            });\n        });\n        const savedOpacity = localStorage.getItem('panelOpacity') || 1;\n        opacitySlider.value = savedOpacity;\n        opacityValue.textContent = `${Math.round(savedOpacity * 100)}%`;\n        document.documentElement.style.setProperty('--panel-opacity', savedOpacity);\n    }\n    const blurSlider = document.getElementById('backgroundBlur');\n    const blurValue = document.getElementById('blurValue');\n    if (blurSlider && blurValue) {\n        blurSlider.addEventListener('input', function() {\n            const value = this.value;\n            blurValue.textContent = `${value}px`;\n            document.documentElement.style.setProperty('--background-blur', `${value}px`);\n            localStorage.setItem('backgroundBlur', value);\n            const bgContainer = document.getElementById('bgContainer');\n            if (bgContainer) {\n                bgContainer.style.backdropFilter = `blur(${value}px)`;\n            }\n        });\n        const savedBlur = localStorage.getItem('backgroundBlur') || 0;\n        blurSlider.value = savedBlur;\n        blurValue.textContent = `${savedBlur}px`;\n        document.documentElement.style.setProperty('--background-blur', `${savedBlur}px`);\n    }\n    const darkenSlider = document.getElementById('darkenEffect');\n    const darkenValue = document.getElementById('darkenValue');\n    if (darkenSlider && darkenValue) {\n        darkenSlider.addEventListener('input', function() {\n            const value = this.value;\n            darkenValue.textContent = `${value}%`;\n            document.documentElement.style.setProperty('--darken-amount', `${value}%`);\n            localStorage.setItem('darkenEffect', value);\n            applyDarkenEffect(value);\n        });\n        const savedDarken = localStorage.getItem('darkenEffect') || 0;\n        darkenSlider.value = savedDarken;\n        darkenValue.textContent = `${savedDarken}%`;\n        document.documentElement.style.setProperty('--darken-amount', `${savedDarken}%`);\n        applyDarkenEffect(savedDarken);\n    }\n    const radiusSlider = document.getElementById('borderRadius');\n    const radiusValue = document.getElementById('radiusValue');\n    if (radiusSlider && radiusValue) {\n        radiusSlider.addEventListener('input', function() {\n            const value = this.value;\n            radiusValue.textContent = `${value}px`;\n            document.documentElement.style.setProperty('--radius', `${value}px`);\n            localStorage.setItem('borderRadius', value);\n            document.querySelectorAll('.panel, .product, .gallery-item, .modal-content, button')\n                .forEach(el => {\n                    el.style.borderRadius = `${value}px`;\n                });\n        });\n        const savedRadius = localStorage.getItem('borderRadius') || 10;\n        radiusSlider.value = savedRadius;\n        radiusValue.textContent = `${savedRadius}px`;\n        document.documentElement.style.setProperty('--radius', `${savedRadius}px`);\n    }\n    const borderWidthSlider = document.getElementById('borderWidth');\n    const borderWidthValue = document.getElementById('borderWidthValue');\n    if (borderWidthSlider && borderWidthValue) {\n        borderWidthSlider.addEventListener('input', function() {\n            const value = this.value;\n            borderWidthValue.textContent = `${value}px`;\n            document.documentElement.style.setProperty('--border-width', `${value}px`);\n            localStorage.setItem('borderWidth', value);\n            document.querySelectorAll('.panel, .product, .gallery-item, .modal-content')\n                .forEach(el => {\n                    el.style.borderWidth = `${value}px`;\n                });\n        });\n        const savedBorderWidth = localStorage.getItem('borderWidth') || 1;\n        borderWidthSlider.value = savedBorderWidth;\n        borderWidthValue.textContent = `${savedBorderWidth}px`;\n        document.documentElement.style.setProperty('--border-width', `${savedBorderWidth}px`);\n    }\n    const borderColorPicker = document.getElementById('borderColorPicker');\n    if (borderColorPicker) {\n        borderColorPicker.addEventListener('input', function() {\n            const value = this.value;\n            document.documentElement.style.setProperty('--border-color', value);\n            localStorage.setItem('borderColor', value);\n            document.querySelectorAll('.panel, .product, .gallery-item, .modal-content')\n                .forEach(el => {\n                    el.style.borderColor = value;\n                });\n        });\n        const savedBorderColor = localStorage.getItem('borderColor') || '#d1d9e2';\n        borderColorPicker.value = savedBorderColor;\n        document.documentElement.style.setProperty('--border-color', savedBorderColor);\n    }\n    const colorPickers = [\n        'primaryColorPicker', 'accentColorPicker', \n        'headerGradientFrom', 'headerGradientTo'\n    ];\n    colorPickers.forEach(pickerId => {\n        const picker = document.getElementById(pickerId);\n        if (picker) {\n            picker.addEventListener('input', function() {\n                applyCustomColors();\n            });\n        }\n    });\n    const savedColors = JSON.parse(localStorage.getItem('customColors'));\n    if (savedColors) {\n        document.getElementById('primaryColorPicker').value = savedColors.primary;\n        document.getElementById('accentColorPicker').value = savedColors.accent;\n        document.getElementById('headerGradientFrom').value = savedColors.gradientFrom;\n        document.getElementById('headerGradientTo').value = savedColors.gradientTo;\n        applyCustomColors();\n    }\n}\nfunction applyDarkenEffect(amount) {\n    let darkenOverlay = document.getElementById('darkenOverlay');\n    if (!darkenOverlay) {\n        darkenOverlay = document.createElement('div');\n        darkenOverlay.id = 'darkenOverlay';\n        darkenOverlay.style.position = 'fixed';\n        darkenOverlay.style.top = '0';\n        darkenOverlay.style.left = '0';\n        darkenOverlay.style.width = '100%';\n        darkenOverlay.style.height = '100%';\n        darkenOverlay.style.backgroundColor = `rgba(0, 0, 0, ${amount/100})`;\n        darkenOverlay.style.pointerEvents = 'none';\n        darkenOverlay.style.zIndex = '9998';\n        document.body.appendChild(darkenOverlay);\n    } else {\n        darkenOverlay.style.backgroundColor = `rgba(0, 0, 0, ${amount/100})`;\n    }\n    darkenOverlay.style.display = amount > 0 ? 'block' : 'none';\n}\nfunction applyCustomColors() {\n    const primaryColor = document.getElementById('primaryColorPicker').value;\n    const accentColor = document.getElementById('accentColorPicker').value;\n    const gradientFrom = document.getElementById('headerGradientFrom').value;\n    const gradientTo = document.getElementById('headerGradientTo').value;\n    document.documentElement.style.setProperty('--primary', primaryColor);\n    document.documentElement.style.setProperty('--accent', accentColor);\n    const header = document.querySelector('header');\n    header.style.background = `linear-gradient(135deg, ${gradientFrom}, ${gradientTo})`;\n    localStorage.setItem('customColors', JSON.stringify({\n        primary: primaryColor,\n        accent: accentColor,\n        gradientFrom: gradientFrom,\n        gradientTo: gradientTo\n    }));\n}\nfunction resetAnimationSettings() {\n    document.getElementById('animationsToggle').checked = true;\n    document.body.classList.remove('no-animations');\n    localStorage.setItem('animationsEnabled', 'true');\n}\nfunction resetFontSettings() {\n    document.getElementById('fontSelector').value = '';\n    document.body.style.fontFamily = '';\n    localStorage.removeItem('appFont');\n}\nfunction resetVisibilitySettings() {\n    const defaults = {\n        controlsVisibility: true,\n        hamburgerVisibility: false,\n        instructionVisibility: true,\n        statisticsVisibility: true,\n        notificationsVisibility: true,\n        advancedButtons: true\n    };\n    document.getElementById('controlsVisibilityToggle').checked = defaults.controlsVisibility;\n    document.getElementById('hamburgerVisibilityToggle').checked = defaults.hamburgerVisibility;\n    document.getElementById('instructionVisibilityToggle').checked = defaults.instructionVisibility;\n    document.getElementById('statisticsVisibilityToggle').checked = defaults.statisticsVisibility;\n    document.getElementById('notificationsVisibilityToggle').checked = defaults.notificationsVisibility;\n    document.getElementById('advancedButtonsVisibilityToggle').checked = defaults.advancedButtons;\n    showControlsPanel = defaults.controlsVisibility;\n    showHamburgerOnDesktop = defaults.hamburgerVisibility;\n    showInstructionButton = defaults.instructionVisibility;\n    showStatisticsSection = defaults.statisticsVisibility;\n    showNotifications = defaults.notificationsVisibility;\n    showAdvancedButtons = defaults.advancedButtons;\n    localStorage.setItem('showControlsPanel', defaults.controlsVisibility);\n    localStorage.setItem('showHamburgerOnDesktop', defaults.hamburgerVisibility);\n    localStorage.setItem('showInstructionButton', defaults.instructionVisibility);\n    localStorage.setItem('showStatisticsSection', defaults.statisticsVisibility);\n    localStorage.setItem('showNotifications', defaults.notificationsVisibility);\n    localStorage.setItem('showAdvancedButtons', defaults.advancedButtons);\n    applyVisibilitySettings();\n    applyAdditionalVisibilitySettings();\n    applyAdvancedButtonsSetting();\n}\nfunction resetAllSettingsToDefault() {\n    showConfirmation(\n        'Resetowanie ustawień',\n        'Czy na pewno chcesz przywrócić wszystkie ustawienia do wartości domyślnych?',\n        function(confirmed) {\n            if (!confirmed) return;\n            resetColors();\n            resetSlidersToDefault();\n            resetVisibilitySettings();\n            resetFontSettings();\n            resetAnimationSettings();\n            resetToDefaultBackground();\n            closeBackgroundModal();\n            showNotification('Przywrócono domyślne ustawienia', 'success');\n            playNotificationSound('success');\n        },\n        null,\n        20000\n    );\n}\nfunction resetSlidersToDefault() {\n    const defaults = {\n        panelOpacity: 1,\n        backgroundBlur: 0,\n        darkenEffect: 0,\n        borderRadius: 10,\n        borderWidth: 1,\n        borderColor: '#d1d9e2'\n    };\n    if (document.getElementById('panelOpacity')) document.getElementById('panelOpacity').value = defaults.panelOpacity;\n    if (document.getElementById('backgroundBlur')) document.getElementById('backgroundBlur').value = defaults.backgroundBlur;\n    if (document.getElementById('darkenEffect')) document.getElementById('darkenEffect').value = defaults.darkenEffect;\n    if (document.getElementById('borderRadius')) document.getElementById('borderRadius').value = defaults.borderRadius;\n    if (document.getElementById('borderWidth')) document.getElementById('borderWidth').value = defaults.borderWidth;\n    if (document.getElementById('borderColorPicker')) document.getElementById('borderColorPicker').value = defaults.borderColor;\n    if (document.getElementById('opacityValue')) document.getElementById('opacityValue').textContent = `${defaults.panelOpacity * 100}%`;\n    if (document.getElementById('blurValue')) document.getElementById('blurValue').textContent = `${defaults.backgroundBlur}px`;\n    if (document.getElementById('darkenValue')) document.getElementById('darkenValue').textContent = `${defaults.darkenEffect}%`;\n    if (document.getElementById('radiusValue')) document.getElementById('radiusValue').textContent = `${defaults.borderRadius}px`;\n    if (document.getElementById('borderWidthValue')) document.getElementById('borderWidthValue').textContent = `${defaults.borderWidth}px`;\n    document.documentElement.style.setProperty('--panel-opacity', defaults.panelOpacity);\n    document.documentElement.style.setProperty('--background-blur', `${defaults.backgroundBlur}px`);\n    document.documentElement.style.setProperty('--darken-amount', `${defaults.darkenEffect}%`);\n    document.documentElement.style.setProperty('--radius', `${defaults.borderRadius}px`);\n    document.documentElement.style.setProperty('--border-width', `${defaults.borderWidth}px`);\n    document.documentElement.style.setProperty('--border-color', defaults.borderColor);\n    if (defaults.darkenEffect === 0) {\n        const darkenOverlay = document.getElementById('darkenOverlay');\n        if (darkenOverlay) darkenOverlay.style.display = 'none';\n    }\n    localStorage.setItem('panelOpacity', defaults.panelOpacity);\n    localStorage.setItem('backgroundBlur', defaults.backgroundBlur);\n    localStorage.setItem('darkenEffect', defaults.darkenEffect);\n    localStorage.setItem('borderRadius', defaults.borderRadius);\n    localStorage.setItem('borderWidth', defaults.borderWidth);\n    localStorage.setItem('borderColor', defaults.borderColor);\n}\nfunction applyCustomColors() {\n    const primaryColor = document.getElementById('primaryColorPicker').value;\n    const accentColor = document.getElementById('accentColorPicker').value;\n    const gradientFrom = document.getElementById('headerGradientFrom').value;\n    const gradientTo = document.getElementById('headerGradientTo').value;\n    document.documentElement.style.setProperty('--primary', primaryColor);\n    document.documentElement.style.setProperty('--accent', accentColor);\n    const header = document.querySelector('header');\n    header.style.background = `linear-gradient(135deg, ${gradientFrom}, ${gradientTo})`;\n    localStorage.setItem('customColors', JSON.stringify({\n        primary: primaryColor,\n        accent: accentColor,\n        gradientFrom: gradientFrom,\n        gradientTo: gradientTo\n    }));\n}\nfunction resetColors() {\n    document.documentElement.style.removeProperty('--primary');\n    document.documentElement.style.removeProperty('--accent');\n    const header = document.querySelector('header');\n    header.style.background = 'linear-gradient(135deg, #790000, #ff0000)';\n    document.getElementById('primaryColorPicker').value = '#00796b';\n    document.getElementById('accentColorPicker').value = '#4db6ac';\n    document.getElementById('headerGradientFrom').value = '#790000';\n    document.getElementById('headerGradientTo').value = '#ff0000';\n    localStorage.removeItem('customColors');\n    showNotification('Przywrócono domyślne kolory', 'success');\n}\nfunction initColorSettings() {\n    const savedColors = JSON.parse(localStorage.getItem('customColors'));\n    if (savedColors) {\n        document.getElementById('primaryColorPicker').value = savedColors.primary;\n        document.getElementById('accentColorPicker').value = savedColors.accent;\n        document.getElementById('headerGradientFrom').value = savedColors.gradientFrom;\n        document.getElementById('headerGradientTo').value = savedColors.gradientTo;\n        applyCustomColors();\n    }\n    initSliders();\n}\nfunction openBackgroundModal() {\n    backgroundCurrentPage = 1;\n    updateBackgroundCount();\n    document.getElementById('backgroundUploadPanel').style.display = 'none';\n    document.getElementById('backgroundImageName').value = '';\n    document.getElementById('backgroundUploadInput').value = '';\n    renderBackgrounds();\n    document.getElementById('backgroundModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('backgroundModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeBackgroundModal() {\n    document.getElementById('backgroundModal').classList.remove('show');\n}\nfunction findProductIndex(product) {\n  return products.findIndex(p => \n    p.name === product.name &&\n    p.category === product.category &&\n    p.price === product.price &&\n    p.quantity === product.quantity &&\n    p.year === product.year\n  );\n}\nasync function loadGallery() {\n    try {\n        const db = await openDB();\n        const tx = db.transaction('galleryImages', 'readonly');\n        const store = tx.objectStore('galleryImages');\n        const request = store.getAll();\n        return new Promise((resolve, reject) => {\n            request.onsuccess = async function() {\n                const savedImages = request.result || [];\n                galleryImages = [];\n                \n                for (const savedImg of savedImages) {\n                    if (savedImg.source === 'github') {\n                        galleryImages.push({\n                            id: savedImg.id,\n                            name: savedImg.name,\n                            url: savedImg.url,\n                            dateAdded: savedImg.dateAdded,\n                            source: 'github'\n                        });\n                    } else {\n                        galleryImages.push({\n                            id: savedImg.id,\n                            name: savedImg.name,\n                            data: savedImg.data,\n                            dateAdded: savedImg.dateAdded,\n                            source: 'local'\n                        });\n                    }\n                }\n                \n                await cleanupGalleryDuplicatesAutomatically();\n                resolve();\n            };\n            request.onerror = () => reject('Błąd ładowania galerii');\n        });\n    } catch (error) {\n        logEvent(error);\n        galleryImages = [];\n    } finally {\n        updateGalleryCount();\n    }\n}\n\nasync function saveGallery() {\n    try {\n        const db = await openDB();\n        const tx = db.transaction('galleryImages', 'readwrite');\n        const store = tx.objectStore('galleryImages');\n        await store.clear();\n        \n        for (const img of galleryImages) {\n            if (!img.id) {\n                img.id = generateUniqueId();\n            }\n            \n            const imageToSave = {\n                id: img.id,\n                name: img.name,\n                dateAdded: img.dateAdded,\n                source: img.source || 'local'\n            };\n            \n            if (img.source === 'github') {\n                imageToSave.url = img.url;\n            } else {\n                imageToSave.data = img.data;\n            }\n            \n            await store.put(imageToSave);\n        }\n        return new Promise(resolve => tx.oncomplete = resolve);\n    } catch (error) {\n        logEvent('Błąd zapisu galerii:', error);\n    }\n}\nconst soundManager = {\n  lastPlayed: {},\n  minInterval: 3000,\n  queue: [],\n  isPlaying: false,\n  play(type) {\n    if (!soundPermissionGiven || !soundAllowed) return;\n    const now = Date.now();\n    if (this.lastPlayed[type] && now - this.lastPlayed[type] < this.minInterval) {\n      return;\n    }\n    this.lastPlayed[type] = now;\n    this.queue.push(type);\n    this.processQueue();\n  },\n  async processQueue() {\n    if (this.isPlaying || this.queue.length === 0) return;\n    this.isPlaying = true;\n    const type = this.queue.shift();\n    try {\n      const audio = new Audio(SOUND_URLS[type]);\n      await audio.play();\n      await new Promise(resolve => {\n        setTimeout(resolve, this.minInterval);\n      });\n    } catch (error) {\n    }\n    this.isPlaying = false;\n    this.processQueue();\n  }\n};\nfunction playNotificationSound(type) {\n  soundManager.play(type);\n}\nfunction playSound(type) {\n  soundManager.play(type);\n}\nfunction playDemoSound(type) {\n  soundManager.play(type);\n}\nfunction unlockAudioContext() {\n  if (audioContextUnlocked) return;\n  const context = new (window.AudioContext || window.webkitAudioContext)();\n  const buffer = context.createBuffer(1, 1, 22050);\n  const source = context.createBufferSource();\n  source.buffer = buffer;\n  source.connect(context.destination);\n  source.start(0);\n  source.onended = () => {\n    audioContextUnlocked = true;\n    context.close();\n  };\n}\nfunction toggleDarkMode() {\n    setDarkMode(!darkMode);\n}\ndarkModeToggle.addEventListener('click', toggleDarkMode);\ndocument.body.classList.toggle('dark-mode', darkMode);\nif (darkMode) {\n\tdarkModeIcon.className = 'fas fa-sun';\n}\nasync function fetchCategoriesFromGitHub() {\n    try {\n        const response = await fetch('https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/categories.json');\n        if (!response.ok) {\n            throw new Error('Nie udało się pobrać kategorii');\n        }\n        const categoriesFromGitHub = await response.json();\n        return categoriesFromGitHub;\n    } catch (error) {\n        logEvent('Błąd pobierania kategorii:', error);\n        return null;\n    }\n}\nasync function updateCategoriesFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(30);\n    \n    try {\n        const githubCategories = await fetchCategoriesFromGitHub();\n        if (githubCategories && githubCategories.length > 0) {\n            const existingCategoryNames = new Set(categories.map(cat => cat.name));\n            const newCategories = githubCategories.filter(cat => !existingCategoryNames.has(cat.name));\n            \n            if (newCategories.length > 0) {\n                categories.push(...newCategories);\n                saveCategories();\n                renderCategoriesList();\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n                showNotification(`Dodano ${newCategories.length} nowych kategorii`, 'success');\n                playNotificationSound('success');\n            } else {\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n            }\n        } else {\n            throw new Error('Nie udało się pobrać kategorii');\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji kategorii: ' + error.message, 'danger');\n    }\n}\nfunction saveCategories() {\n    defaultCategories.forEach(defaultCat => {\n        const exists = categories.some(cat => cat.name.toLowerCase() === defaultCat.name.toLowerCase());\n        if (!exists) {\n            categories.push(defaultCat);\n        }\n    });\n\n    localStorage.setItem('categories', JSON.stringify(categories));\n    updateCategorySelects();\n    renderProducts(applyAllFilters());\n}\nfunction stopGoldBuybackAutoRefresh() {\n  if (goldBuybackInterval) {\n    clearInterval(goldBuybackInterval);\n    goldBuybackInterval = null;\n  }\n}\nfunction startGoldBuybackAutoRefresh(product) {\n  if (goldBuybackInterval) {\n    clearInterval(goldBuybackInterval);\n  }\n  \n  goldBuybackInterval = setInterval(async () => {\n    if (document.getElementById('productPreviewModal').classList.contains('show')) {\n      const result = await calculateGoldBuybackPrice(product, true);\n      \n      const buybackElement = document.getElementById('previewGoldBuybackValue');\n      if (buybackElement) {\n        buybackElement.innerHTML = `\n          <div>${result.buybackPrice.toFixed(2).replace('.', ',')} zł</div>\n          <div style=\"font-size: 0.8em; color: #666; margin-top: 5px;\">\n            ${result.rateInfo}<br>\n            Kurs USD/PLN: ${result.usdRate.toFixed(4)}\n            <br><em>(automatycznie odświeżone)</em>\n          </div>\n        `;\n      }\n    }\n  }, 300000);\n}\nfunction updateCategorySelects() {\n  categorySelect.innerHTML = '';\n  categories.forEach(cat => {\n    const option = document.createElement('option');\n    option.value = cat.name;\n    option.textContent = cat.name;\n    categorySelect.appendChild(option);\n  });\n  categoryFilter.innerHTML = '<option value=\"all\">Wszystkie kategorie</option>';\n  categories.forEach(cat => {\n    const option = document.createElement('option');\n    option.value = cat.name;\n    option.textContent = cat.name;\n    categoryFilter.appendChild(option);\n  });\n}\ndocument.addEventListener('DOMContentLoaded', updateCategorySelects);\nfunction addCategory() {\n    const newCat = document.getElementById('newCategory').value.trim();\n    logEvent(`Dodawanie nowej kategorii: ${newCat}`);\n    if (!newCat) return;\n    if (newCat.length > 50) {\n        showNotification('Nazwa kategorii zbyt długa', 'warning');\n        return;\n    }\n    if (isProtectedCategory(newCat)) {\n        showNotification('Nie można dodać kategorii o nazwie \"' + newCat + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    const exists = categories.some(cat => cat.name.toLowerCase() === newCat.toLowerCase());\n    if (exists) {\n        showNotification('Kategoria już istnieje', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n\n    categories.push({\n        name: newCat,\n        bg: '#ededed',\n        text: '#333'\n    });\n    saveCategories();\n    renderCategoriesList();\n    document.getElementById('newCategory').value = '';\n    logEvent(`Dodano kategorię: ${newCat}`);\n    showNotification(`Dodano kategorię: ${newCat}`, 'success');\n    playNotificationSound('success');\n}\nfunction removeCategory(index) {\n    const catName = categories[index].name;\n    logEvent(`Próba usunięcia kategorii: ${catName}`);\n\n    if (isProtectedCategory(catName)) {\n        showNotification('Nie można usunąć domyślnej kategorii \"' + catName + '\"', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n\n    const isUsed = products.some(p => p.category === catName);\n    if (isUsed) {\n        showNotification('Nie można usunąć kategorii, która jest używana', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć kategorię \"${catName}\"?`,\n        function(confirmed, idx) {\n            if (confirmed) {\n                categories.splice(idx, 1);\n                saveCategories();\n                renderCategoriesList();\n                logEvent(`Usunięto kategorię: ${catName}`);\n                showNotification('Kategoria została usunięta', 'success');\n                playNotificationSound('success');\n            }\n        },\n        index\n    );\n}\nfunction moveCategoryUp(index) {\n    logEvent(`Przenoszenie kategorii w górę: ${categories[index].name}`);\n    if (index <= 0) return;\n    const current = categories[index];\n    const above = categories[index - 1];\n    if (isProtectedCategory(current.name) || isProtectedCategory(above.name)) return;\n    const temp = categories[index - 1];\n    categories[index - 1] = categories[index];\n    categories[index] = temp;\n    saveCategories();\n    renderCategoriesList();\n}\nfunction moveCategoryDown(index) {\n    logEvent(`Przenoszenie kategorii w dół: ${categories[index].name}`);\n    if (index >= categories.length - 1) return;\n    const current = categories[index];\n    const below = categories[index + 1];\n    if (isProtectedCategory(current.name) || isProtectedCategory(below.name)) return;\n    const temp = categories[index + 1];\n    categories[index + 1] = categories[index];\n    categories[index] = temp;\n    saveCategories();\n    renderCategoriesList();\n}\nfunction updateCategoryColor(index, type, value) {\n    const catName = categories[index].name;\n    logEvent(`Zmiana koloru kategorii ${catName}: ${type} na ${value}`);\n\tconst current = categories[index];\n\tconst originalBg = current.bg;\n\tconst originalText = current.text;\n\tif (type === 'bg') {\n\t\tcurrent.bg = value;\n\t} else {\n\t\tcurrent.text = value;\n\t}\n\tconst isDuplicate = categories.some((cat, i) =>\n\t\ti !== index &&\n\t\tcat.bg.toLowerCase() === current.bg.toLowerCase() &&\n\t\tcat.text.toLowerCase() === current.text.toLowerCase()\n\t);\n\tif (isDuplicate) {\n\t\tshowInfoModal(\"Inna kategoria już ma taką samą kombinację kolorów tła i tekstu!\");\n\t\tcurrent.bg = originalBg;\n\t\tcurrent.text = originalText;\n\t\tconst inputs = document.querySelectorAll(`input[type=\"color\"]`);\n\t\tconst bgInput = inputs[index * 2];\n\t\tconst textInput = inputs[index * 2 + 1];\n\t\tbgInput.value = originalBg;\n\t\ttextInput.value = originalText;\n\t\tbgInput.parentElement.style.backgroundColor = originalBg;\n\t\ttextInput.parentElement.style.backgroundColor = originalText;\n\t\treturn;\n\t}\n\tsaveCategories();\n\trenderCategoriesList();\n\trenderProducts(applyAllFilters());\n}\nfunction updateGalleryCount() {\n\tdocument.getElementById('galleryCount').textContent = galleryImages.length;\n}\nfunction addShopEditModal() {\n\tconst modal = document.createElement('div');\n\tmodal.id = 'shopEditModal';\n\tmodal.className = 'modal';\n\tmodal.innerHTML = `\n\t\t<div class=\"modal-content\" style=\"max-width: 500px;\">\n\t\t\t<div class=\"modal-header\">\n\t\t\t\t<h3 class=\"modal-title\"><i class=\"fas fa-edit\"></i> Edytuj sklep</h3>\n\t\t\t\t<button class=\"close-modal\" onclick=\"closeShopEditModal()\">&times;</button>\n\t\t\t</div>\n\t\t\t<div class=\"shop-edit-form\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"editShopName\">Nazwa sklepu</label>\n\t\t\t\t\t<input type=\"text\" id=\"editShopName_2\" placeholder=\"Nazwa sklepu\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"editShopUrl\">URL sklepu</label>\n\t\t\t\t\t<input type=\"url\" id=\"editShopUrl_2\" placeholder=\"https://...\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div style=\"margin-top: 1.5rem; display: flex; gap: 1rem;\">\n\t\t\t\t<button class=\"btn-success\" onclick=\"saveShopEdit()\"><i class=\"fas fa-save\"></i> Zapisz zmiany</button>\n\t\t\t\t<button class=\"btn-danger\" onclick=\"closeShopEditModal()\"><i class=\"fas fa-times\"></i> Anuluj</button>\n\t\t\t</div>\n\t\t</div>\n\t`;\n\tdocument.body.appendChild(modal);\n}\nfunction cleanupOldLogs() {\n    const maxPages = 200;\n    const maxLogs = maxPages * logsPerPage;\n    if (eventLogs.length > maxLogs) {\n        eventLogs = eventLogs.slice(-maxLogs);\n        saveLogs();\n        logEvent(`Automatyczne czyszczenie logów: zachowano ${maxLogs} najnowszych wpisów (${maxPages} stron)`);\n    }\n    const now = new Date();\n    const retentionDays = 3;\n    const filteredLogs = eventLogs.filter(log => {\n        const logDate = new Date(log.timestamp);\n        const diffDays = Math.floor((now - logDate) / (1000 * 60 * 60 * 24));\n        return diffDays <= retentionDays;\n    });\n    if (filteredLogs.length !== eventLogs.length) {\n        eventLogs = filteredLogs;\n        saveLogs();\n        logEvent(`Automatyczne czyszczenie logów: usunięto stare wpisy powyżej ${retentionDays} dni`);\n    }\n}\nfunction renderCategoriesList() {\n  const list = document.getElementById('categoriesList');\n  list.innerHTML = '';\n\n  const startIndex = (categoriesCurrentPage - 1) * paginationConfig.categoriesPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.categoriesPerPage, categories.length);\n  const pageCategories = categories.slice(startIndex, endIndex);\n\n  if (pageCategories.length === 0) {\n    list.innerHTML = '<p class=\"empty-state\">Brak kategorii</p>';\n    renderCategoriesPagination();\n    return;\n  }\n\n  pageCategories.forEach((cat, index) => {\n    const globalIndex = startIndex + index;\n    const isEditing = globalIndex === editingCategoryIndex;\n    const item = document.createElement('div');\n    item.className = 'category-item';\n    const isProtected = isProtectedCategory(cat.name);\n\n    if (isEditing) {\n      item.innerHTML = `\n        <div style=\"display: flex; flex-direction: column; width: 100%;\">\n          <input type=\"text\" class=\"edit-category-name\" value=\"${cat.name}\" placeholder=\"Nowa nazwa kategorii\">\n          <div class=\"category-edit-form\">\n            <button class=\"btn-success\" onclick=\"saveCategoryEdit()\">\n              <i class=\"fas fa-save\"></i> Zapisz\n            </button>\n            <button class=\"btn-danger\" onclick=\"cancelCategoryEdit()\">\n              <i class=\"fas fa-times\"></i> Anuluj\n            </button>\n          </div>\n        </div>\n      `;\n    } else {\n      const upDisabled = (globalIndex <= 0) || isProtected || (globalIndex > 0 && isProtectedCategory(categories[globalIndex - 1].name));\n      const downDisabled = (globalIndex >= categories.length - 1) || isProtected || (globalIndex < categories.length - 1 && isProtectedCategory(categories[globalIndex + 1].name));\n\n      item.innerHTML = `\n        <div style=\"display: flex; justify-content: space-between; align-items: center; width: 100%;\">\n          <span>${cat.name}</span>\n          <div class=\"actions\">\n            <label class=\"color-picker\" style=\"background-color: ${cat.bg};\">\n              <input type=\"color\" value=\"${cat.bg}\" title=\"Kolor tła\" onchange=\"updateCategoryColor(${globalIndex}, 'bg', this.value); this.parentElement.style.backgroundColor = this.value;\">\n            </label>\n            <label class=\"color-picker\" style=\"background-color: ${cat.text};\">\n              <input type=\"color\" value=\"${cat.text}\" title=\"Kolor tekstu\" onchange=\"updateCategoryColor(${globalIndex}, 'text', this.value); this.parentElement.style.backgroundColor = this.value;\">\n            </label>\n\n            <button class=\"btn-info ${upDisabled ? 'disabled' : ''}\"\n              onclick=\"${!upDisabled ? `moveCategoryUp(${globalIndex})` : 'return false;'}\"\n              ${upDisabled ? 'disabled' : ''}>\n              <i class=\"fas fa-arrow-up\"></i>\n            </button>\n\n            <button class=\"btn-info ${downDisabled ? 'disabled' : ''}\"\n              onclick=\"${!downDisabled ? `moveCategoryDown(${globalIndex})` : 'return false;'}\"\n              ${downDisabled ? 'disabled' : ''}>\n              <i class=\"fas fa-arrow-down\"></i>\n            </button>\n\n            ${!isProtected ? `\n              <button class=\"btn-info edit-icon-btn\" onclick=\"startCategoryEdit(${globalIndex})\" title=\"Edytuj nazwę\">\n                <i class=\"fas fa-edit\"></i>\n              </button>\n            ` : ''}\n\n            <button class=\"btn-danger ${isProtected ? 'disabled' : ''}\"\n                    onclick=\"${!isProtected ? `removeCategory(${globalIndex})` : 'return false;'}\"\n                    ${isProtected ? 'disabled' : ''}>\n              <i class=\"fas fa-trash\"></i>\n            </button>\n          </div>\n        </div>\n      `;\n    }\n\n    list.appendChild(item);\n  });\n\n  renderCategoriesPagination();\n}\nfunction renderCategoriesPagination() {\n  const paginationContainer = document.getElementById('categoriesPagination');\n  if (!paginationContainer) return;\n  paginationContainer.innerHTML = '';\n  const totalPages = Math.ceil(categories.length / paginationConfig.categoriesPerPage);\n  const prevBtn = document.createElement('button');\n  prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevBtn.disabled = categoriesCurrentPage === 1;\n  prevBtn.addEventListener('click', () => {\n    if (categoriesCurrentPage > 1) {\n      categoriesCurrentPage--;\n      renderCategoriesList();\n    }\n  });\n  const nextBtn = document.createElement('button');\n  nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextBtn.disabled = categoriesCurrentPage === totalPages;\n  nextBtn.addEventListener('click', () => {\n    if (categoriesCurrentPage < totalPages) {\n      categoriesCurrentPage++;\n      renderCategoriesList();\n    }\n  });\n  const pageInfo = document.createElement('span');\n  pageInfo.textContent = `Strona ${categoriesCurrentPage} z ${totalPages}`;\n  paginationContainer.appendChild(prevBtn);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextBtn);\n}\nfunction openMemoryModal() {\n  const modal = document.getElementById('memoryModal');\n  if (!modal) {\n    logEvent(\"Modal pamięci nie istnieje w DOM!\");\n    return;\n  }\n  modal.classList.add('show');\n  setTimeout(() => {\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n  const memoryContent = modal.querySelector('.memory-stats');\n  if (!memoryContent) {\n    modal.innerHTML = `\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h3 class=\"modal-title\"><i class=\"fas fa-microchip\"></i> Statystyki pamięci</h3>\n          <button class=\"close-modal\" onclick=\"closeMemoryModal()\">&times;</button>\n        </div>\n        <div class=\"browser-info\">\n          Wykryta przeglądarka: <span id=\"browserInfo\">Trwa wykrywanie...</span>\n        </div>\n        <div class=\"memory-stats\">\n        </div>\n      </div>\n    `;\n  }\n  calculateMemoryUsage();\n  detectBrowserAndSetLimits();\n}\nfunction closeMemoryModal() {\n  document.getElementById('memoryModal').classList.remove('show');\n}\nfunction detectBrowserAndSetLimits() {\n  const userAgent = navigator.userAgent;\n  let browserName = \"Nieznana przeglądarka\";\n  let indexedDBMax = 10;\n  let indexedDBNote = \"\";\n  let localStorageMax = 5;\n  \n  if (/Chrome|Chromium|Edg|OPR/.test(userAgent)) {\n    browserName = \"Chromium (Chrome, Edge, Opera, Brave, Vivaldi)\";\n    indexedDBMax = 0;\n    indexedDBNote = \"IndexedDB: do 60% miejsca na dysku\";\n  } else if (/Firefox/.test(userAgent)) {\n    browserName = \"Firefox\";\n    indexedDBMax = 10240;\n    indexedDBNote = \"IndexedDB: do 10 GB w trybie best-effort\";\n  } else if (/Safari/.test(userAgent) && !/Chrome/.test(userAgent)) {\n    browserName = \"Apple Safari\";\n    indexedDBMax = navigator.maxTouchPoints ? 50 : 500;\n    indexedDBNote = navigator.maxTouchPoints ? \n      \"IndexedDB: do 50 MB (iOS)\" : \"IndexedDB: do 500 MB (desktop)\";\n  } else if (/Trident|MSIE/.test(userAgent)) {\n    browserName = \"Internet Explorer\";\n    indexedDBMax = 250;\n    indexedDBNote = \"IndexedDB: do 250 MB (możliwość zwiększenia do 1 GB)\";\n  } else {\n    browserName = \"Inna przeglądarka\";\n    indexedDBMax = 5;\n    indexedDBNote = \"IndexedDB: domyślnie do 5 MB\";\n  }\n  const setTextIfExists = (id, text) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.textContent = text;\n    } else {\n      console.warn(`Element o ID '${id}' nie istnieje`);\n    }\n  };\n\n  setTextIfExists('browserInfo', browserName);\n  setTextIfExists('localStorageMax', localStorageMax + ' MB');\n  \n  if (indexedDBMax === 0) {\n    setTextIfExists('indexedDBMax', \"60% dysku\");\n    setTextIfExists('indexedDBAvailable', \"Dynamiczne\");\n  } else {\n    setTextIfExists('indexedDBMax', indexedDBMax + ' MB');\n  }\n\n  setTextIfExists('indexedDBNote', indexedDBNote);\n}\nasync function handleFileImport(filePath) {\n    logEvent('Import pliku z Androida: ' + filePath);\n    \n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    try {\n        const fileUrl = filePath.startsWith('https://app.local/') ? filePath : ('file://' + filePath);\n        const response = await fetch(fileUrl);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const blob = await response.blob();\n        loader.update(30);\n        const file = new File([blob], 'imported_file.zip', { type: 'application/zip' });\n        await processImportFile(file);\n    } catch (fetchError) {\n        try {\n            const file = await new Promise((resolve, reject) => {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', 'file://' + filePath, true);\n                xhr.responseType = 'blob';\n                \n                xhr.onload = function() {\n                    if (xhr.status === 200) {\n                        const blob = xhr.response;\n                        const file = new File([blob], 'imported_file.zip', { type: 'application/zip' });\n                        resolve(file);\n                    } else {\n                        reject(new Error(`XHR error! status: ${xhr.status}`));\n                    }\n                };\n                \n                xhr.onerror = function() {\n                    reject(new Error('XHR network error'));\n                };\n                xhr.send();\n            });\n            loader.update(30);\n            await processImportFile(file);\n        } catch (xhrError) {\n            loader.reset();\n            showNotification('Błąd: Nie można odczytać pliku. Spróbuj ponownie wybrać plik ręcznie.', 'danger');\n            setTimeout(() => {\n                importData();\n            }, 2000);\n        }\n    }\n}\nasync function importDataFromAndroid(filePath) {\n    return await handleFileImport(filePath);\n}\nwindow.addEventListener('import-file', function(event) {\n    if (event.detail && event.detail.filePath) {\n        handleFileImport(event.detail.filePath);\n    }\n});\nwindow.addEventListener('file-import', function(event) {\n    if (event.detail && event.detail.filePath) {\n        handleFileImport(event.detail.filePath);\n    }\n});\nasync function calculateMemoryUsage() {\n  const loader = new PokeballLoader('pokeballLoader').start(0);\n  loader.update(10);\n  try {\n    const userAgent = navigator.userAgent;\n    let browserName = \"Nieznana przeglądarka\";\n    if (/Chrome|Chromium/.test(userAgent)) browserName = \"Google Chrome\";\n    else if (/Firefox/.test(userAgent)) browserName = \"Mozilla Firefox\";\n    else if (/Safari/.test(userAgent)) browserName = \"Apple Safari\";\n    else if (/Edg/.test(userAgent)) browserName = \"Microsoft Edge\";\n    else if (/OPR/.test(userAgent)) browserName = \"Opera\";\n    document.getElementById('browserInfo').textContent = browserName;\n    \n    const localStorageDetails = {\n      products: JSON.parse(localStorage.getItem('products') || '[]'),\n      categories: JSON.parse(localStorage.getItem('categories') || '[]'),\n      exchangeRates: JSON.parse(localStorage.getItem('exchangeRates') || '{}'),\n      currencySymbols: JSON.parse(localStorage.getItem('currencySymbols') || '{}'),\n      shops: JSON.parse(localStorage.getItem('shops') || '[]'),\n      effects: JSON.parse(localStorage.getItem('effects') || '[]'),\n      eventLogs: JSON.parse(localStorage.getItem('eventLogs') || '[]')\n    };\n    \n    let localStorageSize = 0;\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      const value = localStorage.getItem(key);\n      localStorageSize += (key.length + value.length) * 2;\n    }\n    \n    const localStorageMB = localStorageSize / (1024 * 1024);\n    const localStorageMax = 5;\n    const localStoragePercent = (localStorageMB / localStorageMax) * 100;\n    \n    const setTextIfExists = (elementId, text) => {\n      const element = document.getElementById(elementId);\n      if (element) element.textContent = text;\n    };\n    \n    setTextIfExists('localStorageProducts', localStorageDetails.products.length);\n    setTextIfExists('localStorageCategories', localStorageDetails.categories.length);\n    setTextIfExists('localStorageSettings', \n      Object.keys(localStorageDetails.exchangeRates).length + \n      Object.keys(localStorageDetails.currencySymbols).length);\n    setTextIfExists('localStorageShops', localStorageDetails.shops.length);\n    setTextIfExists('localStorageEffects', localStorageDetails.effects.length);\n    setTextIfExists('localStorageLogs', localStorageDetails.eventLogs.length);\n    \n    const db = await openDB();\n    const stores = ['productImages', 'galleryImages', 'backgroundImages'];\n    let productImagesCount = 0;\n    let galleryImagesCount = 0;\n    let backgroundImagesCount = 0;\n    let indexedDBImagesSize = 0;\n\n    for (const storeName of stores) {\n      const tx = db.transaction(storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      const request = store.getAll();\n      const data = await new Promise(resolve => {\n        request.onsuccess = () => resolve(request.result);\n      });\n      \n      if (storeName === 'productImages') {\n        productImagesCount = data.length;\n      } else if (storeName === 'galleryImages') {\n        galleryImagesCount = data.length;\n      } else if (storeName === 'backgroundImages') {\n        backgroundImagesCount = data.length;\n      }\n      \n      for (const item of data) {\n        if (item.source === 'github') continue;\n        \n        if (item.data && typeof item.data === 'string') {\n          try {\n            const base64Data = item.data.split(',')[1] || '';\n            const binarySize = (base64Data.length * 3) / 4;\n            indexedDBImagesSize += binarySize;\n          } catch (error) {\n            logEvent('Błąd przetwarzania danych obrazu:', error);\n          }\n        }\n      }\n    }\n\n    const indexedDBImagesMB = indexedDBImagesSize / (1024 * 1024);\n    let indexedDBMaxMB = 10;\n    if (browserName.includes('Chrome') || browserName.includes('Edge') || browserName.includes('Opera')) {\n      try {\n        const estimate = await navigator.storage.estimate();\n        indexedDBMaxMB = (estimate.quota / (1024 * 1024)) * 0.6;\n      } catch (e) {\n        logEvent(\"Błąd podczas szacowania przestrzeni dyskowej:\", e);\n        indexedDBMaxMB = 10240;\n      }\n    }\n    \n    setTextIfExists('dbProductImages', productImagesCount);\n    setTextIfExists('dbGalleryImages', galleryImagesCount);\n    setTextIfExists('dbImagesSize', indexedDBImagesMB.toFixed(2) + ' MB');\n    setTextIfExists('dbOtherData', '0.00 MB');\n    \n    const localStorageBar = document.getElementById('localStorageBar');\n    const localStorageText = document.getElementById('localStorageText');\n    if (localStorageBar && localStorageText) {\n      localStorageBar.style.width = `${Math.min(localStoragePercent, 100)}%`;\n      localStorageText.textContent = `${localStorageMB.toFixed(2)} MB / ${localStorageMax} MB`;\n    }\n    \n    const indexedDBBar = document.getElementById('indexedDBBar');\n    const indexedDBText = document.getElementById('indexedDBText');\n    \n    setTextIfExists('localStorageAvailable', (localStorageMax - localStorageMB).toFixed(2) + ' MB');\n    setTextIfExists('indexedDBAvailable', (indexedDBMaxMB - indexedDBImagesMB).toFixed(2) + ' MB');\n    setTextIfExists('indexedDBMax', indexedDBMaxMB.toFixed(2) + ' MB');\n    \n    const totalUsage = localStorageMB + indexedDBImagesMB;\n    const totalAvailable = (localStorageMax + indexedDBMaxMB - totalUsage).toFixed(2) + ' MB';\n    const totalPercentage = (totalUsage / (localStorageMax + indexedDBMaxMB)) * 100;\n    \n    setTextIfExists('totalUsage', totalUsage.toFixed(2) + ' MB');\n    setTextIfExists('availableSpace', totalAvailable);\n    setTextIfExists('totalPercentage', totalPercentage.toFixed(1) + '%');\n    \n    if (indexedDBBar && indexedDBText) {\n      const indexedDBPercent = (indexedDBImagesMB / indexedDBMaxMB) * 100;\n      indexedDBBar.style.width = `${Math.min(indexedDBPercent, 100)}%`;\n      indexedDBText.textContent = `${indexedDBImagesMB.toFixed(2)} MB / ${indexedDBMaxMB.toFixed(2)} MB`;\n    }\n    \n  } catch (error) {\n    logEvent('Błąd obliczania pamięci:', error);\n    showNotification('Błąd podczas obliczania statystyk pamięci: ' + error.message, 'danger');\n  } finally {\n    loader.reset();\n  }\n}\nfunction openCategoriesModal() {\n  if (!document.getElementById('categoriesPagination')) {\n    const paginationDiv = document.createElement('div');\n    paginationDiv.id = 'categoriesPagination';\n    paginationDiv.className = 'pagination-container';\n    document.querySelector('.category-modal-content').appendChild(paginationDiv);\n  }\n  \n  categoriesCurrentPage = 1;\n  renderCategoriesList();\n  document.getElementById('categoriesModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('categoriesModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction fillCurrencyOptions() {\n  const selects = document.querySelectorAll('.currency-select');\n  selects.forEach(select => {\n    const currentValue = select.value;\n    select.innerHTML = '';\n    \n    Object.entries(currencySymbols).forEach(([code, symbol]) => {\n      const option = document.createElement('option');\n      option.value = code;\n      option.textContent = `${code} (${symbol})`;\n      select.appendChild(option);\n    });\n    select.value = currentValue || 'PLN';\n  });\n}\nfunction closeCategoriesModal() {\n  logEvent('Modal kategorii został zamknięty');\n  document.getElementById('categoriesModal').classList.remove('show');\n}\nfunction filterByCategory() {\n  currentFilter = document.getElementById('categoryFilter').value;\n  productsCurrentPage = 1;\n  renderProducts(applyAllFilters());\n}\nasync function fetchExchangeRates() {\n    logEvent('Rozpoczęcie aktualizacji kursów walut');\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(20);\n    try {\n        const goldRate = exchangeRates.GOLD;\n        const response = await fetch('https://api.nbp.pl/api/exchangerates/tables/a/?format=json');\n        if (!response.ok) {\n            throw new Error('Błąd pobierania kursów walut');\n        }\n        const data = await response.json();\n        const rates = data[0].rates;\n        const oldRates = {...exchangeRates};\n        rates.forEach(rate => {\n            exchangeRates[rate.code] = rate.mid;\n            if (!currencySymbols[rate.code]) {\n                currencySymbols[rate.code] = rate.code;\n            }\n        });\n        exchangeRates.PLN = 1.0;\n        currencySymbols.PLN = 'zł';\n        \n        if (goldRate) {\n            exchangeRates.GOLD = goldRate;\n        }\n        exchangeRates.lastUpdated = new Date().toISOString();\n        saveExchangeRates();\n        loader.update(80);\n        let ratesChanged = false;\n        for (const currency in exchangeRates) {\n            if (currency !== 'lastUpdated' && currency !== 'GOLD' && oldRates[currency] !== exchangeRates[currency]) {\n                ratesChanged = true;\n                break;\n            }\n        }\n        if (ratesChanged) {\n            setTimeout(async () => {\n                await checkAndUpdatePriceHistoryOnRateChange();\n                if (document.getElementById('productPreviewModal').classList.contains('show') && currentChartProductId) {\n                    await renderPriceHistoryChart(currentChartProductId);\n                }\n            }, 1000);\n        }\n        if (!document.hidden) {\n            showNotification('Kursy walut zostały zaktualizowane', 'success');\n            playNotificationSound('success');\n        }\n        if (document.getElementById('exchangeModal').classList.contains('show')) {\n            updateNextUpdateTime();\n            renderExchangeRates();\n        }\n        loader.complete();\n        setTimeout(() => loader.reset(), 500);\n        return true;\n    } catch (error) {\n        loader.reset();\n        logEvent('Błąd pobierania kursów walut:', error);\n        if (!document.hidden) {\n            showNotification('Nie udało się pobrać aktualnych kursów. Używam zapisanych danych.', 'warning');\n        }\n        return false;\n    }\n}\nasync function updateAllFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    try {\n        loader.update(10);\n        await updateShopsFromGitHub();\n        loader.update(40);\n        await updateBackgroundsFromGitHub();\n\t\tloader.update(50);\n        await updateEffectsFromGitHub();\n\t\tloader.update(60);\n\t\tawait updateCategoriesFromGitHub();\n        loader.update(70);\n        await updateGalleryFromGitHub();\n\t\tloader.update(80);\n\t\tawait cleanupGalleryDuplicatesAutomatically();\n        loader.complete();\n        setTimeout(() => loader.reset(), 500);\n        showNotification('Zaktualizowano wszystkie dane', 'success');\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji: ' + error.message, 'danger');\n    }\n}\nfunction isProtectedCategory(name) {\n  if (!name) return false;\n  return PROTECTED_CATEGORY_NAMES.some(n => n.toLowerCase() === name.toLowerCase());\n}\nfunction isImageNameUnique(name) {\n    const normalizedName = name.toLowerCase().trim().replace(/\\s+/g, ' ');\n    const existingImage = galleryImages.find(img => \n        img.name.toLowerCase().trim().replace(/\\s+/g, ' ') === normalizedName\n    );\n    if (existingImage && isFromGitHub(existingImage)) {\n        return false;\n    }\n    return !existingImage;\n}\ndocument.addEventListener('visibilitychange', () => {\n\tif (document.visibilityState === 'visible') {\n\t\tcheckExchangeRates();\n\t}\n});\nasync function checkExchangeRates() {\n\tconst lastUpdated = exchangeRates.lastUpdated ? new Date(exchangeRates.lastUpdated) : null;\n\tconst now = new Date();\n\tconst hoursSinceLastUpdate = lastUpdated ? (now - lastUpdated) / (1000 * 60 * 60) : 24;\n\tif (hoursSinceLastUpdate > 1) {\n\t\tawait fetchExchangeRates();\n\t}\n}\nfunction getCurrencySymbol(currency) {\n\treturn currencySymbols[currency] || currency;\n}\nfunction formatCurrency(value, originalCurrency, showSymbol = true, section = 'default') {\n    if (value === null || value === undefined || isNaN(value)) return 'Brak';\n    let targetCurrency = originalCurrency;\n    switch(section) {\n        case 'extendedStats':\n            targetCurrency = currencyConfig.extendedStatsCurrency;\n            break;\n        case 'mainStats':\n            targetCurrency = currencyConfig.mainStatsCurrency;\n            break;\n        case 'priceDiff':\n            targetCurrency = currencyConfig.priceDiffCurrency;\n            break;\n        case 'priceHistory':\n            targetCurrency = currencyConfig.priceHistoryCurrency;\n            break;\n        case 'otherLists':\n            targetCurrency = currencyConfig.otherListsCurrency;\n            break;\n        case 'purchasePrice':\n            targetCurrency = currencyConfig.purchasePriceCurrency || 'PLN';\n            break;\n        case 'currentPrice':\n            targetCurrency = currencyConfig.currentPriceCurrency || 'PLN';\n            break;\n        case 'goldBuyback':\n            targetCurrency = currencyConfig.goldBuybackCurrency || 'PLN';\n            break;\n    }\n    let displayValue = value;\n    if (originalCurrency !== targetCurrency) {\n        try {\n            displayValue = convertToCurrency(value, originalCurrency, targetCurrency);\n        } catch (error) {\n            logEvent('Błąd konwersji waluty:', error);\n            displayValue = value;\n            targetCurrency = originalCurrency;\n        }\n    }\n    const formattedValue = parseFloat(displayValue).toFixed(2).replace('.', ',');\n    if (showSymbol) {\n        return `${formattedValue} ${getCurrencySymbol(targetCurrency)}`;\n    }\n    return formattedValue;\n}\nfunction initAdvancedButtonsSetting() {\n  const savedAdvancedButtonsVisibility = localStorage.getItem('showAdvancedButtons');\n  showAdvancedButtons = savedAdvancedButtonsVisibility !== null ? savedAdvancedButtonsVisibility === 'true' : false;\n  document.getElementById('advancedButtonsVisibilityToggle').checked = showAdvancedButtons;\n  applyAdvancedButtonsSetting();\n}\nfunction saveAdvancedButtonsSetting() {\n  localStorage.setItem('showAdvancedButtons', showAdvancedButtons);\n  applyAdvancedButtonsSetting();\n  showNotification('Ustawienia zaawansowanych przycisków zapisane', 'success');\n}\nfunction applyAdvancedButtonsSetting() {\n  const advancedButtons = document.querySelectorAll('.controls .advanced-btn');\n  advancedButtons.forEach(btn => {\n    btn.style.display = showAdvancedButtons ? 'inline-block' : 'none';\n  });\n  const sidebarAdvancedButtons = document.querySelectorAll('.sidebar-menu .advanced-btn');\n  sidebarAdvancedButtons.forEach(btn => {\n    btn.style.display = showAdvancedButtons ? 'flex' : 'none';\n  });\n  if (window.innerWidth <= 992 && !showAdvancedButtons) {\n    document.querySelector('.controls-panel').style.display = 'none';\n  }\n}\ndocument.getElementById('advancedButtonsVisibilityToggle').addEventListener('change', function() {\n  showAdvancedButtons = this.checked;\n  saveAdvancedButtonsSetting();\n});\nfunction convertToCurrency(amount, fromCurrency, toCurrency) {\n  if (fromCurrency === toCurrency) return amount;\n  if (fromCurrency !== 'PLN' && (!exchangeRates[fromCurrency] || isNaN(exchangeRates[fromCurrency]))) {\n    logEvent(`Nieznana lub nieprawidłowa waluta źródłowa: ${fromCurrency}`);\n    return amount;\n  }\n  if (toCurrency !== 'PLN' && (!exchangeRates[toCurrency] || isNaN(exchangeRates[toCurrency]))) {\n    logEvent(`Nieznana lub nieprawidłowa waluta docelowa: ${toCurrency}`);\n    return amount;\n  }\n  let amountInPLN = amount;\n  if (fromCurrency !== 'PLN') {\n    amountInPLN = amount * exchangeRates[fromCurrency];\n  }\n  if (toCurrency === 'PLN') return amountInPLN;\n  return amountInPLN / exchangeRates[toCurrency];\n}\nfunction formatDate(dateString) {\n\tconst date = new Date(dateString);\n\treturn date.toLocaleDateString('pl-PL', { day: '2-digit', month: '2-digit', year: 'numeric' });\n}\nfunction initAdditionalVisibilitySettings() {\n    const savedInstructionVisibility = localStorage.getItem('showInstructionButton');\n    const savedStatisticsVisibility = localStorage.getItem('showStatisticsSection');\n    const savedNotificationsVisibility = localStorage.getItem('showNotifications');\n    showInstructionButton = savedInstructionVisibility !== null ? savedInstructionVisibility === 'true' : true;\n    showStatisticsSection = savedStatisticsVisibility !== null ? savedStatisticsVisibility === 'true' : true;\n    showNotifications = savedNotificationsVisibility !== null ? savedNotificationsVisibility === 'true' : true;\n    document.getElementById('instructionVisibilityToggle').checked = showInstructionButton;\n    document.getElementById('statisticsVisibilityToggle').checked = showStatisticsSection;\n    document.getElementById('notificationsVisibilityToggle').checked = showNotifications;\n    applyAdditionalVisibilitySettings();\n}\nfunction applyAdditionalVisibilitySettings() {\n    const instructionButton = document.querySelector('.btn-instruction');\n    const statsContainer = document.querySelector('.stats-container');\n    if (instructionButton) {\n        instructionButton.style.display = showInstructionButton ? 'inline-block' : 'none';\n    }\n    if (statsContainer) {\n        statsContainer.style.display = showStatisticsSection ? 'block' : 'none';\n    }\n}\nfunction saveAdditionalVisibilitySettings() {\n    localStorage.setItem('showInstructionButton', showInstructionButton);\n    localStorage.setItem('showStatisticsSection', showStatisticsSection);\n    localStorage.setItem('showNotifications', showNotifications);\n    applyAdditionalVisibilitySettings();\n}\nfunction showNotification(message, type = 'info', duration = 3000) {\n    if (!showNotifications) return;\n    logEvent(`Powiadomienie [${type}]: ${message}`);\n\tconst notification = {\n\t\tmessage,\n\t\ttype,\n\t\tduration\n\t};\n\tnotificationQueue.push(notification);\n\tif (!isNotificationVisible) {\n\t\tprocessNotificationQueue();\n\t}\n}\nfunction processNotificationQueue() {\n\tif (notificationQueue.length === 0) {\n\t\tisNotificationVisible = false;\n\t\treturn;\n\t}\n\tisNotificationVisible = true;\n\tconst notification = notificationQueue.shift();\n\tcreateNotificationElement(notification);\n}\nfunction createNotificationElement(notification) {\n  const container = document.getElementById('notificationContainer');\n  if (!container) {\n    logEvent('Notification container not found!');\n    return;\n  }\n  const notificationEl = document.createElement('div');\n  notificationEl.className = `notification ${notification.type} show`;\n\tlet icon = '';\n\tswitch(notification.type) {\n\t\tcase 'success': icon = 'fa-check-circle'; break;\n\t\tcase 'warning': icon = 'fa-exclamation-triangle'; break;\n\t\tcase 'danger': icon = 'fa-times-circle'; break;\n\t\tdefault: icon = 'fa-info-circle';\n\t}\n\tnotificationEl.innerHTML = `\n\t\t<i class=\"fas ${icon}\"></i>\n\t\t<span>${notification.message}</span>\n\t\t<button class=\"close-notification\">\n\t\t\t<i class=\"fas fa-times\"></i>\n\t\t</button>\n\t\t<div class=\"notification-progress\"></div>\n\t`;\n\tconst progressBar = notificationEl.querySelector('.notification-progress');\n\tprogressBar.style.animationDuration = `${notification.duration}ms`;\n\tconst closeBtn = notificationEl.querySelector('.close-notification');\n\tcloseBtn.addEventListener('click', () => {\n\tnotificationEl.classList.remove('show');\n\tsetTimeout(() => {\n\t\tif (container.contains(notificationEl)) {\n\t\tcontainer.removeChild(notificationEl);\n\t\t}\n\t\tprocessNotificationQueue();\n\t}, 300);\n\t});\n\tcontainer.appendChild(notificationEl);\n\tsetTimeout(() => {\n\tnotificationEl.classList.remove('show');\n\tsetTimeout(() => {\n\t\tif (container.contains(notificationEl)) {\n\t\tcontainer.removeChild(notificationEl);\n\t\t}\n\t\tprocessNotificationQueue();\n\t}, 300);\n\t}, notification.duration);\n}\nasync function saveProducts() {\n  const loader = new PokeballLoader('pokeballLoader').start(0);\n  loader.update(30);\n  try {\n    const productsToSave = products.map(p => {\n      const productCopy = {...p};\n      delete productCopy.editing;\n      if (productCopy.image && !productCopy.imageId) {\n      } else if (productCopy.imageId && !productCopy.image) {\n        delete productCopy.image;\n      }\n      return productCopy;\n    });\n    \n    localStorage.setItem('products', JSON.stringify(productsToSave));\n    loader.update(50);\n    for (const product of products) {\n      if (product.image && !product.imageId) {\n        try {\n          product.imageId = await saveImageToDB(product.image, 'productImages');\n        } catch (e) {\n          logEvent('Błąd zapisu obrazu do DB:', e);\n        }\n      }\n    }\n    loader.update(70);\n    try {\n      updateSummary();\n    } catch (e) {\n      logEvent('Błąd w updateSummary:', e);\n    }\n    try {\n      renderProducts(applyAllFilters());\n    } catch (e) {\n      logEvent('Błąd w renderProducts:', e);\n    }\n    try {\n      forceUpdateStatistics();\n    } catch (e) {\n      logEvent('Błąd w forceUpdateStatistics:', e);\n    }\n    loader.complete();\n    setTimeout(() => {\n      try {\n        loader.reset();\n        const metaOnly = products.map(({ image, ...rest }) => rest);\n        localStorage.setItem('products', JSON.stringify(metaOnly));\n        try {\n          saveProductImagesToDB();\n        } catch (e) {\n          logEvent('Błąd zapisu obrazów do DB:', e);\n        }\n        try {\n          forceUpdateStatistics();\n        } catch (e) {\n          logEvent('Błąd w forceUpdateStatistics (2):', e);\n        }\n        showNotification('Dane zostały zapisane', 'success');\n\t\tplayNotificationSound('success');\n      } catch (e) {\n        logEvent('Błąd w końcowej fazie zapisu:', e);\n      }\n    }, 500);\n  } catch (e) {\n    loader.reset();\n    if (e.name === 'QuotaExceededError') {\n      const metaOnly = products.map(({ image, ...rest }) => rest);\n      localStorage.setItem('products', JSON.stringify(metaOnly));\n      try {\n        saveProductImagesToDB();\n      } catch (e) {\n        logEvent('Błąd zapisu obrazów do DB:', e);\n      }\n      try {\n        forceUpdateStatistics();\n      } catch (e) {\n        logEvent('Błąd w forceUpdateStatistics (3):', e);\n      }\n      showNotification('Dane zostały zapisane', 'success');\n\t  playNotificationSound('success');\n    } else {\n      showNotification('Błąd zapisu danych: ' + e.message, 'danger');\n    }\n  }\n  renderProducts(applyAllFilters());\n  forceUpdateStatistics();\n}\nfunction initProductNameHelp() {\n    const helpButton = document.getElementById('productNameHelpButton');\n    const helpModal = document.getElementById('productNameHelpModal');\n    if (!helpButton || !helpModal) return;\n    helpButton.addEventListener('click', function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        openProductNameHelpModal();\n    });\n    helpModal.addEventListener('click', function(e) {\n        if (e.target === helpModal) {\n            closeProductNameHelpModal();\n        }\n    });\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape' && isHelpModalOpen) {\n            closeProductNameHelpModal();\n        }\n    });\n}\nfunction openProductNameHelpModal() {\n    const helpModal = document.getElementById('productNameHelpModal');\n    if (!helpModal) return;\n    helpModal.classList.add('show');\n    isHelpModalOpen = true;\n    logEvent('Otworzono pomoc dotyczącą nazwy produktu');\n    if (window.innerWidth <= 768) {\n        document.body.style.overflow = 'hidden';\n    }\n}\nfunction closeProductNameHelpModal() {\n    const helpModal = document.getElementById('productNameHelpModal');\n    if (!helpModal) return;\n    helpModal.classList.remove('show');\n    isHelpModalOpen = false;\n    document.body.style.overflow = '';\n}\nasync function loadImageFromDB(imageId, storeName) {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const db = await openDB();\n            const tx = db.transaction(storeName, 'readonly');\n            const store = tx.objectStore(storeName);\n            const request = store.get(imageId);\n            request.onsuccess = (e) => {\n                if (e.target.result) {\n                    resolve(e.target.result.data);\n                } else {\n                    reject(`Obraz o ID ${imageId} nie znaleziony`);\n                }\n            };\n            request.onerror = (e) => {\n                reject(e.target.error || 'Unknown error');\n            };\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\nfunction saveExchangeRates() {\n    const goldRate = exchangeRates.GOLD;\n    localStorage.setItem('exchangeRates', JSON.stringify(exchangeRates));\n    localStorage.setItem('currencySymbols', JSON.stringify(currencySymbols));\n    if (goldRate) {\n        exchangeRates.GOLD = goldRate;\n    }\n}\nfunction checkEmptyState() {\n\temptyState.style.display = products.length ? 'none' : 'block';\n}\nfunction updateSummary() {\n    let purchaseValueTotalPLN = 0;\n    let currentValueTotalPLN = 0;\n    let profitPLN = 0;\n    let lossPLN = 0;\n    let withPriceCount = 0;\n    products.forEach(p => {\n        if (p.category === 'Złoto') {\n            const purchasePLN = convertToPLN(p.price, p.currency);\n            const totalPurchase = purchasePLN * p.quantity;\n            purchaseValueTotalPLN += totalPurchase;\n            \n            let currentPLN = 0;\n            if (p.currentPrice !== null && p.currentPrice !== undefined) {\n                currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency) * p.quantity;\n                withPriceCount++;\n            } else {\n                currentPLN = totalPurchase;\n            }\n            currentValueTotalPLN += currentPLN;\n            \n            const diff = currentPLN - totalPurchase;\n            if (diff > 0) {\n                profitPLN += diff;\n            } else if (diff < 0) {\n                lossPLN += Math.abs(diff);\n            }\n        } else {\n            const purchasePLN = convertToPLN(p.price, p.currency);\n            const totalPurchase = purchasePLN * p.quantity;\n            purchaseValueTotalPLN += totalPurchase;\n            \n            let currentPLN = totalPurchase;\n            if (p.currentPrice !== null && p.currentPrice !== undefined) {\n                currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency) * p.quantity;\n                withPriceCount++;\n            }\n            currentValueTotalPLN += currentPLN;\n            \n            const diff = currentPLN - totalPurchase;\n            if (diff > 0) {\n                profitPLN += diff;\n            } else if (diff < 0) {\n                lossPLN += Math.abs(diff);\n            }\n        }\n    });\n    \n    const profitPercent = purchaseValueTotalPLN > 0 ? (profitPLN / purchaseValueTotalPLN) * 100 : 0;\n    const lossPercent = purchaseValueTotalPLN > 0 ? (lossPLN / purchaseValueTotalPLN) * 100 : 0;\n    const diff = currentValueTotalPLN - purchaseValueTotalPLN;\n    \n    totalValue.textContent = formatCurrency(currentValueTotalPLN, 'PLN', true, 'mainStats');\n    purchaseValue.textContent = formatCurrency(purchaseValueTotalPLN, 'PLN', true, 'mainStats');\n    currentValue.textContent = formatCurrency(currentValueTotalPLN, 'PLN', true, 'mainStats');\n    valueDifference.textContent = formatCurrency(diff, 'PLN', true, 'mainStats');\n    valueDifference.className = diff > 0 ? 'profit' : (diff < 0 ? 'loss' : '');\n    totalProfit.textContent = formatCurrency(profitPLN, 'PLN', true, 'mainStats');\n    totalLoss.textContent = formatCurrency(lossPLN, 'PLN', true, 'mainStats');\n    profitPercentage.textContent = profitPercent.toFixed(2).replace('.', ',') + '%';\n    profitPercentage.className = profitPLN > 0 ? 'profit' : '';\n    lossPercentage.textContent = lossPercent.toFixed(2).replace('.', ',') + '%';\n    lossPercentage.className = lossPLN > 0 ? 'loss' : '';\n    productsWithPrice.textContent = withPriceCount;\n    totalProducts.textContent = products.length;\n}\nfunction searchCardmarket(productName) {\n  let sanitized = productName.replace(/[^A-Za-z0-9ĄąĆćĘęŁłŃńÓóŚśŹźŻż]/g, ' ');\n  sanitized = sanitized.replace(/\\s+/g, ' ').trim();\n  const exactSearchString = `[${sanitized}]`;\n  const formattedName = encodeURIComponent(exactSearchString)\n    .replace(/%20/g, '+')\n    .replace(/'/g, '%27');\n  const cardmarketUrl = `https://www.cardmarket.com/en/Pokemon/Products/Search?searchString=${formattedName}&mode=gallery`;\n  const newWindow = window.open(cardmarketUrl, '_blank');\n}\nfunction renderProduct(p, index, isEditing = false) {\n  const productCard = document.createElement('div');\n  productCard.className = `product ${isEditing ? 'editing' : ''} ${selectionMode ? 'select-mode' : ''}`;\n  const originalIndex = products.findIndex(prod => prod.id === p.id);\n  const isSelected = selectedProducts.includes(originalIndex);\n\n  const excludedPriceTrendCategories = ['Złoto', 'Inne', 'Akcesoria'];\n  const excludedCardmarketCategories = ['Inne', 'Akcesoria'];\n  \n  const showPriceTrend = !excludedPriceTrendCategories.includes(p.category);\n  const showCardmarket = !excludedCardmarketCategories.includes(p.category);\n\n  if (isEditing) {\n    const showEffectField = p.category === 'Singles';\n    const showConditionField = p.category === 'Singles';\n    const showLanguageField = !['Złoto', 'Akcesoria', 'Inne'].includes(p.category);\n    const showCurrentPriceField = p.category !== 'Złoto';\n    let effectField = '';\n    let conditionField = '';\n    let languageField = '';\n    if (showEffectField) {\n      effectField = `\n        <div style=\"margin-top: 0.2rem; display: block;\" class=\"dynamic-field effect-field\">\n          <label for=\"editEffect-${index}\">Efekt</label>\n          <select id=\"editEffect-${index}\" class=\"edit-effect\">\n            <option value=\"\">Wybierz efekt</option>\n            ${effects.map(e => `<option value=\"${e}\" ${p.effect === e ? 'selected' : ''}>${e}</option>`).join('')}\n          </select>\n        </div>\n      `;\n    }\n\n    if (showConditionField) {\n      conditionField = `\n        <div style=\"margin-top: 0.2rem; display: block;\" class=\"dynamic-field condition-field\">\n          <label>Stan karty *</label>\n          <select class=\"edit-condition\" required>\n            <option value=\"\">Wybierz stan karty</option>\n            ${CARD_CONDITIONS.map(condition => `<option value=\"${condition}\" ${p.condition === condition ? 'selected' : ''}>${condition}</option>`).join('')}\n          </select>\n        </div>\n      `;\n    }\n\n    if (showLanguageField) {\n      languageField = `\n        <div style=\"margin-top: 0.2rem; display: block;\" class=\"dynamic-field language-field\">\n          <label>Język *</label>\n          <select class=\"edit-language\" required>\n            <option value=\"\">Wybierz język</option>\n            ${LANGUAGES.map(lang => `<option value=\"${lang}\" ${p.language === lang ? 'selected' : ''}>${lang}</option>`).join('')}\n          </select>\n        </div>\n      `;\n    }\n\n    const currentPriceBlock = showCurrentPriceField ? `\n      <div style=\"margin-top: 0.2rem;\">\n        <label>Aktualna cena za jedną sztukę</label>\n        <div class=\"currency-group\">\n          <div class=\"price-input-wrapper\">\n            <input type=\"number\" step=\"0.01\" class=\"edit-currentPrice\" value=\"${p.currentPrice || ''}\" placeholder=\"Aktualna cena\">\n          </div>\n          <select class=\"edit-currentCurrency\">\n            ${Object.entries(currencySymbols)\n              .map(([code, symbol]) => `<option value=\"${code}\" ${(p.currentCurrency || p.currency) === code ? 'selected' : ''}>${code} (${symbol})</option>`)\n              .join('')}\n          </select>\n        </div>\n      </div>\n    ` : `\n      <div style=\"margin-top: 0.2rem;\">\n        <label>Aktualna cena za 1 gram (automatycznie z NBP)</label>\n        <div class=\"currency-group\">\n          <input type=\"text\" class=\"edit-currentPrice\" value=\"${(p.currentPrice !== null && p.currentPrice !== undefined) ? (typeof p.currentPrice === 'number' ? p.currentPrice.toFixed(2).replace('.', ',') + ' zł/g' : p.currentPrice) : 'Brak danych'}\" readonly>\n        </div>\n      </div>\n    `;\n\n    productCard.innerHTML = `\n      <div class=\"product-content\">\n        <h3>Edytujesz: ${p.name}</h3>\n        <div class=\"inline-edit\">\n          <input type=\"text\" class=\"edit-name\" value=\"${p.name}\" placeholder=\"Nazwa *\" required>\n          <div style=\"margin-top: 0.2rem;\">\n            <label>Kategoria *</label>\n            <select class=\"edit-category\" id=\"editCategory-${index}\" required>\n              ${categories.map(c => `<option value=\"${c.name}\" ${p.category === c.name ? 'selected' : ''}>${c.name}</option>`).join('')}\n            </select>\n          </div>\n          ${effectField}\n          ${conditionField}\n          ${languageField}\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-top: 0.2rem;\">\n            <div>\n              <label class=\"quantity-label\">${p.category === 'Złoto' ? 'Ilość (gram) *' : 'Ilość *'}</label>\n              <input type=\"number\" class=\"edit-quantity\" value=\"${p.quantity}\" placeholder=\"${p.category === 'Złoto' ? 'Ilość (gram)' : 'Ilość'}\" required min=\"1\">\n            </div>\n            <div>\n              <label>Rok zakupu *</label>\n              <input type=\"number\" class=\"edit-year\" value=\"${p.year}\" placeholder=\"Rok zakupu\" required min=\"2000\" max=\"${new Date().getFullYear() + 1}\">\n            </div>\n          </div>\n          <div style=\"margin-top: 0.2rem;\">\n            <label>${p.category === 'Złoto' ? 'Cena zakupu za 1 gram *' : 'Cena zakupu jednej sztuki *'}</label>\n            <div class=\"currency-group\">\n              <div class=\"price-input-wrapper\">\n                <input type=\"number\" step=\"0.01\" class=\"edit-price\" value=\"${p.price}\" placeholder=\"${p.category === 'Złoto' ? 'Cena zakupu za gram' : 'Cena zakupu'}\" required min=\"0.01\">\n              </div>\n              <select class=\"edit-currency\" required>\n                ${Object.entries(currencySymbols)\n                  .map(([code, symbol]) => `<option value=\"${code}\" ${p.currency === code ? 'selected' : ''}>${code} (${symbol})</option>`)\n                  .join('')}\n              </select>\n            </div>\n          </div>\n          ${currentPriceBlock}\n          <div style=\"margin-top: 0.3rem;\">\n            <label>Zdjęcie produktu</label>\n            <div style=\"display: flex; flex-direction: column; gap: 0.5rem; margin-top: 0.2rem;\">\n              <div class=\"import-btn-wrapper\" style=\"flex: 1;\">\n                <button class=\"custom-file-btn btn-info\">\n                  <i class=\"fas fa-file-image\"></i> Wybierz plik z dysku\n                </button>\n                <input type=\"file\" class=\"edit-image\" accept=\"image/*\" onchange=\"showEditImagePreview(this, ${index})\">\n              </div>\n              <button type=\"button\" class=\"btn-info\" onclick=\"openGalleryForEdit(${index})\" style=\"flex: 1;\">\n                <i class=\"fas fa-images\"></i> Załaduj z galerii\n              </button>\n            </div>\n            <div class=\"image-preview-container\" id=\"editImagePreview-${index}\" style=\"${p.image ? '' : 'display: none;'}\">\n              <div class=\"image-preview\" onclick=\"openEditImagePreview(${index})\">\n                <img src=\"${p.image || ''}\" alt=\"Podgląd obrazu\">\n              </div>\n              <span>Kliknij miniaturkę, aby zobaczyć podgląd</span>\n            </div>\n          </div>\n          <div class=\"buttons\" style=\"margin-top: 0.5rem;\">\n            <button class=\"btn-success\" onclick=\"saveInline('${p.id}')\"><i class=\"fas fa-save\"></i> Zapisz</button>\n            <button class=\"btn-danger\" onclick=\"cancelInline('${p.id}')\"><i class=\"fas fa-times\"></i> Anuluj</button>\n          </div>\n          <div style=\"margin-top: 0.5rem; font-size: 0.8rem; color: #666;\">\n            * Pole wymagane\n          </div>\n        </div>\n      </div>\n    `;\n\n    const editCat = productCard.querySelector(`#editCategory-${index}`);\n    if (editCat) {\n      editCat.addEventListener('change', function() {\n        updateEditFormFields(this.value, productCard, index);\n      });\n    }\n\n  } else {\n    const categoryObj = categories.find(cat => cat.name.toLowerCase() === (p.category || '').toLowerCase()) || { bg: '#ededed', text: '#333' };\n\n    let warningIcon = '';\n    if (p.currentPrice != null && isPriceOutdated(p)) {\n      warningIcon = `\n        <span class=\"price-warning\" title=\"Należy zaktualizować aktualną cenę\">\n          <i class=\"fas fa-exclamation-triangle blink-icon\"></i>\n        </span>\n      `;\n    }\n\n    let goldStar = '';\n    if (p.currentPrice != null && p.currentPrice !== undefined) {\n      try {\n        const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n        const totalValue = currentPLN * p.quantity;\n        if (totalValue > 5000) {\n          goldStar = `\n            <span class=\"gold-star\" title=\"Wartość produktu przekroczyła kwotę 5000zł.\">\n              <i class=\"fas fa-star\"></i>\n            </span>\n          `;\n        }\n      } catch (e) {\n        logEvent('Błąd obliczania wartości produktu:', e);\n      }\n    }\n\n\tlet priceTrendHtml = '';\n\tif (showPriceTrend && priceTrendAllow) {\n\tpriceTrendHtml = `\n\t\t<div class=\"detail-item\">\n\t\t<span class=\"detail-label\">Price Trend (Cardmarket):</span>\n\t\t<span class=\"detail-value\">\n\t\t\t<div class=\"cardmarket-trend\" id=\"trend-${p.id}\">\n\t\t\t<div class=\"loading-trend\">Ładowanie...</div>\n\t\t\t</div>\n\t\t</span>\n\t\t</div>\n\t`;\n\t} else if (showPriceTrend && !priceTrendAllow) {\n\tpriceTrendHtml = `\n\t\t<div class=\"detail-item\">\n\t\t<span class=\"detail-label\">Price Trend (Cardmarket):</span>\n\t\t<span class=\"detail-value\">\n\t\t\t<div class=\"cardmarket-trend\">\n\t\t\t<span class=\"no-data\">Niedostępne</span>\n\t\t\t</div>\n\t\t</span>\n\t\t</div>\n\t`;\n\t}\n\n    let priceDiffHtml = '';\n    if (p.currentPrice != null && p.currentPrice !== undefined) {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n      const diff = (currentPLN - purchasePLN) * p.quantity;\n      const diffPercent = purchasePLN > 0 ? ((currentPLN - purchasePLN) / purchasePLN) * 100 : 0;\n      const diffClass = diff > 0 ? 'positive' : (diff < 0 ? 'negative' : 'neutral');\n      const diffSign = diff > 0 ? '+' : '';\n\n      const sameCurrency = p.currency === (p.currentCurrency || p.currency);\n      let profitInCurrency = '';\n      \n      if (sameCurrency) {\n        const profitVal = (p.currentPrice - p.price) * p.quantity;\n        profitInCurrency = formatCurrency(Math.abs(profitVal), p.currency, false, 'priceDiff');\n      }\n\n      priceDiffHtml = `\n        <div class=\"price-difference ${diffClass}\">\n          ${sameCurrency ? `\n            <div>${diffSign}${profitInCurrency} ${getCurrencySymbol(p.currency)}</div>\n            <div>(${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')})</div>\n          ` : `\n            <div>${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')}</div>\n          `}\n          <div>${diffSign}${Math.abs(diffPercent).toFixed(2).replace('.', ',')}%</div>\n        </div>\n      `;\n    }\n\n    let imageHtml;\n    const productImage = loadProductImage(p);\n    if (productImage) {\n      imageHtml = `<img src=\"${productImage}\" alt=\"${p.name}\">`;\n    } else if (p.imageId) {\n      imageHtml = `<img src=\"\" data-image-id=\"${p.imageId}\" alt=\"${p.name}\">`;\n    } else {\n      imageHtml = `<i class=\"fas fa-box-open\" style=\"font-size: 3rem; color: #b0bec5;\"></i>`;\n    }\n\n    const currentPriceDisplay = p.category === 'Złoto' ?\n      (p.currentPrice !== null && p.currentPrice !== undefined ?\n        `${formatCurrency(p.currentPrice, 'PLN', true, 'otherLists')}/g` :\n        'Brak danych') :\n      (p.currentPrice !== null && p.currentPrice !== undefined ?\n        formatCurrency(p.currentPrice, p.currentCurrency || p.currency, true, 'otherLists') :\n        'Brak');\n\n    const purchasePriceDisplay = formatCurrency(p.price, p.currency, true, 'otherLists') + (p.category === 'Złoto' ? '/g' : '');\n\n    const cardmarketButton = showCardmarket ? \n      `<button class=\"btn-cardmarket\" style=\"position: absolute; top: 5px; left: 10px; z-index: 2; max-width: 32%;\"> \n        <i class=\"fas fa-search\"></i> cardmarket\n      </button>` : '';\n\n    const conditionBadge = (p.category === 'Singles' && p.condition) ? \n      `<div class=\"card-condition\" style=\"margin-top: 5px; font-size: 0.9em; color: #666; text-align: center; display: block; width: 100%;\">Stan: ${p.condition}</div>` : '';\n\n    const languageBadge = (!['Złoto', 'Akcesoria', 'Inne'].includes(p.category) && p.language) ? \n      `<div class=\"language-badge\" style=\"position: absolute; top: 5px; right: 10px; z-index: 2; background: rgba(0,0,0,0.6); color: white; padding: 2px 6px; border-radius: 10px; font-size: 0.8em;\">\n        ${p.language}\n      </div>` : '';\n\n    productCard.innerHTML = `\n      ${selectionMode ? `<input type=\"checkbox\" class=\"product-checkbox\" ${isSelected ? 'checked' : ''} onchange=\"toggleProductSelection(${originalIndex}, this.checked)\">` : ''}\n      <div class=\"product-image\" style=\"position: relative;\">\n        ${cardmarketButton}\n        ${languageBadge}\n        ${goldStar}\n        ${imageHtml}\n      </div>\n      <div class=\"product-content\">\n        <div class=\"category-tag\" style=\"background:${categoryObj.bg}; color:${categoryObj.text}\">${p.category}</div>\n        <h3>${p.name}</h3>\n        ${conditionBadge}\n        <div class=\"product-details\">\n          <div class=\"detail-item\"><span class=\"detail-label\">${p.category === 'Złoto' ? 'Ilość (gram)' : 'Ilość'}</span><span class=\"detail-value\">${p.quantity}</span></div>\n          <div class=\"detail-item\"><span class=\"detail-label\">${p.category === 'Złoto' ? 'Cena zakupu za 1 gram' : 'Cena zakupu jednej sztuki'}</span><span class=\"detail-value\">${purchasePriceDisplay}</span></div>\n          <div class=\"detail-item\"><span class=\"detail-label\">Rok zakupu</span><span class=\"detail-value\">${p.year}</span></div>\n          <div class=\"detail-item\"><span class=\"detail-label\">Data dodania</span><span class=\"detail-value\">${formatDate(p.dateAdded)}</span></div>\n          <div class=\"detail-item\">\n            <span class=\"detail-label\">${p.category === 'Złoto' ? 'Aktualna cena za 1 gram' : 'Aktualna cena za jedną sztukę'}</span>\n            <span class=\"detail-value\">\n              ${currentPriceDisplay}\n              ${warningIcon}\n            </span>\n          </div>\n          ${priceTrendHtml}\n        </div>\n        ${priceDiffHtml}\n        <div class=\"button-group\" style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 10px; min-height: 40px;\">\n          <button class=\"delete-btn btn-danger\" onclick=\"deleteProduct('${p.id}')\"><i class=\"fas fa-trash-alt\"></i> Usuń</button>\n          <button class=\"edit-btn btn-info\" onclick=\"startInline('${p.id}')\"><i class=\"fas fa-edit\"></i> Edytuj</button>\n        </div>\n      </div>\n    `;\n\n    const imgContainer = productCard.querySelector('.product-image');\n    if (imgContainer) {\n      imgContainer.addEventListener('click', () => {\n        const originalIndex = products.findIndex(prod => prod.id === p.id);\n        openProductPreview(originalIndex);\n      });\n\n      if (showCardmarket) {\n        const btn = imgContainer.querySelector('.btn-cardmarket');\n        if (btn) {\n          if (p.category === 'Złoto') {\n            btn.innerHTML = '<i class=\"fas fa-search\"></i> Mennica Polska';\n            btn.addEventListener('click', e => {\n              e.stopPropagation();\n              window.open('https://www.mennica.com.pl/produkty-inwestycyjne/analiza-rynku-zlota', '_blank');\n            });\n          } else {\n            btn.addEventListener('click', e => {\n              e.stopPropagation();\n              searchCardmarket(p.name);\n            });\n          }\n        }\n      }\n\n      const imgEl = imgContainer.querySelector('img[data-image-id]');\n      if (imgEl) {\n        loadImageFromDB(p.imageId, 'productImages')\n          .then(dataUrl => { imgEl.src = dataUrl; })\n          .catch(() => {\n            const x = document.createElement('i');\n            x.className = 'fas fa-times-circle';\n            x.style.cssText = 'font-size: 3rem; color: #ff6f00;';\n            imgEl.replaceWith(x);\n          });\n      }\n    }\n\n    if (showPriceTrend) {\n      setTimeout(async () => {\n        try {\n          const trend = await fetchCardmarketPriceTrend(p.name);\n          const trendElement = document.getElementById(`trend-${p.id}`);\n          if (trendElement) {\n            if (trend) {\n              trendElement.innerHTML = `<span class=\"price-trend-value\">${trend}</span>`;\n            } else {\n              trendElement.innerHTML = '<span class=\"no-data\">Brak danych</span>';\n            }\n          }\n        } catch (error) {\n          logEvent('Błąd pobierania Price Trend:', error);\n          const trendElement = document.getElementById(`trend-${p.id}`);\n          if (trendElement) {\n            trendElement.innerHTML = '<span class=\"no-data\">Błąd pobierania</span>';\n          }\n        }\n      }, 1000);\n    }\n  }\n\n  productCard.dataset.id = p.id;\n  return productCard;\n}\nasync function addDailyPricePoints() {\n    const today = new Date().toISOString().split('T')[0];\n    const lastUpdate = localStorage.getItem('lastPriceHistoryUpdate') || '';\n    \n    if (lastUpdate !== today) {\n        const loader = new PokeballLoader('pokeballLoader').start(0);\n        loader.update(10);\n        try {\n            const goldPrice = await fetchGoldPrice();\n            \n            loader.update(40);\n            \n            for (const product of products) {\n                if (product.category === 'Złoto') {\n                    if (goldPrice !== null) {\n                        product.currentPrice = goldPrice;\n                        product.currentCurrency = 'PLN';\n                        product.lastPriceUpdate = new Date().toISOString();\n\n                        const history = await priceHistory.getPriceHistory(product.id);\n                        const lastEntry = history.length > 0 ? history[history.length - 1] : null;\n                        const shouldAdd = !lastEntry || \n                            !(new Date(lastEntry.date).toISOString().split('T')[0] === today && \n                            lastEntry.price === goldPrice && \n                            lastEntry.currency === 'PLN');\n\n                        if (shouldAdd) {\n                            await priceHistory.addPricePoint(\n                                product.id,\n                                goldPrice,\n                                'PLN'\n                            );\n                        }\n                    }\n                } else if (product.currentPrice !== null && product.currentPrice !== undefined) {\n                    const history = await priceHistory.getPriceHistory(product.id);\n                    const lastEntry = history.length > 0 ? history[history.length - 1] : null;\n                    const shouldAdd = !lastEntry || \n                        !(new Date(lastEntry.date).toISOString().split('T')[0] === today && \n                        lastEntry.price === product.currentPrice && \n                        lastEntry.currency === (product.currentCurrency || product.currency));\n\n                    if (shouldAdd) {\n                        await priceHistory.addPricePoint(\n                            product.id,\n                            product.currentPrice,\n                            product.currentCurrency || product.currency\n                        );\n                    }\n                }\n            }\n            \n            localStorage.setItem('lastPriceHistoryUpdate', today);\n            loader.update(80);\n            await saveProducts();\n            loader.complete();\n            setTimeout(() => loader.reset(), 500);\n        } catch (error) {\n            loader.reset();\n            logEvent('Błąd dodawania dziennych punktów cenowych:', error);\n        }\n    }\n}\nfunction openCurrencyConfigModal() {\n  fillCurrencyOptions();\n  document.getElementById('extendedStatsCurrency').value = currencyConfig.extendedStatsCurrency;\n  document.getElementById('mainStatsCurrency').value = currencyConfig.mainStatsCurrency;\n  document.getElementById('priceDiffCurrency').value = currencyConfig.priceDiffCurrency;\n  document.getElementById('priceHistoryCurrency').value = currencyConfig.priceHistoryCurrency;\n  document.getElementById('otherListsCurrency').value = currencyConfig.otherListsCurrency;\n  document.getElementById('purchasePriceCurrency').value = currencyConfig.purchasePriceCurrency || 'PLN';\n  document.getElementById('currentPriceCurrency').value = currencyConfig.currentPriceCurrency || 'PLN';\n  document.getElementById('currencyConfigModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('currencyConfigModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction closeCurrencyConfigModal() {\n  document.getElementById('currencyConfigModal').classList.remove('show');\n}\nfunction openAddNewProductModal() {\n    populateConditionAndLanguageSelects();\n    fillEffectSelect();\n    updateCategorySelects();\n    document.getElementById('productForm').reset();\n    document.getElementById('currency').value = 'PLN';\n    document.getElementById('currentCurrency').value = 'PLN';\n    document.getElementById('imagePreview').style.display = 'none';\n    \n    resetMainFormValidation();\n    \n    updateMainFormFields();\n    \n    document.getElementById('addnewproductmodal').classList.add('show');\n}\nfunction closeAddNewProductModal() {\n  document.getElementById('addnewproductmodal').classList.remove('show');\n}\nfunction saveCurrencyConfig() {\n    currencyConfig.extendedStatsCurrency = document.getElementById('extendedStatsCurrency').value;\n    currencyConfig.mainStatsCurrency = document.getElementById('mainStatsCurrency').value;\n    currencyConfig.priceDiffCurrency = document.getElementById('priceDiffCurrency').value;\n    currencyConfig.priceHistoryCurrency = document.getElementById('priceHistoryCurrency').value;\n    currencyConfig.otherListsCurrency = document.getElementById('otherListsCurrency').value;\n    currencyConfig.purchasePriceCurrency = document.getElementById('purchasePriceCurrency').value;\n    currencyConfig.currentPriceCurrency = document.getElementById('currentPriceCurrency').value;\n    currencyConfig.goldBuybackCurrency = document.getElementById('goldBuybackCurrency')?.value || 'PLN';\n    \n    localStorage.setItem('currencyConfig', JSON.stringify(currencyConfig));\n    \n    updateSummary();\n    renderProducts(applyAllFilters());\n    \n    if (document.getElementById('statsModal').classList.contains('show')) {\n        showExtendedStats();\n    }\n    \n    if (document.getElementById('productPreviewModal').classList.contains('show') && currentChartProductId) {\n        renderPriceHistoryChart(currentChartProductId);\n    }\n    \n    logEvent('Zaktualizowano konfigurację walut');\n    showNotification('Konfiguracja walut zapisana', 'success');\n    playNotificationSound('success');\n    closeCurrencyConfigModal();\n}\nfunction renderProducts(list = applyAllFilters()) {\n  productList.innerHTML = '';\n  currentDisplayedProducts = list;\n  \n  const totalPages = Math.ceil(list.length / paginationConfig.productsPerPage);\n  productsCurrentPage = Math.min(productsCurrentPage, totalPages);\n  \n  const startIndex = (productsCurrentPage - 1) * paginationConfig.productsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.productsPerPage, list.length);\n  const currentPageProducts = list.slice(startIndex, endIndex);\n  \n  if (currentPageProducts.length === 0) {\n    emptyState.style.display = 'block';\n    renderProductsPagination(totalPages);\n    return;\n  }\n  \n  emptyState.style.display = 'none';\n  \n  currentPageProducts.forEach((p, i) => {\n    const card = renderProduct(p, i, p.editing);\n    productList.appendChild(card);\n    \n    const imgContainer = card.querySelector('.product-image');\n    if (imgContainer) {\n      imgContainer.addEventListener('click', () => {\n        const originalIndex = products.findIndex(prod => prod.id === p.id);\n        openProductPreview(originalIndex);\n      });\n      \n      const btn = imgContainer.querySelector('.btn-cardmarket');\n      if (btn) {\n        if (p.category === 'Złoto') {\n          btn.innerHTML = '<i class=\"fas fa-search\"></i> Mennica Polska';\n          btn.addEventListener('click', e => {\n            e.stopPropagation();\n            window.open('https://www.mennica.com.pl/produkty-inwestycyjne/analiza-rynku-zlota', '_blank');\n          });\n        } else {\n          btn.addEventListener('click', e => {\n            e.stopPropagation();\n            searchCardmarket(p.name);\n          });\n        }\n      }\n    }\n    const imgEl = card.querySelector('img[data-image-id]');\n    if (imgEl) {\n      loadImageFromDB(p.imageId, 'productImages')\n        .then(dataUrl => { imgEl.src = dataUrl; })\n        .catch(() => {\n          const x = document.createElement('i');\n          x.className = 'fas fa-times-circle';\n          x.style.cssText = 'font-size: 3rem; color: #ff6f00;';\n          imgEl.replaceWith(x);\n        });\n    }\n\n    if (p.category !== 'Złoto') {\n      setTimeout(() => updateProductPriceTrend(p.id, p.name), 500 * (i + 1));\n    }\n  });\n  renderProductsPagination(totalPages);\n  addPaginationInfo();\n  setTimeout(initLazyLoading, 100);\n}\nasync function updateProductPriceTrend(productId, productName, retryCount = 0) {\n  if (!priceTrendAllow) {\n    const trendElement = document.getElementById(`trend-${productId}`);\n    if (trendElement) {\n      trendElement.innerHTML = '<span class=\"no-data\">Niedostępne</span>';\n    }\n    return;\n  }\n  const maxRetries = 2;\n  const retryDelay = 5000;\n\n  try {\n    const trend = await fetchCardmarketPriceTrend(productName);\n    const trendElement = document.getElementById(`trend-${productId}`);\n    \n    if (!trendElement) return;\n\n    if (trend) {\n      trendElement.innerHTML = `<span class=\"price-trend-value\">${trend}</span>`;\n    } else {\n      if (retryCount < maxRetries) {\n        trendElement.innerHTML = `<div class=\"loading-trend\">Ponawianie... (${retryCount + 1}/${maxRetries})</div>`;\n        setTimeout(() => {\n          updateProductPriceTrend(productId, productName, retryCount + 1);\n        }, retryDelay);\n      } else {\n        trendElement.innerHTML = '<span class=\"no-data\">Brak danych po wielu próbach</span>';\n      }\n    }\n  } catch (error) {\n    logEvent('Błąd aktualizacji Price Trend:', error);\n    const trendElement = document.getElementById(`trend-${productId}`);\n    \n    if (trendElement) {\n      if (retryCount < maxRetries) {\n        trendElement.innerHTML = `<div class=\"loading-trend\">Błąd, ponawianie... (${retryCount + 1}/${maxRetries})</div>`;\n        setTimeout(() => {\n          updateProductPriceTrend(productId, productName, retryCount + 1);\n        }, retryDelay);\n      } else {\n        trendElement.innerHTML = '<span class=\"no-data\">Błąd pobierania</span>';\n      }\n    }\n  }\n}\nfunction renderProductsPagination(totalPages) {\n  let paginationContainer = document.getElementById('productsPagination');\n  if (!paginationContainer) {\n    paginationContainer = document.createElement('div');\n    paginationContainer.id = 'productsPagination';\n    paginationContainer.className = 'pagination-container';\n    productList.parentNode.insertBefore(paginationContainer, productList.nextSibling);\n  }\n  paginationContainer.innerHTML = '';\n  if (totalPages <= 1) {\n    paginationContainer.style.display = 'none';\n    return;\n  }\n  paginationContainer.style.display = 'flex';\n  const prevBtn = document.createElement('button');\n  prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevBtn.disabled = productsCurrentPage === 1;\n  prevBtn.addEventListener('click', () => {\n    if (productsCurrentPage > 1) {\n      productsCurrentPage--;\n      renderProducts(applyAllFilters());\n    }\n  });\n  \n  const nextBtn = document.createElement('button');\n  nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextBtn.disabled = productsCurrentPage === totalPages;\n  nextBtn.addEventListener('click', () => {\n    if (productsCurrentPage < totalPages) {\n      productsCurrentPage++;\n      renderProducts(applyAllFilters());\n    }\n  });\n  const pageInfo = document.createElement('span');\n  pageInfo.className = 'page-info';\n  pageInfo.textContent = `Strona ${productsCurrentPage} z ${totalPages}`;\n  paginationContainer.appendChild(prevBtn);\n  paginationContainer.appendChild(pageInfo);\n  paginationContainer.appendChild(nextBtn);\n}\nasync function deleteProduct(productId) {\n  const globalIndex = products.findIndex(p => p.id === productId);\n  if (globalIndex === -1) return;\n  const p = products[globalIndex];\n  logEvent('Naciśnięto przycisk usunięcia dla produktu: ' + p.name);\n  showConfirmation(\n    'Potwierdzenie usunięcia',\n    `Czy na pewno chcesz usunąć produkt \"${p.name}\"?`,\n    async (confirmed) => {\n      if (!confirmed) return;\n      logEvent('Potwierdzono usunięcie produktu: ' + p.name);\n      const productElement = document.querySelector(`.product[data-id=\"${productId}\"]`);\n      if (productElement) {\n        productElement.style.transform = 'scale(0.9)';\n        productElement.style.opacity = '0';\n        setTimeout(async () => {\n          if (document.body.contains(productElement)) {\n            productElement.remove();\n          }\n          products.splice(globalIndex, 1);\n          await saveProducts();\n          forceUpdateStatistics();\n          const totalPages = Math.ceil(products.length / paginationConfig.productsPerPage);\n          if (productsCurrentPage > totalPages && totalPages > 0) {\n            productsCurrentPage = totalPages;\n          }\n          renderProducts(applyAllFilters());\n          showNotification('Produkt ' + p.name + ' został usunięty', 'success');\n          playNotificationSound('success');\n        }, 300);\n      } else {\n        products.splice(globalIndex, 1);\n        await saveProducts();\n        forceUpdateStatistics();\n        const totalPages = Math.ceil(products.length / paginationConfig.productsPerPage);\n        if (productsCurrentPage > totalPages && totalPages > 0) {\n          productsCurrentPage = totalPages;\n        }\n        renderProducts(applyAllFilters());\n      }\n    }\n  );\n}\nfunction updateProductInDOM(productId, isEditing) {\n  const productIndex = products.findIndex(p => p.id === productId);\n  if (productIndex === -1) return;\n  \n  const p = products[productIndex];\n  const productElement = document.querySelector(`.product[data-id=\"${productId}\"]`);\n  \n  if (productElement) {\n    const newElement = renderProduct(p, productIndex, isEditing);\n    productElement.replaceWith(newElement);\n  }\n}\nfunction startInline(productId) {\n  const globalIndex = products.findIndex(p => p.id === productId);\n  if (globalIndex === -1) return;\n  \n  logEvent(`Rozpoczęto edycję produktu: ${products[globalIndex].name}`);\n  \n  products.forEach(p => p.editing = false);\n  \n  products[globalIndex].editing = true;\n  \n  updateProductInDOM(productId, true);\n  setTimeout(() => {\n    const card = document.querySelector(`.product[data-id=\"${productId}\"]`);\n    if (card) {\n      const categorySelect = card.querySelector('.edit-category');\n      if (categorySelect) {\n        categorySelect.addEventListener('change', function() {\n          updateFormFieldsBasedOnCategory(this.value, card);\n        });\n      }\n    }\n  }, 100);\n}\n\nfunction updateFormFieldsBasedOnCategory(category, card) {\n  const effectField = card.querySelector('.edit-effect')?.closest('div');\n  const conditionField = card.querySelector('.edit-condition')?.closest('div');\n  const languageField = card.querySelector('.edit-language')?.closest('div');\n  const currentPriceGroup = card.querySelector('.edit-currentPrice')?.closest('div');\n  const quantityLabel = card.querySelector('.quantity-label');\n  const priceLabel = card.querySelector('.currency-group')?.previousElementSibling;\n  \n  if (effectField) effectField.style.display = 'none';\n  if (conditionField) conditionField.style.display = 'none';\n  if (languageField) languageField.style.display = 'none';\n  if (currentPriceGroup) currentPriceGroup.style.display = 'block';\n  \n  if (category === 'Singles') {\n    if (effectField) effectField.style.display = 'block';\n    if (conditionField) conditionField.style.display = 'block';\n  }\n  \n  if (!['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n    if (languageField) languageField.style.display = 'block';\n  }\n  \n  if (category === 'Złoto') {\n    if (currentPriceGroup) currentPriceGroup.style.display = 'none';\n    if (quantityLabel) quantityLabel.textContent = 'Ilość (gram)';\n    if (priceLabel) priceLabel.textContent = 'Cena zakupu za 1 gram';\n  } else {\n    if (quantityLabel) quantityLabel.textContent = 'Ilość';\n    if (priceLabel) priceLabel.textContent = 'Cena zakupu jednej sztuki';\n  }\n}\ndocument.getElementById('backgroundUploadBtn').addEventListener('click', toggleBackgroundUploadPanel);\ndocument.getElementById('backgroundSelectBtn').addEventListener('click', toggleBackgroundSelectionMode);\ndocument.getElementById('backgroundSelectionControls').querySelector('.btn-danger').addEventListener('click', deleteSelectedBackgrounds);\ndocument.getElementById('backgroundSelectionControls').querySelector('.btn-info').addEventListener('click', cancelBackgroundSelection);\nfunction cancelInline(productId) {\n  const globalIndex = products.findIndex(p => p.id === productId);\n  if (globalIndex !== -1) {\n    logEvent(`Anulowano edycję produktu: ${products[globalIndex].name}`);\n    \n    products[globalIndex].editing = false;\n    \n    saveProducts();\n    \n    updateProductInDOM(productId, false);\n  }\n}\nfunction resetMainFormValidation() {\n  const fields = ['name', 'category', 'quantity', 'price', 'year', 'currency', 'condition', 'language', 'currentPrice', 'currentCurrency'];\n  fields.forEach(fieldId => {\n    const field = document.getElementById(fieldId);\n    if (field) {\n      field.style.borderColor = '';\n      field.style.boxShadow = '';\n      field.style.backgroundColor = '';\n      field.classList.remove('validation-error');\n    }\n  });\n}\nasync function showEditImagePreview(input, index) {\n    if (!input.files || !input.files[0]) return;\n    const file = input.files[0];\n    const fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n    if (!isImageNameUnique(fileName)) {\n        showNotification('Zdjęcie o takiej nazwie już istnieje i nie zostanie dodane do galeri, ani jako miniaturka do produktu', 'warning');\n        input.value = '';\n        selectedImageUrl = null;\n        document.getElementById('previewImg').src = '';\n        document.getElementById('imagePreview').style.display = 'none';\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        const dataUrl = e.target.result;\n        const previewContainer = document.getElementById(`editImagePreview-${index}`);\n        const previewImg = previewContainer.querySelector('img');\n        previewImg.src = dataUrl;\n        previewContainer.style.display = 'flex';\n        products[index].image = dataUrl;\n        galleryImages.push({\n            id: generateUniqueId(),\n            name: fileName,\n            data: dataUrl,\n            dateAdded: new Date().toISOString()\n        });\n        saveGallery();\n        renderGallery();\n        showNotification('Zdjęcie dodane do galerii', 'success');\n\t\tplayNotificationSound('success');\n    };\n    reader.readAsDataURL(file);\n}\nfunction openGalleryForEdit(index) {\n\teditingProductIndex = index;\n\topenGalleryForSelection();\n}\nfunction startExchangeRateUpdater() {\n\tfetchExchangeRates();\n\tsetInterval(fetchExchangeRates, 3600000);\n}\nfunction openEditImagePreview(index) {\n    showNotification('Otworzono podgląd zdjęcia', 'info');\n    const product = products[index];\n    if (!product.image) return;\n    document.getElementById('fullPreviewImg').src = product.image;\n    document.getElementById('imagePreviewModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('imagePreviewModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nasync function saveInline(productId) {\n  const globalIndex = products.findIndex(p => p.id === productId);\n  if (globalIndex === -1) {\n    showNotification('Błąd: nie znaleziono produktu do edycji', 'danger');\n    return;\n  }\n\n  const card = document.querySelector(`.product[data-id=\"${productId}\"]`);\n  if (!card) {\n    showNotification('Błąd: element edycji nie został znaleziony', 'danger');\n    return;\n  }\n\n  logEvent(`Zapisywanie zmian produktu: ${products[globalIndex].name}`);\n\n  try {\n    const nameInput = card.querySelector('.edit-name');\n    const categorySelect = card.querySelector('.edit-category');\n    const quantityInput = card.querySelector('.edit-quantity');\n    const priceInput = card.querySelector('.edit-price');\n    const yearInput = card.querySelector('.edit-year');\n    const currencySelect = card.querySelector('.edit-currency');\n    const currentPriceInput = card.querySelector('.edit-currentPrice');\n    const currentCurrencySelect = card.querySelector('.edit-currentCurrency');\n    const effectSelect = card.querySelector('.edit-effect');\n    const conditionSelect = card.querySelector('.edit-condition');\n    const languageSelect = card.querySelector('.edit-language');\n    \n    resetValidationStyles(card);\n    const errors = [];\n    \n    if (!nameInput || !nameInput.value.trim()) {\n      errors.push('Nazwa produktu jest wymagana');\n      highlightField(nameInput);\n    }\n\n    if (!categorySelect || !categorySelect.value) {\n      errors.push('Kategoria jest wymagana');\n      highlightField(categorySelect);\n    }\n\n    if (!quantityInput || isNaN(parseInt(quantityInput.value)) || parseInt(quantityInput.value) < 1) {\n      errors.push('Nieprawidłowa ilość');\n      highlightField(quantityInput);\n    }\n\n    if (!priceInput || isNaN(parseFloat(priceInput.value)) || parseFloat(priceInput.value) <= 0) {\n      errors.push('Nieprawidłowa cena zakupu');\n      highlightField(priceInput);\n    }\n\n    if (!yearInput || isNaN(parseInt(yearInput.value)) || parseInt(yearInput.value) < 2000 || parseInt(yearInput.value) > new Date().getFullYear() + 1) {\n      errors.push('Nieprawidłowy rok zakupu');\n      highlightField(yearInput);\n    }\n\n    if (!currencySelect || !currencySelect.value) {\n      errors.push('Waluta jest wymagana');\n      highlightField(currencySelect);\n    }\n\n    const category = categorySelect ? categorySelect.value : '';\n\n    if (category === 'Singles') {\n      if (!conditionSelect || !conditionSelect.value) {\n        errors.push('Stan karty jest wymagany dla kategorii Singles');\n        highlightField(conditionSelect);\n      }\n      if (effectSelect && effectSelect.value && !effects.includes(effectSelect.value)) {\n        errors.push('Wybrany efekt nie istnieje na liście dostępnych efektów');\n        highlightField(effectSelect);\n      }\n    }\n\n    if (!['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n      if (!languageSelect || !languageSelect.value) {\n        errors.push('Język jest wymagany dla tej kategorii');\n        highlightField(languageSelect);\n      } else if (!LANGUAGES.includes(languageSelect.value)) {\n        errors.push('Wybrany język nie istnieje na liście dostępnych języków');\n        highlightField(languageSelect);\n      }\n    }\n\n    if (category !== 'Złoto') {\n      if (currentPriceInput && currentPriceInput.value.trim() !== '') {\n        const currentPriceValue = parseFloat(currentPriceInput.value);\n        if (isNaN(currentPriceValue) || currentPriceValue < 0) {\n          errors.push('Nieprawidłowa aktualna cena');\n          highlightField(currentPriceInput);\n        }\n        if (!currentCurrencySelect || !currentCurrencySelect.value) {\n          errors.push('Waluta aktualnej ceny jest wymagana');\n          highlightField(currentCurrencySelect);\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      showNotification('Popraw następujące błędy: ' + errors.join(', '), 'danger');\n      playNotificationSound('alert');\n      return;\n    }\n\n    const name = nameInput.value.trim();\n    const quantity = parseInt(quantityInput.value);\n    const price = parseFloat(priceInput.value);\n    const year = parseInt(yearInput.value);\n    const currency = currencySelect.value;\n\n    let currentPriceValue = null;\n    let currentCurrencyValue = null;\n    \n    if (category === 'Złoto') {\n      const goldPrice = await fetchGoldPrice();\n      if (goldPrice !== null) {\n        currentPriceValue = goldPrice;\n        currentCurrencyValue = 'PLN';\n      } else {\n        showNotification('Nie udało się pobrać ceny złota. Używam ostatniej znanej ceny.', 'warning');\n        currentPriceValue = exchangeRates.GOLD || price;\n        currentCurrencyValue = 'PLN';\n      }\n    } else {\n      if (currentPriceInput && currentPriceInput.value.trim() !== '') {\n        currentPriceValue = parseFloat(currentPriceInput.value);\n        currentCurrencyValue = currentCurrencySelect ? currentCurrencySelect.value : (products[globalIndex].currentCurrency || currency);\n      }\n    }\n\n    let effectValue = null;\n    if (effectSelect && category === 'Singles') {\n      effectValue = effectSelect.value || null;\n    }\n\n    let conditionValue = null;\n    if (conditionSelect && category === 'Singles') {\n      conditionValue = conditionSelect.value;\n    }\n\n    let languageValue = null;\n    if (languageSelect && !['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n      languageValue = languageSelect.value;\n    }\n\n    let newName = name;\n    let nameChanged = false;\n\n    const lastPriceUpdate = new Date().toISOString();\n\n    const updatedProduct = {\n      ...products[globalIndex],\n      name: newName,\n      category: category,\n      quantity: quantity,\n      price: price,\n      year: year,\n      currency: currency,\n      currentPrice: currentPriceValue,\n      currentCurrency: currentCurrencyValue,\n      effect: effectValue,\n      condition: conditionValue,\n      language: languageValue,\n      editing: false,\n      lastPriceUpdate: lastPriceUpdate\n    };\n\n    products[globalIndex] = updatedProduct;\n\n    if (currentPriceValue !== null) {\n      try {\n        await priceHistory.addPricePoint(\n          updatedProduct.id,\n          currentPriceValue,\n          currentCurrencyValue\n        );\n      } catch (error) {\n        logEvent('Błąd zapisu historii cen:', error);\n      }\n    }\n\n    await saveProducts();\n\n    if (nameChanged) {\n      showNotification(`Produkt o takiej nazwie już istnieje. Zapisano jako: ${newName}`, 'warning', 5000);\n      playNotificationSound('alert');\n    } else {\n      showNotification('Produkt został zaktualizowany', 'success');\n      playNotificationSound('success');\n    }\n\n    renderProducts(applyAllFilters());\n\n  } catch (error) {\n    showNotification('Błąd podczas zapisywania: ' + error, 'danger');\n    logEvent('Błąd saveInline:', error);\n    logEvent(`Błąd podczas zapisu produktu: ${error}`);\n  }\n}\nfunction highlightField(field) {\n    if (field) {\n        field.style.borderColor = '#dc3545';\n        field.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';\n        field.style.backgroundColor = '#fff5f5';\n        field.classList.add('validation-error');\n    }\n}\nfunction resetValidationStyles(card) {\n  const fields = card.querySelectorAll('input, select');\n  fields.forEach(field => {\n    field.style.borderColor = '';\n    field.style.boxShadow = '';\n    field.style.backgroundColor = '';\n  });\n}\nasync function fetchEffectsFromGitHub() {\n    try {\n        const response = await fetch('https://raw.githubusercontent.com/BarryV94/Magazyn-Produkt-w/main/effects.json');\n        if (!response.ok) {\n            throw new Error('Nie udało się pobrać efektów');\n        }\n        const effectsFromGitHub = await response.json();\n        return effectsFromGitHub;\n    } catch (error) {\n        logEvent('Błąd pobierania efektów:', error);\n        return null;\n    }\n}\nasync function updateEffectsFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(30);\n    \n    try {\n        const githubEffects = await fetchEffectsFromGitHub();\n        if (githubEffects && githubEffects.length > 0) {\n            const existingEffects = new Set(effects);\n            const newEffects = githubEffects.filter(effect => !existingEffects.has(effect));\n            \n            if (newEffects.length > 0) {\n                effects.push(...newEffects);\n                saveEffects();\n                renderEffectsList();\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n                showNotification(`Dodano ${newEffects.length} nowych efektów`, 'success');\n                playNotificationSound('success');\n                \n                if (document.getElementById('effect')) {\n                    fillEffectSelect();\n                }\n            } else {\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n            }\n        } else {\n            throw new Error('Nie udało się pobrać efektów');\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji efektów: ' + error.message, 'danger');\n    }\n}\nfunction forceUpdateUI() {\n  updateSummary();\n  renderProducts(applyAllFilters());\n  generateNewStatistics();\n}\nasync function forceSaveAll() {\n  try {\n    saveLogs();\n\tawait fetchGoldPrice();\n    await saveGallery();\n    await saveProductImagesToDB();\n    await migrateExistingProducts();\n    await migrateProductImageReferences();\n    try {\n      localStorage.setItem('products', JSON.stringify(products));\n      localStorage.setItem('categories', JSON.stringify(categories));\n      localStorage.setItem('exchangeRates', JSON.stringify(exchangeRates));\n      localStorage.setItem('currencySymbols', JSON.stringify(currencySymbols));\n      localStorage.setItem('shops', JSON.stringify(shops));\n      localStorage.setItem('effects', JSON.stringify(effects));\n    } catch (storageError) {\n      if (storageError.name === 'QuotaExceededError') {\n        const productsWithoutImages = products.map(({ image, imageId, ...rest }) => rest);\n        localStorage.setItem('products', JSON.stringify(productsWithoutImages));\n        localStorage.setItem('categories', JSON.stringify(categories));\n        localStorage.setItem('exchangeRates', JSON.stringify(exchangeRates));\n        localStorage.setItem('currencySymbols', JSON.stringify(currencySymbols));\n        localStorage.setItem('shops', JSON.stringify(shops));\n        localStorage.setItem('effects', JSON.stringify(effects));\n      } else {\n        throw storageError;\n      }\n    }\n    await forceUpdateStatistics();\n    await renderProducts(applyAllFilters());\n    await renderGallery();\n    await updateCategorySelects();\n    await updateCurrencySelects();\n    await fillEffectSelect();\n\tawait updateGoldPrices();\n    setTimeout(() => {\n      showNotification('Wszystkie dane zostały zapisane!', 'success');\n    }, 500);\n  } catch (error) {\n    showNotification('Błąd zapisu: ' + error.message, 'danger');\n    playNotificationSound('alert');\n  }\n}\n\nfunction updateEditFormFields(category, card, index) {\n  const effectField = card.querySelector('.effect-field');\n  const conditionField = card.querySelector('.condition-field');\n  const languageField = card.querySelector('.language-field');\n  const quantityLabel = card.querySelector('.quantity-label');\n  const priceLabel = card.querySelector('.currency-group').previousElementSibling;\n  const priceInput = card.querySelector('.edit-price');\n  const currentPriceBlock = card.querySelector('.edit-currentPrice')?.closest('div');\n\n  if (effectField) effectField.style.display = 'none';\n  if (conditionField) conditionField.style.display = 'none';\n  if (languageField) languageField.style.display = 'none';\n\n  if (category === 'Singles') {\n    if (effectField) effectField.style.display = 'block';\n    if (conditionField) conditionField.style.display = 'block';\n  }\n\n  if (!['Złoto', 'Akcesoria', 'Inne'].includes(category)) {\n    if (languageField) languageField.style.display = 'block';\n  }\n\n  if (category === 'Złoto') {\n    if (quantityLabel) quantityLabel.textContent = 'Ilość (gram) *';\n    if (priceLabel) priceLabel.textContent = 'Cena zakupu za 1 gram *';\n    if (priceInput) priceInput.placeholder = 'Cena zakupu za gram';\n    if (currentPriceBlock) currentPriceBlock.style.display = 'none';\n  } else {\n    if (quantityLabel) quantityLabel.textContent = 'Ilość *';\n    if (priceLabel) priceLabel.textContent = 'Cena zakupu jednej sztuki *';\n    if (priceInput) priceInput.placeholder = 'Cena zakupu';\n    if (currentPriceBlock) currentPriceBlock.style.display = 'block';\n  }\n}\nfunction showImagePreview(input) {\n    if (!input || !input.files || !input.files[0]) return;\n    const file = input.files[0];\n    const fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n    if (!isImageNameUnique(fileName)) {\n        showNotification('Zdjęcie o takiej nazwie już istnieje i nie zostanie dodane do galeri, ani jako miniaturka do produktu', 'warning');\n        input.value = '';\n        selectedImageUrl = null;\n        document.getElementById('previewImg').src = '';\n        document.getElementById('imagePreview').style.display = 'none';\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        document.getElementById('previewImg').src = e.target.result;\n        document.getElementById('imagePreview').style.display = 'flex';\n        galleryImages.push({\n            id: generateUniqueId(),\n            name: fileName,\n            data: e.target.result,\n            dateAdded: new Date().toISOString()\n        });\n        saveGallery();\n        renderGallery();\n        showNotification('Zdjęcie dodane do galerii', 'success');\n\t\tplayNotificationSound('success');\n    };\n    reader.readAsDataURL(file);\n}\nfunction openImagePreview() {\n    logEvent('Otwarcie podglądu obrazu');\n    const imgSrc = document.getElementById('previewImg').src;\n    if (!imgSrc) return;\n    document.getElementById('fullPreviewImg').src = imgSrc;\n    document.getElementById('imagePreviewModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('imagePreviewModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeImagePreview() {\n  logEvent('Podgląd obrazu został zamknięty');\n  document.getElementById('imagePreviewModal').classList.remove('show');\n}\nfunction openProductPreview(index) {\n  try {\n    const product = products[index];\n    if (!product) {\n      logEvent('Product not found at index:', index);\n      showNotification('Nie znaleziono produktu', 'danger');\n      return;\n    }\n\n    const previewProductName = document.getElementById('previewProductName');\n    const card3dContainer = document.getElementById('card3dContainer');\n    const standardPreview = document.getElementById('standardPreview');\n    const card3dImage = document.getElementById('card3dImage');\n    const productPreviewImg = document.getElementById('productPreviewImg');\n    const effectRow = document.getElementById('previewEffect') ? document.getElementById('previewEffect').parentElement : null;\n    const quantityLabel = document.querySelector('#previewQuantity') ? document.querySelector('#previewQuantity').previousElementSibling : null;\n    const currentPriceLabel = document.querySelector('#previewCurrentPrice') ? document.querySelector('#previewCurrentPrice').previousElementSibling : null;\n    \n    if (!previewProductName) {\n      logEvent('Required DOM element previewProductName not found');\n      return;\n    }\n\n    previewProductName.textContent = product.name;\n\n    const excludedPriceTrendCategories = ['Złoto', 'Inne', 'Akcesoria'];\n    const excludedCardmarketCategories = ['Inne', 'Akcesoria'];\n    \n    const showPriceTrend = !excludedPriceTrendCategories.includes(product.category);\n    const showCardmarket = !excludedCardmarketCategories.includes(product.category);\n\n    const existingCondition = document.querySelector('.preview-card-condition');\n    const existingLanguageRow = document.querySelector('.preview-language-row');\n    if (existingCondition) existingCondition.remove();\n    if (existingLanguageRow) existingLanguageRow.remove();\n\n    if (product.category === 'Singles' && product.condition) {\n      const conditionElement = document.createElement('div');\n      conditionElement.className = 'preview-card-condition';\n      conditionElement.textContent = `Stan karty: ${product.condition}`;\n      conditionElement.style.marginTop = '5px';\n      conditionElement.style.fontSize = '0.9em';\n      conditionElement.style.color = '#666';\n      conditionElement.style.display = 'block';\n      conditionElement.style.width = '100%';\n      \n      const productNameParent = document.getElementById('previewProductName').parentNode;\n      if (productNameParent) {\n        productNameParent.appendChild(conditionElement);\n      }\n    }\n\n    let goldBuybackRow = document.getElementById('previewGoldBuyback');\n    let goldBuybackValueElement = document.getElementById('previewGoldBuybackValue');\n\n    if (product.category === 'Złoto') {\n      if (!goldBuybackRow) {\n        const previewDetails = document.querySelector('.preview-details');\n        if (previewDetails) {\n          goldBuybackRow = document.createElement('div');\n          goldBuybackRow.id = 'previewGoldBuyback';\n          goldBuybackRow.className = 'preview-detail-row';\n          goldBuybackRow.innerHTML = `\n            <span class=\"preview-detail-label\">Cena odkupu złota przez Mennica Polska (podana cena jest szacowana):</span>\n            <span class=\"preview-detail-value\" id=\"previewGoldBuybackValue\">Obliczanie...</span>\n          `;\n          previewDetails.parentNode.insertBefore(goldBuybackRow, previewDetails.nextSibling);\n          goldBuybackValueElement = document.getElementById('previewGoldBuybackValue');\n        }\n      }\n\n      if (goldBuybackValueElement) {\n        calculateGoldBuybackPrice(product).then(result => {\n          const targetCurrency = currencyConfig.goldBuybackCurrency || currencyConfig.priceDiffCurrency;\n          const convertedBuyback = convertToCurrency(result.buybackPrice, 'PLN', targetCurrency);\n          goldBuybackValueElement.innerHTML = `\n            <div>${formatCurrency(convertedBuyback, targetCurrency, true, 'goldBuyback')}</div>\n            <div style=\"font-size: 0.8em; color: #666; margin-top: 5px;\">\n              ${result.rateInfo}<br>\n              Kurs USD/PLN: ${result.usdRate.toFixed(4)}\n              <button onclick=\"refreshGoldBuybackPrice()\" style=\"margin-top: 5px; padding: 2px 5px; font-size: 0.7em;\">\n                <i class=\"fas fa-sync-alt\"></i> Odśwież teraz\n              </button>\n            </div>\n          `;\n          startGoldBuybackAutoRefresh(product);\n        }).catch(error => {\n          logEvent('Błąd obliczania ceny odkupu:', error);\n          if (goldBuybackValueElement) {\n            goldBuybackValueElement.textContent = 'Błąd obliczeń';\n          }\n        });\n      }\n      \n      if (goldBuybackRow) {\n        goldBuybackRow.style.display = 'flex';\n      }\n      \n      if (quantityLabel) quantityLabel.textContent = 'Ilość (gram)';\n      if (currentPriceLabel) currentPriceLabel.textContent = 'Aktualna cena za 1 gram';\n      const priceLabel = document.querySelector('#previewPrice') ? document.querySelector('#previewPrice').previousElementSibling : null;\n      if (priceLabel) priceLabel.textContent = 'Cena zakupu za 1 gram';\n    } else {\n      if (goldBuybackRow) {\n        goldBuybackRow.style.display = 'none';\n      }\n      if (quantityLabel) quantityLabel.textContent = 'Ilość';\n      if (currentPriceLabel) currentPriceLabel.textContent = 'Aktualna cena za jedną sztukę';\n    }\n\n    if (product.category === 'Singles') {\n      if (card3dContainer) card3dContainer.style.display = 'block';\n      if (standardPreview) standardPreview.style.display = 'none';\n      if (card3dImage) card3dImage.src = product.image || '';\n      \n      const cardFront = card3dContainer ? card3dContainer.querySelector('.card-front') : null;\n      if (cardFront) {\n        if (product.effect === 'Pokemon V (Full Art)') {\n          cardFront.dataset.rarity = 'rare ultra';\n          cardFront.dataset.supertype = 'pokémon';\n        } else {\n          delete cardFront.dataset.rarity;\n          delete cardFront.dataset.supertype;\n        }\n      }\n      \n      if (effectRow) effectRow.style.display = '';\n      const previewEffectElement = document.getElementById('previewEffect');\n      if (previewEffectElement) previewEffectElement.textContent = product.effect || 'Brak';\n      init3DCardEffect();\n    } else {\n      if (card3dContainer) card3dContainer.style.display = 'none';\n      if (standardPreview) standardPreview.style.display = 'block';\n      if (productPreviewImg) productPreviewImg.src = product.image || '';\n      if (effectRow) effectRow.style.display = 'none';\n    }\n\n    const previewCategoryElement = document.getElementById('previewCategory');\n    if (previewCategoryElement) previewCategoryElement.textContent = product.category;\n    \n    const previewQuantityElement = document.getElementById('previewQuantity');\n    if (previewQuantityElement) previewQuantityElement.textContent = product.quantity;\n    \n    const previewPriceElement = document.getElementById('previewPrice');\n    if (previewPriceElement) previewPriceElement.textContent = formatCurrency(product.price, product.currency, true, 'purchasePrice');\n    \n    const previewYearElement = document.getElementById('previewYear');\n    if (previewYearElement) previewYearElement.textContent = product.year;\n    \n    const previewDateAddedElement = document.getElementById('previewDateAdded');\n    if (previewDateAddedElement) previewDateAddedElement.textContent = formatDate(product.dateAdded);\n    \n    if (!['Złoto', 'Akcesoria', 'Inne'].includes(product.category) && product.language) {\n      const languageRow = document.createElement('div');\n      languageRow.className = 'preview-language-row detail-item';\n      languageRow.innerHTML = `\n        <span class=\"detail-label\">Język:</span>\n        <span class=\"preview-value\" style=\"font-weight: 600;font-size: 1rem;\">${product.language}</span>\n      `;\n      \n      const yearRow = document.querySelector('#previewYear') ? document.querySelector('#previewYear').parentNode : null;\n      if (yearRow && yearRow.parentNode) {\n        yearRow.parentNode.insertBefore(languageRow, yearRow.nextSibling);\n      }\n    }\n    \n    const currentPrice = product.currentPrice !== null && product.currentPrice !== undefined ? \n      formatCurrency(product.currentPrice, product.currentCurrency || product.currency, true, 'currentPrice') : 'Brak';\n    \n    const previewCurrentPriceElement = document.getElementById('previewCurrentPrice');\n    if (previewCurrentPriceElement) previewCurrentPriceElement.textContent = currentPrice;\n    \n    const previewCurrencyElement = document.getElementById('previewCurrency');\n    if (previewCurrencyElement) previewCurrencyElement.textContent = \n      `${product.currency} (${getCurrencySymbol(product.currency)})`;\n    \n    const previewCurrentCurrencyElement = document.getElementById('previewCurrentCurrency');\n    if (previewCurrentCurrencyElement) previewCurrentCurrencyElement.textContent = \n      `${product.currentCurrency || product.currency} (${getCurrencySymbol(product.currentCurrency || product.currency)})`;\n    \n    let priceDiffHtml = '';\n    if (product.currentPrice !== null && product.currentPrice !== undefined) {\n      const purchasePLN = convertToPLN(product.price, product.currency);\n      let diff, diffPerItem, diffPercent, diffClass, diffSign;\n      \n      if (product.category === 'Złoto') {\n        const totalPurchaseValue = purchasePLN * product.quantity;\n        const totalCurrentValue = convertToPLN(product.currentPrice, product.currentCurrency || product.currency) * product.quantity;\n        diff = totalCurrentValue - totalPurchaseValue;\n        diffPerItem = (totalCurrentValue / product.quantity) - (totalPurchaseValue / product.quantity);\n        diffPercent = (diff / totalPurchaseValue) * 100;\n        diffClass = diff > 0 ? 'positive' : (diff < 0 ? 'negative' : 'neutral');\n        diffSign = diff > 0 ? '+' : '';\n\n        priceDiffHtml = `\n          <div class=\"price-difference ${diffClass}\">\n            <div>${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')}</div>\n            <div>${diffSign}${Math.abs(diffPercent).toFixed(2).replace('.', ',')}%</div>\n          </div>\n        `;\n      } else {\n        const currentPLN = convertToPLN(product.currentPrice, product.currentCurrency || product.currency);\n        diff = (currentPLN - purchasePLN) * product.quantity;\n        diffPerItem = currentPLN - purchasePLN;\n        diffPercent = (diffPerItem / purchasePLN) * 100;\n        diffClass = diff > 0 ? 'positive' : (diff < 0 ? 'negative' : 'neutral');\n        diffSign = diff > 0 ? '+' : '';\n\n        const sameCurrency = product.currency === (product.currentCurrency || product.currency);\n        let profitInCurrency = '';\n        \n        if (sameCurrency) {\n          const profitVal = (product.currentPrice - product.price) * product.quantity;\n          profitInCurrency = formatCurrency(Math.abs(profitVal), product.currency, false, 'priceDiff');\n        }\n\n        priceDiffHtml = `\n          <div class=\"price-difference ${diffClass}\">\n            ${sameCurrency ? `\n              <div>${diffSign}${profitInCurrency} ${getCurrencySymbol(product.currency)}</div>\n              <div>(${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')})</div>\n            ` : `\n              <div>${diffSign}${formatCurrency(Math.abs(diff), 'PLN', true, 'priceDiff')}</div>\n            `}\n            <div>${diffSign}${Math.abs(diffPercent).toFixed(2).replace('.', ',')}%</div>\n          </div>\n        `;\n      }\n    } else {\n      priceDiffHtml = '<div class=\"price-difference neutral\">Brak danych o aktualnej cenie</div>';\n    }\n    \n    const previewPriceDifferenceElement = document.getElementById('previewPriceDifference');\n    if (previewPriceDifferenceElement) {\n      previewPriceDifferenceElement.innerHTML = priceDiffHtml;\n    }\n\n    let priceTrendRow = document.getElementById('previewPriceTrendRow');\n    if (showPriceTrend && priceTrendAllow) {\n      if (!priceTrendRow) {\n        const previewDetails = document.querySelector('.preview-details');\n        if (previewDetails) {\n          priceTrendRow = document.createElement('div');\n          priceTrendRow.id = 'previewPriceTrendRow';\n          priceTrendRow.className = 'detail-item';\n          priceTrendRow.innerHTML = `\n            <span class=\"detail-label\">Price Trend na Cardmarket:</span>\n            <span class=\"preview-detail-value\">\n              <div class=\"loading-trend\">Ładowanie...</div>\n            </span>\n          `;\n          \n          const priceDifferenceSection = document.querySelector('.price-difference-section');\n          if (priceDifferenceSection) {\n            priceDifferenceSection.parentNode.insertBefore(priceTrendRow, priceDifferenceSection);\n          } else {\n            previewDetails.appendChild(priceTrendRow);\n          }\n        }\n      } else {\n        const priceTrendElement = document.getElementById('previewPriceTrend');\n        if (priceTrendElement) {\n          priceTrendElement.innerHTML = '<div class=\"loading-trend\">Ładowanie...</div>';\n        }\n      }\n      updateProductPreviewPriceTrend(product.name);\n    } else if (showPriceTrend && !priceTrendAllow) {\n      if (!priceTrendRow) {\n        const previewDetails = document.querySelector('.preview-details');\n        if (previewDetails) {\n          priceTrendRow = document.createElement('div');\n          priceTrendRow.id = 'previewPriceTrendRow';\n          priceTrendRow.className = 'detail-item';\n          priceTrendRow.innerHTML = `\n            <span class=\"detail-label\">Price Trend na Cardmarket:</span>\n            <span class=\"preview-detail-value\">\n              <span class=\"no-data\">Niedostępne</span>\n            </span>\n          `;\n          \n          const priceDifferenceSection = document.querySelector('.price-difference-section');\n          if (priceDifferenceSection) {\n            priceDifferenceSection.parentNode.insertBefore(priceTrendRow, priceDifferenceSection);\n          } else {\n            previewDetails.appendChild(priceTrendRow);\n          }\n        }\n      } else {\n        const priceTrendElement = document.getElementById('previewPriceTrend');\n        if (priceTrendElement) {\n          priceTrendElement.innerHTML = '<span class=\"no-data\">Niedostępne</span>';\n        }\n      }\n    } else {\n      if (priceTrendRow) {\n        priceTrendRow.style.display = 'none';\n      }\n    }\n\n    currentChartProductId = product.id;\n    const historySection = document.querySelector('.price-history-section');\n    const chartContainer = document.querySelector('.price-chart-container');\n    \n    if (chartContainer) {\n      chartContainer.innerHTML = '<div class=\"price-chart-loading\"></div>';\n      \n      if (historySection) {\n        historySection.style.display = 'block';\n      }\n      \n      const canvas = document.createElement('canvas');\n      canvas.id = 'priceHistoryChart';\n      chartContainer.appendChild(canvas);\n      \n      setTimeout(async () => {\n        try {\n          await renderPriceHistoryChart(product.id);\n        } catch (error) {\n          logEvent('Błąd renderowania wykresu:', error);\n          if (chartContainer) {\n            chartContainer.innerHTML = '<div class=\"error-message\">Błąd generowania wykresu</div>';\n          }\n        }\n      }, 100);\n    }\n\n    const productPreviewModal = document.getElementById('productPreviewModal');\n    if (productPreviewModal) {\n      productPreviewModal.classList.add('show');\n      \n      const handlePreviewKeyDown = function(e) {\n        if (e.key === 'Escape') {\n          closeProductPreview();\n        }\n      };\n      document.addEventListener('keydown', handlePreviewKeyDown);\n      \n      setTimeout(() => {\n        const modalContent = productPreviewModal.querySelector('.modal-content');\n        const scrollBtn = productPreviewModal.querySelector('.modal-scroll-to-top');\n        if (modalContent) modalContent.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n      }, 100);\n    }\n\n  } catch (error) {\n    logEvent('Błąd w openProductPreview:', error);\n    showNotification('Błąd podczas otwierania podglądu produktu', 'danger');\n  }\n}\nfunction savePriceTrendCache(productName, trend) {\n    if (trend === null) {\n        if (priceTrendCache[productName]) {\n            delete priceTrendCache[productName];\n            localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n        }\n        return;\n    }\n    \n    priceTrendCache[productName] = {\n        trend: trend,\n        timestamp: Date.now()\n    };\n    localStorage.setItem('priceTrendCache', JSON.stringify(priceTrendCache));\n}\nasync function updateProductPreviewPriceTrend(productName, retryCount = 0) {\n  if (!priceTrendAllow) {\n    const trendElement = document.getElementById('previewPriceTrend');\n    if (trendElement) {\n      trendElement.innerHTML = '<span class=\"no-data\">Niedostępne</span>';\n    }\n    return;\n  }\n  const maxRetries = 2;\n  const retryDelay = 10000;\n\n  try {\n    const trend = await fetchCardmarketPriceTrend(productName);\n    const trendElement = document.getElementById('previewPriceTrend');\n    \n    if (!trendElement) return;\n\n    if (trend) {\n      trendElement.innerHTML = `<span class=\"price-trend-value\">${trend}</span>`;\n    } else {\n      if (retryCount < maxRetries) {\n        trendElement.innerHTML = `<div class=\"loading-trend\">Ponawianie... (${retryCount + 1}/${maxRetries})</div>`;\n        setTimeout(() => {\n          updateProductPreviewPriceTrend(productName, retryCount + 1);\n        }, retryDelay);\n      } else {\n        trendElement.innerHTML = '<span class=\"no-data\">Brak danych po wielu próbach</span>';\n      }\n    }\n  } catch (error) {\n    const trendElement = document.getElementById('previewPriceTrend');\n    \n    if (trendElement) {\n      if (retryCount < maxRetries) {\n        trendElement.innerHTML = `<div class=\"loading-trend\">Błąd, ponawianie... (${retryCount + 1}/${maxRetries})</div>`;\n        setTimeout(() => {\n          updateProductPreviewPriceTrend(productName, retryCount + 1);\n        }, retryDelay);\n      } else {\n        trendElement.innerHTML = '<span class=\"no-data\">Błąd pobierania</span>';\n      }\n    }\n  }\n}\n\nfunction isPriceTrendCacheValid(productName) {\n    const cached = priceTrendCache[productName];\n    if (!cached) return false;\n    \n    const now = Date.now();\n    return (now - cached.timestamp) < PRICE_TREND_CACHE_DURATION;\n}\nasync function fetchCardmarketPriceTrend(productName) {\n\tif (!priceTrendAllow) {\n\treturn null;\n\t}\n    if (isPriceTrendCacheValid(productName)) {\n        return priceTrendCache[productName].trend;\n    }\n\n    try {        \n        const searchUrl = await searchCardmarketForProduct(productName);\n        if (!searchUrl) {\n            logEvent('Nie udało się utworzyć URL wyszukiwania');\n            savePriceTrendCache(productName, null);\n            return null;\n        }\n                \n        const priceTrend = await extractPriceTrendFromPage(searchUrl);\n        \n        if (priceTrend) {\n            logEvent('Znaleziono Price Trend:', priceTrend);\n            savePriceTrendCache(productName, priceTrend);\n        } else {\n            savePriceTrendCache(productName, null);\n        }\n        \n        return priceTrend;\n        \n    } catch (error) {\n        savePriceTrendCache(productName, null);\n        return null;\n    }\n}\nasync function searchCardmarketForProduct(productName) {\n  try {\n    let sanitized = productName.replace(/[^A-Za-z0-9ĄąĆćĘęŁłŃńÓóŚśŹźŻż\\s]/g, ' ');\n    sanitized = sanitized.replace(/\\s+/g, ' ').trim();\n    \n    sanitized = sanitized.replace(/\\s*(Holo|Reverse|Foil|Rare|Common|Uncommon|Secret|Ultra|GX|EX|V|VMAX|VSTAR)$/gi, '').trim();\n    \n    const exactSearchString = `[${sanitized}]`;\n    const formattedName = encodeURIComponent(exactSearchString)\n      .replace(/%20/g, '+')\n      .replace(/'/g, '%27');\n    \n    const searchUrl = `https://www.cardmarket.com/en/Pokemon/Products/Search?searchString=${formattedName}&mode=gallery`;\n    \n    return searchUrl;\n  } catch (error) {\n    return null;\n  }\n}\nasync function extractPriceTrendFromPage(searchUrl) {\n  try {\n    const proxies = [\n      `https://api.allorigins.win/get?url=${encodeURIComponent(searchUrl)}`,\n      `https://corsproxy.io/?${encodeURIComponent(searchUrl)}`,\n      `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(searchUrl)}`\n    ];\n    \n    for (const proxyUrl of proxies) {\n      try {\n        const response = await fetch(proxyUrl, {\n          method: 'GET',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n            'Accept-Language': 'en-US,en;q=0.5',\n            'Cache-Control': 'no-cache',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n          }\n        });\n        \n        if (!response.ok) {\n          continue;\n        }\n        \n        let htmlContent;\n        \n        if (proxyUrl.includes('api.allorigins.win')) {\n          const data = await response.json();\n          htmlContent = data.contents;\n        } else {\n          htmlContent = await response.text();\n        }\n        \n        if (!htmlContent) {\n          logEvent('Brak zawartości HTML');\n          continue;\n        }\n                \n        const parser = new DOMParser();\n        const doc = parser.parseFromString(htmlContent, 'text/html');\n        \n        \n        const priceTrendElements = Array.from(doc.querySelectorAll('*')).filter(el => \n          el.textContent && el.textContent.trim() === 'Price Trend'\n        );\n                \n        for (const element of priceTrendElements) {\n          let nextElement = element.nextElementSibling;\n          while (nextElement) {\n            const text = nextElement.textContent.trim();\n            if (text && (text.includes('€') || text.includes('$') || text.includes('£') || /\\d+[,.]\\d+/.test(text))) {\n              return text;\n            }\n            nextElement = nextElement.nextElementSibling;\n          }\n        }\n        \n        const priceSelectors = [\n          '.price-trend',\n          '.trend-price',\n          '[class*=\"price\"]',\n          '[class*=\"trend\"]',\n          '.col-6.col-xl-7 span',\n          '.row .col-6:last-child span'\n        ];\n        \n        for (const selector of priceSelectors) {\n          const elements = doc.querySelectorAll(selector);\n          for (const element of elements) {\n            const text = element.textContent.trim();\n            if (text && (text.includes('€') || text.includes('$') || text.includes('£')) && /\\d+[,.]\\d+/.test(text)) {\n              logEvent('Znaleziono cenę przez selektor:', selector, text);\n              return text;\n            }\n          }\n        }\n        \n        const dtElements = doc.querySelectorAll('dt');\n        for (const dt of dtElements) {\n          if (dt.textContent.trim() === 'Price Trend') {\n            const dd = dt.nextElementSibling;\n            if (dd && dd.tagName === 'DD') {\n              const priceElement = dd.querySelector('span') || dd;\n              const priceText = priceElement.textContent.trim();\n              if (priceText) {\n                return priceText;\n              }\n            }\n          }\n        }\n        \n        const dataElements = doc.querySelectorAll('[data-price], [data-trend]');\n        for (const element of dataElements) {\n          const price = element.getAttribute('data-price') || element.getAttribute('data-trend');\n          if (price) {\n            return price + ' €';\n          }\n        }\n        \n      } catch (proxyError) {\n      }\n    }\n    \n    return null;\n    \n  } catch (error) {\n    return null;\n  }\n}\nasync function fetchPriceTrendAlternative(productName) {\n  try {\n    const apiKey = 'twój_api_key';\n    const apiUrl = `https://api.scraperapi.com/?api_key=${apiKey}&url=https://www.cardmarket.com/en/Pokemon/Products/Search&query=${encodeURIComponent(productName)}`;\n    const response = await fetch(apiUrl);\n    const html = await response.text();\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    const firstProduct = doc.querySelector('.product-row');\n    if (firstProduct) {\n      const priceTrend = firstProduct.querySelector('.price-trend');\n      if (priceTrend) {\n        return priceTrend.textContent.trim();\n      }\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n}\nasync function refreshGoldBuybackPrice() {\n  const productPreview = document.querySelector('#productPreviewModal.show');\n  if (!productPreview) return;\n  const productName = document.getElementById('previewProductName').textContent;\n  const product = products.find(p => p.name === productName);\n  if (product && product.category === 'Złoto') {\n    const result = await calculateGoldBuybackPrice(product, true);\n    document.getElementById('previewGoldBuybackValue').innerHTML = `\n      <div>${result.buybackPrice.toFixed(2).replace('.', ',')} zł</div>\n      <div style=\"font-size: 0.8em; color: #666; margin-top: 5px;\">\n        ${result.rateInfo}<br>\n        Kurs USD/PLN: ${result.usdRate.toFixed(4)}\n        <br><em>(ręcznie odświeżone)</em>\n        <button onclick=\"refreshGoldBuybackPrice()\" style=\"margin-top: 5px; padding: 2px 5px; font-size: 0.7em;\">\n          <i class=\"fas fa-sync-alt\"></i> Odśwież teraz\n        </button>\n      </div>\n    `;\n  }\n}\nfunction closeProductPreview() {\n  logEvent('Podgląd produktu został zamknięty');\n  document.getElementById('productPreviewModal').classList.remove('show');\n  document.removeEventListener('keydown', handlePreviewKeyDown);\n  stopGoldBuybackAutoRefresh();\n}\nfunction handlePreviewKeyDown(e) {\n  if (e.key === 'Escape') {\n    closeProductPreview();\n  }\n}\nasync function deletePricePoint(pointId) {\n    if (pointId == null) return;\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    try {\n        const db = await priceHistory.dbPromise;\n        const tx = db.transaction('price_history', 'readwrite');\n        const store = tx.objectStore('price_history');\n        let actualId = pointId;\n        if (typeof pointId === 'string' && pointId.startsWith('temp-')) {\n            actualId = pointId.slice('temp-'.length);\n        }\n        if (typeof actualId === 'string' && !isNaN(Number(actualId))) {\n            actualId = Number(actualId);\n        }\n        await store.delete(actualId);\n        await tx.done;\n        const overlay = document.querySelector('.point-details-overlay');\n        if (overlay) document.body.removeChild(overlay);\n        if (window.pricePoints && Array.isArray(window.pricePoints)) {\n            window.pricePoints = window.pricePoints.filter(p => p.id !== actualId);\n        }\n        const prod = products.find(p => p.id === currentChartProductId);\n        if (prod && Array.isArray(prod.priceHistory)) {\n            prod.priceHistory = prod.priceHistory.filter(p => p.id !== actualId);\n        }\n        await renderPriceHistoryChart(currentChartProductId);\n        showNotification('Punkt został usunięty', 'success');\n\t\tplayNotificationSound('success');\n    } catch (error) {\n        showNotification('Błąd usuwania punktu', 'danger');\n    } finally {\n        loader.reset();\n    }\n}\nfunction showPointDetails(point) {\n    if (!point.id) {\n        point.id = `temp-${generateUniqueId()}`;\n    }\n    const date = new Date(point.date);\n    const formattedDate = date.toLocaleString('pl-PL', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n    const rate = point.exchangeRate || exchangeRates[point.currency];\n    const plnValue = point.price * rate;\n    const overlay = document.createElement('div');\n    overlay.className = 'point-details-overlay';\n    const detailsContainer = document.createElement('div');\n    detailsContainer.className = 'point-details';\n    detailsContainer.innerHTML = `\n        <div class=\"point-details-content\">\n            <button class=\"close-details\">&times;</button>\n            <h4>Szczegóły punktu</h4>\n            <div class=\"point-info\">\n                <div><strong>Data:</strong> ${formattedDate}</div>\n                <div><strong>Cena:</strong> ${point.price} ${point.currency}</div>\n                <div><strong>Kurs z dnia:</strong> 1 ${point.currency} = ${rate} PLN</div>\n                <div><strong>Wartość w PLN:</strong> ${plnValue.toFixed(2)} zł</div>\n            </div>\n            <button class=\"btn-danger delete-point-btn\">\n                <i class=\"fas fa-trash\"></i> Usuń punkt\n            </button>\n        </div>\n    `;\n    overlay.appendChild(detailsContainer);\n    document.body.appendChild(overlay);\n    const closeBtn = detailsContainer.querySelector('.close-details');\n    closeBtn.addEventListener('click', () => {\n        document.body.removeChild(overlay);\n    });\n    overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n            document.body.removeChild(overlay);\n        }\n    });\n    document.addEventListener('keydown', handlePreviewKeyDown);\n    function handlePreviewKeyDown(e) {\n        if (e.key === 'Escape') {\n            document.body.removeChild(overlay);\n        }\n    }\n    const deleteBtn = detailsContainer.querySelector('.delete-point-btn');\n    deleteBtn.addEventListener('click', () => {\n        deletePricePoint(point.id);\n        document.body.removeChild(overlay);\n    });\n}\nfunction init3DCardEffect() {\n  const cardContainer = document.getElementById('card3dContainer');\n  if (!cardContainer) return;\n  const card = cardContainer.querySelector('.card');\n  let isInteracting = false;\n  function updateCardPosition(localX, localY) {\n    const w = cardContainer.clientWidth;\n    const h = cardContainer.clientHeight;\n    const centerX = w / 2;\n    const centerY = h / 2;\n    const rotateY = -(localX - centerX) / 10;\n    const rotateX = -(centerY - localY) / 10;\n    card.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n  }\n  cardContainer.addEventListener('mousemove', e => {\n    isInteracting = true;\n    const rect = cardContainer.getBoundingClientRect();\n    updateCardPosition(e.clientX - rect.left, e.clientY - rect.top);\n  });\n  cardContainer.addEventListener('mouseleave', () => {\n    isInteracting = false;\n    card.style.transform = 'none';\n  });\n  cardContainer.addEventListener('touchstart', e => {\n    e.preventDefault();\n    isInteracting = true;\n    const t = e.touches[0];\n    const rect = cardContainer.getBoundingClientRect();\n    updateCardPosition(t.clientX - rect.left, t.clientY - rect.top);\n  }, { passive: false });\n  cardContainer.addEventListener('touchmove', e => {\n    if (!isInteracting) return;\n    e.preventDefault();\n    const t = e.touches[0];\n    const rect = cardContainer.getBoundingClientRect();\n    updateCardPosition(t.clientX - rect.left, t.clientY - rect.top);\n  }, { passive: false });\n  cardContainer.addEventListener('touchend', () => {\n    isInteracting = false;\n    card.style.transform = 'none';\n  });\n}\nfunction closeProductPreview() {\n  logEvent('Podgląd produktu został zamknięty');\n  document.getElementById('productPreviewModal').classList.remove('show');\n  document.removeEventListener('keydown', handlePreviewKeyDown);\n}\nfunction sortProducts() {\n  currentSort = document.getElementById('sortSelect').value;\n  productsCurrentPage = 1;\n  renderProducts(applyAllFilters());\n}\nfunction cleanupGalleryDuplicates() {\n    const uniqueGalleryImages = removeDuplicatesWithGitHubPriority(galleryImages);\n    galleryImages.length = 0;\n    galleryImages.push(...uniqueGalleryImages);\n    const uniqueBackgroundImages = removeDuplicatesWithGitHubPriority(backgroundImages);\n    backgroundImages.length = 0;\n    backgroundImages.push(...uniqueBackgroundImages);\n    saveGallery();\n    saveBackgrounds();\n    renderGallery();\n    renderBackgrounds();\n    showNotification('Usunięto duplikaty w galeriach z priorytetem dla GitHub', 'success');\n}\nfunction isFromGitHub(image) {\n    return image.source === 'github';\n}\nasync function exportData() {\n    logEvent('Rozpoczęcie eksportu danych');\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    try {\n        const zip = new JSZip();\n        \n        const settings = {\n            version: 6,\n            paginationConfig: paginationConfig,\n            selectedBackground: selectedBackgroundId,\n            darkMode: darkMode,\n            soundPermission: soundPermissionGiven,\n            soundAllowed: soundAllowed,\n            currentFilter: currentFilter,\n            currentSort: currentSort,\n            currentSearch: currentSearch,\n            productsCurrentPage: productsCurrentPage,\n            categoriesCurrentPage: categoriesCurrentPage,\n            effectsCurrentPage: effectsCurrentPage,\n            shopsCurrentPage: shopsCurrentPage,\n            currenciesCurrentPage: currenciesCurrentPage,\n            logsCurrentPage: logsCurrentPage,\n            galleryCurrentPage: galleryCurrentPage,\n            backgroundCurrentPage: backgroundCurrentPage,\n            currencyConfig: currencyConfig,\n            visibilitySettings: {\n                showControlsPanel: showControlsPanel,\n                showHamburgerOnDesktop: showHamburgerOnDesktop,\n                showInstructionButton: showInstructionButton,\n                showStatisticsSection: showStatisticsSection,\n                showNotifications: showNotifications,\n                showAdvancedButtons: showAdvancedButtons\n            },\n            appearanceSettings: {\n                panelOpacity: localStorage.getItem('panelOpacity') || 1,\n                backgroundBlur: localStorage.getItem('backgroundBlur') || 0,\n                darkenEffect: localStorage.getItem('darkenEffect') || 0,\n                borderRadius: localStorage.getItem('borderRadius') || 10,\n                borderWidth: localStorage.getItem('borderWidth') || 1,\n                borderColor: localStorage.getItem('borderColor') || '#d1d9e2',\n                customColors: JSON.parse(localStorage.getItem('customColors')) || null,\n                appFont: localStorage.getItem('appFont') || '',\n                animationsEnabled: localStorage.getItem('animationsEnabled') !== 'false'\n            },\n            priceTrendCache: priceTrendCache,\n            exportDate: new Date().toISOString()\n        };\n        zip.file('settings.json', JSON.stringify(settings, null, 2));\n        loader.update(20);\n\n        const productsForExport = products.map(p => {\n            const productCopy = {...p};\n            \n            if (productCopy.image) {\n                const galleryImage = galleryImages.find(img => img.data === productCopy.image && img.source === 'github');\n                if (galleryImage) {\n                    productCopy.imageGitHubName = galleryImage.name;\n                    productCopy.imageSource = 'github';\n                    delete productCopy.image;\n                }\n            }\n            \n            delete productCopy.editing;\n            if (productCopy.image && !productCopy.imageId) {\n            } else if (productCopy.imageId && !productCopy.image) {\n                delete productCopy.image;\n            }\n            return productCopy;\n        });\n        \n        const productsData = JSON.stringify({\n            version: 4,\n            products: productsForExport\n        }, null, 2);\n        zip.file('products.json', productsData);\n\n        const userCategories = filterUserData(categories, defaultCategories, 'name');\n        const categoriesData = JSON.stringify(userCategories, null, 2);\n        zip.file('categories.json', categoriesData);\n\n        const exchangeData = JSON.stringify({\n            rates: exchangeRates,\n            symbols: currencySymbols\n        }, null, 2);\n        zip.file('exchange.json', exchangeData);\n\n        const userShops = shops.filter(shop => \n            !(shop.source === 'github' || (shop.id && !shop.id.toString().startsWith('local')))\n        );\n        const shopsData = JSON.stringify(userShops, null, 2);\n        zip.file('shops.json', shopsData);\n\n        const userEffects = filterUserData(effects, defaultEffects);\n        const effectsData = JSON.stringify(userEffects, null, 2);\n        zip.file('effects.json', effectsData);\n\n        const logsData = JSON.stringify(eventLogs, null, 2);\n        zip.file('logs.json', logsData);\n\n        loader.update(30);\n\n        const allPriceHistory = [];\n        for (const product of products) {\n            try {\n                const history = await priceHistory.getPriceHistory(product.id);\n                allPriceHistory.push({\n                    productId: product.id,\n                    history: history.map(item => ({\n                        date: item.date,\n                        price: item.price,\n                        currency: item.currency,\n                        exchangeRate: item.exchangeRate,\n                        needsHistoricalUpdate: item.needsHistoricalUpdate\n                    }))\n                });\n            } catch (error) {\n            }\n        }\n        zip.file('price_history.json', JSON.stringify(allPriceHistory, null, 2));\n\n        loader.update(40);\n\n        const priceTrendCacheData = JSON.stringify({\n            priceTrendCache: priceTrendCache,\n            cacheExportDate: new Date().toISOString(),\n            cacheEntries: Object.keys(priceTrendCache).length\n        }, null, 2);\n        zip.file('price_trend_cache.json', priceTrendCacheData);\n\n        const imgFolder = zip.folder('images');\n        \n        const productImgFolder = imgFolder.folder('products');\n        for (const product of products) {\n            if (product.image) {\n                const isFromGitHub = galleryImages.some(img => \n                    img.data === product.image && img.source === 'github'\n                );\n                \n                if (!isFromGitHub) {\n                    try {\n                        const base64Data = product.image.split(',')[1];\n                        const fileName = `${product.id}.png`;\n                        productImgFolder.file(fileName, base64Data, {base64: true});\n                    } catch (error) {\n                    }\n                }\n            }\n        }\n\n        loader.update(60);\n\n        const galleryFolder = imgFolder.folder('gallery');\n        const userGalleryImages = galleryImages.filter(img => \n            !img.source || img.source !== 'github'\n        );\n        const uniqueGalleryImages = removeDuplicatesWithGitHubPriority(userGalleryImages);\n        for (const img of uniqueGalleryImages) {\n            try {\n                const base64Data = img.data.split(',')[1];\n                const fileName = `${img.name}.png`;\n                galleryFolder.file(fileName, base64Data, {base64: true});\n                logEvent(`Eksportowano obraz galerii: \"${img.name}\"`);\n            } catch (error) {\n                logEvent('Błąd eksportu obrazu galerii:', img.name, error);\n            }\n        }\n\n        loader.update(80);\n\n        const backgroundFolder = imgFolder.folder('backgrounds');\n        const userBackgroundImages = backgroundImages.filter(bg => \n            !bg.source || bg.source !== 'github'\n        );\n        const uniqueBackgroundImages = removeDuplicatesWithGitHubPriority(userBackgroundImages);\n        for (const bg of uniqueBackgroundImages) {\n            try {\n                const base64Data = bg.data.split(',')[1];\n                const fileName = `${bg.name}.png`;\n                backgroundFolder.file(fileName, base64Data, {base64: true});\n                logEvent(`Eksportowano tło: \"${bg.name}\"`);\n            } catch (error) {\n                logEvent('Błąd eksportu tła:', bg.name, error);\n            }\n        }\n\n        const selectionState = {\n            selectedProducts: selectedProducts,\n            selectedGalleryImages: selectedGalleryImages,\n            selectedBackgroundImages: selectedBackgroundImages,\n            selectedBackgroundId: selectedBackgroundId,\n            selectionMode: selectionMode,\n            gallerySelectionMode: gallerySelectionMode,\n            backgroundSelectionMode: backgroundSelectionMode\n        };\n        zip.file('selection_state.json', JSON.stringify(selectionState, null, 2));\n\n        loader.update(90);\n\n        const content = await zip.generateAsync({ type: 'blob' });\n        const fileName = `collection_export_${new Date().toISOString().replace(/:/g, 'H').replace('T', '_').split('.')[0]}.zip`;\n        \n        if (typeof Android !== 'undefined') {\n            const reader = new FileReader();\n            reader.onload = function() {\n                const base64Data = reader.result.split(',')[1];\n                Android.saveExportFile(fileName, base64Data);\n            };\n            reader.readAsDataURL(content);\n        } else {\n            const url = URL.createObjectURL(content);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = fileName;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n        }\n\n        loader.complete();\n        setTimeout(() => {\n            loader.reset();\n            showNotification('Eksport zakończony pomyślnie', 'success');\n            playNotificationSound('success');\n        }, 500);\n        \n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd eksportu danych: ' + error.message, 'danger');\n    }\n}\nasync function getAllPriceHistory() {\n    const db = await priceHistory.dbPromise;\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction('price_history', 'readonly');\n        const store = tx.objectStore('price_history');\n        const request = store.getAll();\n        request.onsuccess = () => {\n            const data = request.result || [];\n            resolve(data);\n        };\n        request.onerror = () => {\n            reject('Błąd pobierania historii cen');\n        };\n    });\n}\nasync function importData() {\n    logEvent('Rozpoczęcie importu danych');\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    \n    try {\n        if (typeof Android !== 'undefined' && typeof Android.openFileSelector === 'function') {\n            Android.openFileSelector();\n        } else if (typeof importDataFromAndroid === 'function') {\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = '.zip';\n            input.onchange = async function(event) {\n                await processImportFile(event.target.files[0]);\n            };\n            input.click();\n        } else {\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = '.zip';\n            input.onchange = async function(event) {\n                await processImportFile(event.target.files[0]);\n            };\n            input.click();\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd importu danych: ' + error.message, 'danger');\n    }\n}\nfunction initSearch() {\n  const searchInput = document.getElementById('searchInput');\n  if (searchInput) {\n    searchInput.addEventListener('input', function() {\n      searchProducts();\n    });\n  }\n}\nfunction setDarkMode(enabled) {\n    darkMode = enabled;\n    document.body.classList.toggle('dark-mode', darkMode);\n    localStorage.setItem('darkMode', darkMode);\n    \n    if (darkMode) {\n        darkModeIcon.className = 'fas fa-sun';\n    } else {\n        darkModeIcon.className = 'fas fa-moon';\n    }\n    \n    const darkModeToggleSetting = document.getElementById('darkModeToggleSetting');\n    if (darkModeToggleSetting) {\n        darkModeToggleSetting.checked = darkMode;\n    }\n}\nfunction initDarkModeSetting() {\n    const darkModeToggleSetting = document.getElementById('darkModeToggleSetting');\n    if (darkModeToggleSetting) {\n        darkModeToggleSetting.checked = darkMode;\n        darkModeToggleSetting.addEventListener('change', function() {\n            setDarkMode(this.checked);\n        });\n    }\n}\n\nasync function importPriceHistory(historyData) {\n    const db = await priceHistory.dbPromise;\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction('price_history', 'readwrite');\n        const store = tx.objectStore('price_history');\n        const clearRequest = store.clear();\n        clearRequest.onsuccess = () => {\n            const requests = historyData.map(entry => store.add(entry));\n            Promise.all(requests)\n                .then(() => resolve())\n                .catch(error => reject(error));\n        };\n        clearRequest.onerror = (e) => reject(e.target.error);\n    });\n}\ndocument.getElementById('category').addEventListener('change', function() {\n  const effectField = document.getElementById('effectField');\n  const conditionField = document.getElementById('conditionField');\n  const languageField = document.getElementById('languageField');\n  const currentPriceGroup = document.getElementById('currentPriceGroup');\n  const quantityLabel = document.querySelector('label[for=\"quantity\"]');\n  \n  const conditionSelect = document.getElementById('condition');\n  const languageSelect = document.getElementById('language');\n\n  if (this.value === 'Singles') {\n    effectField.style.display = 'block';\n    conditionField.style.display = 'block';\n    if (conditionSelect) conditionSelect.required = true;\n  } else {\n    effectField.style.display = 'none';\n    conditionField.style.display = 'none';\n    if (conditionSelect) conditionSelect.required = false;\n  }\n  \n  if (!['Złoto', 'Akcesoria', 'Inne'].includes(this.value)) {\n    languageField.style.display = 'block';\n    if (languageSelect) languageSelect.required = true;\n  } else {\n    languageField.style.display = 'none';\n    if (languageSelect) languageSelect.required = false;\n  }\n  \n  if (this.value === 'Złoto') {\n    if (currentPriceGroup) currentPriceGroup.style.display = 'none';\n    if (quantityLabel) quantityLabel.textContent = 'Ilość (gram)';\n  } else {\n    if (currentPriceGroup) currentPriceGroup.style.display = 'block';\n    if (quantityLabel) quantityLabel.textContent = 'Ilość';\n  }\n});\nfunction searchProducts() {\n  currentSearch = document.getElementById('searchInput').value.trim();\n  productsCurrentPage = 1;\n  renderProducts(applyAllFilters());\n}\nfunction startDailyPriceUpdate() {\n    addDailyPricePoints();\n    setInterval(addDailyPricePoints, 24 * 60 * 60 * 1000);\n}\nfunction clearSearch() {\n  currentSearch = '';\n  document.getElementById('searchInput').value = '';\n  productsCurrentPage = 1;\n  renderProducts(applyAllFilters());\n  showNotification('Wyszukiwanie wyczyszczone', 'info');\n}\nfunction openExchangeModal() {\n  if (!document.getElementById('currenciesPagination')) {\n    const paginationDiv = document.createElement('div');\n    paginationDiv.id = 'currenciesPagination';\n    paginationDiv.className = 'pagination-container';\n    document.querySelector('.modal-content').appendChild(paginationDiv);\n  }\n  \n  currenciesCurrentPage = 1;\n  renderExchangeRates();\n  document.getElementById('exchangeModal').classList.add('show');\n  \n\n  setTimeout(() => {\n    const modal = document.getElementById('exchangeModal');\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n}\nfunction renderCurrenciesPagination(totalItems) {\n    const paginationContainer = document.getElementById('currenciesPagination');\n    if (!paginationContainer) return;\n    \n    paginationContainer.innerHTML = '';\n    const totalPages = Math.ceil(totalItems / paginationConfig.currenciesPerPage);\n\n    const prevBtn = document.createElement('button');\n    prevBtn.innerHTML = '<i class=\"fas fa-chevron-left\"></i>';\n    prevBtn.disabled = currenciesCurrentPage === 1;\n    prevBtn.addEventListener('click', () => {\n        if (currenciesCurrentPage > 1) {\n            currenciesCurrentPage--;\n            renderExchangeRates();\n        }\n    });\n\n    const nextBtn = document.createElement('button');\n    nextBtn.innerHTML = '<i class=\"fas fa-chevron-right\"></i>';\n    nextBtn.disabled = currenciesCurrentPage === totalPages;\n    nextBtn.addEventListener('click', () => {\n        if (currenciesCurrentPage < totalPages) {\n            currenciesCurrentPage++;\n            renderExchangeRates();\n        }\n    });\n\n    const pageInfo = document.createElement('span');\n    pageInfo.textContent = `Strona ${currenciesCurrentPage} z ${totalPages}`;\n\n    paginationContainer.appendChild(prevBtn);\n    paginationContainer.appendChild(pageInfo);\n    paginationContainer.appendChild(nextBtn);\n}\nfunction createCurrencyItem(code, isBase = false) {\n    const currencyItem = document.createElement('div');\n    currencyItem.className = 'exchange-rate-item';\n    \n    const isNbpCurrency = code !== 'PLN';\n    \n    currencyItem.innerHTML = `\n        <label>1 ${code} =</label>\n        <div class=\"exchange-input-wrapper\">\n            <input type=\"number\" step=\"0.0001\" id=\"${code}\" value=\"${exchangeRates[code]}\" \n                placeholder=\"Wartość w PLN\" required ${isBase || isNbpCurrency ? 'readonly' : ''}>\n            <span>zł</span>\n        </div>\n        ${!isBase && !isNbpCurrency ? `\n        <div class=\"currency-actions\">\n            <button class=\"btn-info\" onclick=\"openCurrencyEdit('${code}')\" title=\"Edytuj walutę\">\n                <i class=\"fas fa-edit\"></i>\n            </button>\n            <button class=\"btn-danger\" onclick=\"deleteCurrency('${code}')\" title=\"Usuń walutę\">\n                <i class=\"fas fa-trash-alt\"></i>\n            </button>\n        </div>\n        ` : `\n        <div class=\"currency-actions\">\n            <span class=\"nbp-badge\" title=\"Waluta z NBP - nieedytowalna\">NBP</span>\n        </div>\n        `}\n    `;\n    \n    return currencyItem;\n}\nfunction renderExchangeRates() {\n    const container = document.getElementById('customCurrencies');\n    container.innerHTML = '';\n    \n    const baseCurrencies = ['PLN', 'USD', 'EUR'];\n    const nbpCurrencies = Object.keys(exchangeRates)\n        .filter(c => c !== 'PLN' && c !== 'USD' && c !== 'EUR' && c !== 'lastUpdated')\n        .sort();\n\n    const allCurrencies = [...baseCurrencies, ...nbpCurrencies];\n    const startIndex = (currenciesCurrentPage - 1) * paginationConfig.currenciesPerPage;\n    const endIndex = Math.min(startIndex + paginationConfig.currenciesPerPage, allCurrencies.length);\n    \n    allCurrencies.slice(startIndex, endIndex).forEach(code => {\n        const currencyItem = createCurrencyItem(code, true);\n        container.appendChild(currencyItem);\n    });\n    \n    renderCurrenciesPagination(allCurrencies.length);\n    addPaginationInfo();\n}\nfunction updateNextUpdateTime() {\n\tconst nextUpdateInfo = document.getElementById('nextUpdateInfo');\n\tif (!nextUpdateInfo) return;\n\tconst lastUpdated = new Date(exchangeRates.lastUpdated);\n\tconst nextUpdate = new Date(lastUpdated.getTime() + 3600000);\n\tnextUpdateInfo.innerHTML = `\n\t\tOstatnia aktualizacja: ${lastUpdated.toLocaleString('pl-PL')}<br>\n\t\tNastępna aktualizacja: ${nextUpdate.toLocaleString('pl-PL')}\n\t`;\n}\nfunction closeExchangeModal() {\n  logEvent('Modal kursów walut został zamknięty');\n  document.getElementById('exchangeModal').classList.remove('show');\n}\nfunction deleteCurrency(code) {\n    logEvent(`Próba usunięcia waluty: ${code}`);\n    const baseCurrencies = ['PLN', 'USD', 'EUR'];\n    const nbpCurrencies = Object.keys(exchangeRates)\n        .filter(c => c !== 'PLN' && c !== 'USD' && c !== 'EUR' && c !== 'lastUpdated');\n    \n    if (baseCurrencies.includes(code) || nbpCurrencies.includes(code)) {\n        showNotification('Nie można usunąć waluty ' + code + ' (dostarczana przez NBP)', 'warning');\n        playNotificationSound('alert');\n        return;\n    }\n    \n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć walutę ${code}?`,\n        function(confirmed) {\n            if (confirmed) {\n                delete exchangeRates[code];\n                delete currencySymbols[code];\n                saveExchangeRates();\n                updateCurrencySelects();\n                openExchangeModal();\n                showNotification(`Usunięto walutę ${code}`, 'success');\n                playNotificationSound('success');\n            }\n        }\n    );\n    \n    if (confirmed) {\n        logEvent(`Usunięto walutę: ${code}`);\n    }\n}\nfunction addNewCurrency() {\n    const code = document.getElementById('newCurrencyCode').value.trim().toUpperCase();\n    logEvent(`Dodawanie nowej waluty: ${code}`);\n\tconst symbol = document.getElementById('newCurrencySymbol').value.trim();\n\tif (!code || code.length !== 3) {\n\t\tshowNotification('Kod waluty musi składać się z 3 liter', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tif (exchangeRates[code]) {\n\t\tshowNotification('Waluta o tym kodzie już istnieje', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tif (!symbol) {\n\t\tshowNotification('Symbol waluty jest wymagany', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\texchangeRates[code] = 1.0;\n\tcurrencySymbols[code] = symbol;\n\tupdateCurrencySelects();\n\tdocument.getElementById('newCurrencyCode').value = '';\n\tdocument.getElementById('newCurrencySymbol').value = '';\n\tsaveExchangeRates();\n\tshowNotification(`Dodano walutę ${code} (${symbol})`, 'success');\n\tplayNotificationSound('success');\n\topenExchangeModal();\n}\nfunction updateCurrencySelects() {\n  const selects = [\n    document.getElementById('currency'),\n    document.getElementById('currentCurrency')\n  ];\n  selects.forEach(select => {\n    if (!select) return;\n    const currentValue = select.value;\n    select.innerHTML = '';\n    for (const [code, symbol] of Object.entries(currencySymbols)) {\n      const option = document.createElement('option');\n      option.value = code;\n      option.textContent = `${code} (${symbol})`;\n      select.appendChild(option);\n    }\n    if (currencySymbols[currentValue]) {\n      select.value = currentValue;\n    } else if (currencySymbols['PLN']) {\n      select.value = 'PLN';\n    }\n  });\n}\nfunction populateConditionAndLanguageSelects() {\n    const conditionSelect = document.getElementById('condition');\n    const languageSelect = document.getElementById('language');\n    \n    if (conditionSelect) {\n        conditionSelect.innerHTML = '<option value=\"\">Wybierz stan karty</option>';\n        CARD_CONDITIONS.forEach(condition => {\n            const option = document.createElement('option');\n            option.value = condition;\n            option.textContent = condition;\n            conditionSelect.appendChild(option);\n        });\n    }\n    \n    if (languageSelect) {\n        languageSelect.innerHTML = '<option value=\"\">Wybierz język</option>';\n        LANGUAGES.forEach(language => {\n            const option = document.createElement('option');\n            option.value = language;\n            option.textContent = language;\n            languageSelect.appendChild(option);\n        });\n    }\n}\nfunction fillEffectSelect() {\n    const effectSelect = document.getElementById('effect');\n    if (!effectSelect) return;\n    \n    const currentValue = effectSelect.value;\n    effectSelect.innerHTML = '<option value=\"\">Wybierz efekt</option>';\n    \n    effects.forEach(effect => {\n        const option = document.createElement('option');\n        option.value = effect;\n        option.textContent = effect;\n        effectSelect.appendChild(option);\n    });\n    \n    if (effects.includes(currentValue)) {\n        effectSelect.value = currentValue;\n    }\n}\ndocument.getElementById('exchangeForm').addEventListener('submit', async function(e) {\n    e.preventDefault();\n    const oldRates = {...exchangeRates};\n    const customInputs = document.querySelectorAll('#customCurrencies input');\n    customInputs.forEach(input => {\n        const code = input.id;\n        exchangeRates[code] = parseFloat(input.value);\n    });\n    saveExchangeRates();\n    let ratesChanged = false;\n    customInputs.forEach(input => {\n        const code = input.id;\n        if (oldRates[code] !== exchangeRates[code]) {\n            ratesChanged = true;\n        }\n    });\n    if (ratesChanged) {\n        setTimeout(async () => {\n            await checkAndUpdatePriceHistoryOnRateChange();\n            if (document.getElementById('productPreviewModal').classList.contains('show') && currentChartProductId) {\n                await renderPriceHistoryChart(currentChartProductId);\n            }\n        }, 1000);\n    }\n    closeExchangeModal();\n\tlogEvent('Zaktualizowano kursy walut');\n    showNotification('Kursy walut zostały zaktualizowane', 'success');\n    playNotificationSound('success');\n    updateSummary();\n    renderProducts(applyAllFilters());\n});\nfunction startExchangeRateMonitoring() {\n    setInterval(async () => {\n        await checkAndUpdatePriceHistoryOnRateChange();\n    }, 3600000);\n}\ndocument.getElementById('year').addEventListener('change', function() {\n\tconst year = parseInt(this.value);\n\tconst currentYear = new Date().getFullYear();\n\tif (isNaN(year)) {\n\t\tthis.setCustomValidity('Rok musi być liczbą');\n\t} else if (year < 2000 || year > currentYear + 1) {\n\t\tthis.setCustomValidity(`Rok musi być między 2000 a ${currentYear + 1}`);\n\t} else {\n\t\tthis.setCustomValidity('');\n\t}\n});\nfunction openInstructionModal() {\n    logEvent('Modal instrukcji został otwarty');\n    document.getElementById('instructionModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('instructionModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nfunction closeInstructionModal() {\n  logEvent('Modal instrukcji został zamknięty');\n  document.getElementById('instructionModal').classList.remove('show');\n}\nfunction selectProducts() {\n    logEvent('Włączanie trybu selekcji produktów');\n\tselectionMode = true;\n\tselectionControls.style.display = 'flex';\n\tselectedProducts = [];\n\trenderProducts(applyAllFilters());\n}\nfunction toggleProductSelection(index, selected) {\n    const productName = products[index].name;\n    logEvent(`${selected ? 'Zaznaczono' : 'Odznaczono'} produkt: ${productName}`);\n\tif (selected) {\n\t\tselectedProducts.push(index);\n\t} else {\n\t\tconst idx = selectedProducts.indexOf(index);\n\t\tif (idx > -1) {\n\t\t\tselectedProducts.splice(idx, 1);\n\t\t}\n\t}\n}\nfunction deleteSelected() {\n    logEvent(`Próba usunięcia ${selectedProducts.length} zaznaczonych produktów`);\n\tif (selectedProducts.length === 0) {\n\t\tshowNotification('Nie zaznaczono żadnych produktów', 'warning');\n\t\tplayNotificationSound('alert');\n\t\treturn;\n\t}\n\tshowConfirmation(\n\t\t'Potwierdzenie usunięcia',\n\t\t`Czy na pewno chcesz usunąć ${selectedProducts.length} zaznaczonych produktów?`,\n\t\tfunction(confirmed) {\n\t\t\tif (confirmed) {\n\t\t\t\tselectedProducts.sort((a, b) => b - a);\n\t\t\t\tselectedProducts.forEach(index => {\n\t\t\t\t\tproducts.splice(index, 1);\n\t\t\t\t});\n\t\t\t\tsaveProducts();\n\t\t\t\tcancelSelection();\n\t\t\t\tshowNotification(`Usunięto ${selectedProducts.length} produktów`, 'success');\n\t\t\t\tplayNotificationSound('success');\n\t\t\t}\n\t\t}\n\t);\n    if (confirmed) {\n        logEvent(`Usunięto ${selectedProducts.length} zaznaczonych produktów`);\n    }\n}\nfunction cancelSelection() {\n  logEvent('Tryb selekcji produktów został wyłączony');\n\tselectionMode = false;\n\tselectionControls.style.display = 'none';\n\tselectedProducts = [];\n\trenderProducts(applyAllFilters());\n}\nfunction calculateCategoryEfficiency() {\n  const now = new Date();\n  const efficiencyData = {};\n  categories.forEach(category => {\n    const catName = category.name;\n    const catProducts = products.filter(p => p.category === catName);\n    if (catProducts.length === 0) return;\n    let totalPurchase = 0;\n    let totalCurrent = 0;\n    let totalDays = 0;\n    let totalProfit = 0;\n    let totalLoss = 0;\n    let productsWithPrice = 0;\n    catProducts.forEach(p => {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      totalPurchase += p.quantity * purchasePLN;\n      if (p.currentPrice !== null && p.currentPrice !== undefined) {\n        const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n        totalCurrent += p.quantity * currentPLN;\n        const diff = (currentPLN - purchasePLN) * p.quantity;\n        if (diff > 0) totalProfit += diff;\n        else if (diff < 0) totalLoss += Math.abs(diff);\n        productsWithPrice++;\n      }\n      const addedDate = new Date(p.dateAdded);\n      const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n      totalDays += daysInStorage;\n    });\n    const diff = totalCurrent - totalPurchase;\n    const diffPercent = totalPurchase > 0 ? (diff / totalPurchase) * 100 : 0;\n    const avgDays = totalDays / catProducts.length;\n    const roi = totalPurchase > 0 ? (diff / totalPurchase) * 100 : 0;\n    efficiencyData[catName] = {\n      totalPurchase,\n      totalCurrent,\n      diff,\n      diffPercent,\n      avgDays,\n      roi,\n      productCount: catProducts.length,\n      productsWithPrice,\n      profit: totalProfit,\n      loss: totalLoss\n    };\n  });\n  return efficiencyData;\n}\nfunction calculateRiskMetrics() {\n    const targetCurrency = currencyConfig.extendedStatsCurrency;\n    \n    let maxLoss = 0;\n    products.forEach(p => {\n        const purchasePLN = convertToPLN(p.price, p.currency);\n        const currentPLN = p.currentPrice ? \n            convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : purchasePLN;\n        const potentialLoss = (purchasePLN - currentPLN) * p.quantity;\n        if (potentialLoss > maxLoss) maxLoss = potentialLoss;\n    });\n\n    const avgReturn = parseFloat(profitPercentage.textContent);\n    const riskFreeRate = 0.05;\n    const volatility = 15;\n    const sharpeRatio = ((avgReturn - riskFreeRate) / volatility).toFixed(2);\n\n    const convertedMaxLoss = convertToCurrency(maxLoss, 'PLN', targetCurrency);\n    \n    document.getElementById('varValue').textContent = formatCurrency(convertedMaxLoss, targetCurrency, true, 'extendedStats');\n    document.getElementById('sharpeRatio').textContent = sharpeRatio;\n    \n    renderDensityChart();\n}\n\nfunction calculateLiquidityMetrics() {\n  const now = new Date();\n  let totalDays = 0;\n  products.forEach(p => {\n    const addedDate = new Date(p.dateAdded);\n    const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n    totalDays += daysInStorage;\n  });\n  const avgDays = products.length > 0 ? Math.floor(totalDays / products.length) : 0;\n  document.getElementById('avgStorageTime').textContent = avgDays + ' dni';\n  const inventoryTurnover = avgDays > 0 ? (365 / avgDays).toFixed(1) : 0;\n  document.getElementById('inventoryTurnover').textContent = inventoryTurnover;\n  renderLiquidityHeatmap();\n}\nfunction renderAdvancedVisualizations() {\n  renderSankeyChart();\n  renderRadarChart();\n  renderTreemap();\n}\nfunction calculatePortfolioMetrics() {\n  let hhi = 0;\n  const categoryValues = {};\n  let totalValue = 0;\n  categories.forEach(cat => {\n    const catProducts = products.filter(p => p.category === cat.name);\n    const catValue = catProducts.reduce((sum, p) => {\n      const currentPLN = p.currentPrice ? \n        convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n        convertToPLN(p.price, p.currency);\n      return sum + (currentPLN * p.quantity);\n    }, 0);\n    categoryValues[cat.name] = catValue;\n    totalValue += catValue;\n  });\n  for (const cat in categoryValues) {\n    const marketShare = (categoryValues[cat] / totalValue) * 100;\n    hhi += marketShare * marketShare;\n  }\n  document.getElementById('diversificationIndex').textContent = hhi.toFixed(0);\n  renderEfficientFrontier();\n}\nfunction calculateForecasts() {\n  const growthRates = [];\n  const now = new Date();\n  products.forEach(p => {\n    if (p.priceHistory && p.priceHistory.length > 1) {\n      const firstPrice = convertToPLN(p.priceHistory[0].price, p.priceHistory[0].currency);\n      const lastPrice = convertToPLN(p.priceHistory[p.priceHistory.length - 1].price, \n                                    p.priceHistory[p.priceHistory.length - 1].currency);\n      const months = (new Date(p.priceHistory[p.priceHistory.length - 1].date) - \n                     new Date(p.priceHistory[0].date)) / (1000 * 60 * 60 * 24 * 30);\n      if (months > 0) {\n        const monthlyGrowth = Math.pow(lastPrice / firstPrice, 1/months) - 1;\n        growthRates.push(monthlyGrowth);\n      }\n    }\n  });\n  const avgGrowth = growthRates.length > 0 ? \n    growthRates.reduce((sum, rate) => sum + rate, 0) / growthRates.length : \n    0.01;\n  const currentValue = parseFloat(document.getElementById('currentValue').textContent.replace(' zł', '').replace(',', ''));\n  const sixMonthForecast = currentValue * Math.pow(1 + avgGrowth, 6);\n  document.getElementById('sixMonthForecast').textContent = sixMonthForecast.toFixed(2).replace('.', ',') + ' zł';\n  renderForecastChart(avgGrowth);\n}\nfunction generateCorrelationMatrix() {\n  const matrixContainer = document.getElementById('correlationMatrix');\n  matrixContainer.innerHTML = '';\n  const categoriesList = categories.map(c => c.name);\n  const matrix = [];\n  categoriesList.forEach((cat1, i) => {\n    matrix[i] = [];\n    categoriesList.forEach((cat2, j) => {\n      if (i === j) {\n        matrix[i][j] = 1.0;\n      } else {\n        matrix[i][j] = (Math.random() * 2 - 1).toFixed(2);\n      }\n    });\n  });\n  const headerRow = document.createElement('div');\n  headerRow.className = 'matrix-row';\n  headerRow.innerHTML = '<div class=\"matrix-cell\"></div>';\n  categoriesList.forEach(cat => {\n    headerRow.innerHTML += `<div class=\"matrix-cell header\">${cat}</div>`;\n  });\n  matrixContainer.appendChild(headerRow);\n  categoriesList.forEach((cat1, i) => {\n    const row = document.createElement('div');\n    row.className = 'matrix-row';\n    row.innerHTML = `<div class=\"matrix-cell header\">${cat1}</div>`;\n    categoriesList.forEach((cat2, j) => {\n      const correlation = matrix[i][j];\n      const absValue = Math.abs(correlation);\n      const hue = correlation > 0 ? 120 : 0;\n      const lightness = 90 - (absValue * 40);\n      const bgColor = `hsl(${hue}, 80%, ${lightness}%)`;\n      row.innerHTML += `\n        <div class=\"matrix-cell\" style=\"background-color: ${bgColor};\">\n          ${correlation}\n        </div>\n      `;\n    });\n    matrixContainer.appendChild(row);\n  });\n}\nfunction renderDensityChart() {\n  const ctx = document.getElementById('densityChart').getContext('2d');\n  const returns = [];\n  products.forEach(p => {\n    if (p.currentPrice) {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n      const returnRate = ((currentPLN - purchasePLN) / purchasePLN) * 100;\n      returns.push(returnRate);\n    }\n  });\n  const bins = {};\n  returns.forEach(ret => {\n    const bin = Math.floor(ret / 10) * 10;\n    bins[bin] = (bins[bin] || 0) + 1;\n  });\n  const labels = [];\n  const data = [];\n  for (let i = -50; i <= 100; i += 10) {\n    labels.push(`${i}% - ${i+10}%`);\n    data.push(bins[i] || 0);\n  }\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Liczba produktów',\n        data: data,\n        backgroundColor: 'rgba(77, 182, 172, 0.7)'\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        title: {\n          display: true,\n          text: 'Rozkład stóp zwrotu'\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Liczba produktów'\n          }\n        },\n        x: {\n          title: {\n            display: true,\n            text: 'Stopa zwrotu'\n          }\n        }\n      }\n    }\n  });\n}\nfunction renderLiquidityHeatmap() {\n  const ctx = document.getElementById('liquidityHeatmap').getContext('2d');\n  const now = new Date();\n  const liquidityData = [];\n  products.forEach(p => {\n    const addedDate = new Date(p.dateAdded);\n    const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n    const currentPLN = p.currentPrice ? \n      convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n      convertToPLN(p.price, p.currency);\n    const value = currentPLN * p.quantity;\n    \n    liquidityData.push({\n      x: daysInStorage,\n      y: value,\n      r: Math.log(value + 1) * 2\n    });\n  });\n  new Chart(ctx, {\n    type: 'bubble',\n    data: {\n      datasets: [{\n        label: 'Płynność produktów',\n        data: liquidityData,\n        backgroundColor: 'rgba(77, 182, 172, 0.6)'\n      }]\n    },\n    options: {\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: 'Czas magazynowania (dni)'\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: 'Wartość produktu (zł)'\n          }\n        }\n      }\n    }\n  });\n}\nfunction renderSankeyChart() {\n  const ctx = document.getElementById('sankeyChart').getContext('2d');\n  const categoryProfit = {};\n  const categoryLoss = {};\n  products.forEach(p => {\n    if (p.currentPrice) {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n      const diff = (currentPLN - purchasePLN) * p.quantity;\n      if (diff > 0) {\n        categoryProfit[p.category] = (categoryProfit[p.category] || 0) + diff;\n      } else {\n        categoryLoss[p.category] = (categoryLoss[p.category] || 0) + Math.abs(diff);\n      }\n    }\n  });\n  const nodes = [];\n  const links = [];\n  Object.keys(categoryProfit).forEach(category => {\n    nodes.push({name: category});\n  });\n  nodes.push({name: 'Zysk'});\n  nodes.push({name: 'Strata'});\n  Object.keys(categoryProfit).forEach(category => {\n    const categoryIndex = nodes.findIndex(n => n.name === category);\n    const profitIndex = nodes.findIndex(n => n.name === 'Zysk');\n    \n    links.push({\n      source: categoryIndex,\n      target: profitIndex,\n      value: categoryProfit[category]\n    });\n  });\n  \n  Object.keys(categoryLoss).forEach(category => {\n    const categoryIndex = nodes.findIndex(n => n.name === category);\n    const lossIndex = nodes.findIndex(n => n.name === 'Strata');\n    \n    links.push({\n      source: categoryIndex,\n      target: lossIndex,\n      value: categoryLoss[category]\n    });\n  });\n  new Chart(ctx, {\n    type: 'sankey',\n    data: {\n      datasets: [{\n        data: nodes,\n        links: links,\n        colorFrom: (c) => getCategoryColor(nodes[c.dataset.data[c.dataIndex].name].name).bg,\n        colorTo: (c) => getCategoryColor(nodes[c.dataset.data[c.dataIndex].name].name).bg,\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        title: {\n          display: true,\n          text: 'Przepływ wartości między kategoriami'\n        }\n      }\n    }\n  });\n}\nfunction renderRadarChart() {\n  const ctx = document.getElementById('radarChart').getContext('2d');\n  \n  new Chart(ctx, {\n    type: 'radar',\n    data: {\n      labels: ['Rentowność', 'Płynność', 'Ryzyko', 'Dywersyfikacja', 'Wzrost'],\n      datasets: [{\n        label: 'Parametry portfela',\n        data: [85, 70, 45, 65, 75],\n        fill: true,\n        backgroundColor: 'rgba(77, 182, 172, 0.2)',\n        borderColor: 'rgb(77, 182, 172)',\n        pointBackgroundColor: 'rgb(77, 182, 172)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgb(77, 182, 172)'\n      }]\n    },\n    options: {\n      scales: {\n        r: {\n          angleLines: {\n            display: true\n          },\n          suggestedMin: 0,\n          suggestedMax: 100\n        }\n      }\n    }\n  });\n}\nfunction renderTreemap() {\n  const ctx = document.getElementById('treemapCanvas').getContext('2d');\n  const treeData = {\n    name: 'Magazyn',\n    value: parseFloat(document.getElementById('currentValue').textContent.replace(' zł', '').replace(',', '')),\n    children: []\n  };\n  categories.forEach(category => {\n    const categoryProducts = products.filter(p => p.category === category.name);\n    const categoryValue = categoryProducts.reduce((sum, p) => {\n      const currentPLN = p.currentPrice ? \n        convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n        convertToPLN(p.price, p.currency);\n      return sum + (currentPLN * p.quantity);\n    }, 0);\n    \n    if (categoryValue > 0) {\n      const categoryNode = {\n        name: category.name,\n        value: categoryValue,\n        children: []\n      };\n      categoryProducts.forEach(p => {\n        const currentPLN = p.currentPrice ? \n          convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n          convertToPLN(p.price, p.currency);\n        const productValue = currentPLN * p.quantity;\n        \n        if (productValue > categoryValue * 0.05) {\n          categoryNode.children.push({\n            name: p.name,\n            value: productValue\n          });\n        }\n      });\n      \n      treeData.children.push(categoryNode);\n    }\n  });\n  new Chart(ctx, {\n    type: 'treemap',\n    data: {\n      datasets: [{\n        tree: treeData,\n        key: 'value',\n        labels: {\n          display: true,\n          formatter: (ctx) => ctx.raw.name\n        },\n        backgroundColor: (ctx) => {\n          if (ctx.type === 'data') {\n            return getCategoryColor(ctx.raw.name).bg || '#4DB6AC';\n          }\n          return '#f0f0f0';\n        },\n        color: (ctx) => {\n          if (ctx.type === 'data') {\n            return getCategoryColor(ctx.raw.name).text || '#333';\n          }\n          return '#333';\n        },\n        font: {\n          size: (ctx) => ctx.type === 'data' ? 12 : 14\n        }\n      }]\n    },\n    options: {\n      plugins: {\n        title: {\n          display: true,\n          text: 'Struktura wartości produktów'\n        },\n        tooltip: {\n          callbacks: {\n            title: (items) => items[0].raw.name,\n            label: (item) => `Wartość: ${item.raw.value.toFixed(2)} zł`\n          }\n        }\n      }\n    }\n  });\n}\nfunction renderEfficientFrontier() {\n  const ctx = document.getElementById('efficientFrontierChart').getContext('2d');\n  const portfolios = [];\n  for (let i = 0; i < 20; i++) {\n    portfolios.push({\n      risk: (Math.random() * 15 + 5).toFixed(2),\n      return: (Math.random() * 10 + 5).toFixed(2)\n    });\n  }\n  \n  portfolios.sort((a, b) => a.risk - b.risk);\n  \n  new Chart(ctx, {\n    type: 'scatter',\n    data: {\n      datasets: [{\n        label: 'Portfele',\n        data: portfolios,\n        backgroundColor: 'rgba(77, 182, 172, 0.6)'\n      }, {\n        label: 'Efektywna granica',\n        data: portfolios.filter((p, i) => i % 3 === 0),\n        type: 'line',\n        borderColor: '#FF9800',\n        backgroundColor: 'rgba(255, 152, 0, 0.2)',\n        fill: true,\n        pointRadius: 0\n      }]\n    },\n    options: {\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: 'Ryzyko (%)'\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: 'Oczekiwany zwrot (%)'\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction renderForecastChart() {\n  const ctx = document.getElementById('forecastChart').getContext('2d');\n  const currentValue = parseFloat(document.getElementById('currentValue').textContent);\n\n  const months = ['Bieżący', 'M1', 'M2', 'M3', 'M4', 'M5', 'M6'];\n  const forecastData = [currentValue];\n  \n  for (let i = 1; i < 7; i++) {\n    forecastData.push(forecastData[i-1] * (1 + (0.05 + Math.random() * 0.05)));\n  }\n  \n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: months,\n      datasets: [{\n        label: 'Prognozowana wartość',\n        data: forecastData,\n        borderColor: '#4DB6AC',\n        backgroundColor: 'rgba(77, 182, 172, 0.1)',\n        borderWidth: 3,\n        tension: 0.3,\n        fill: true\n      }]\n    },\n    options: {\n      scales: {\n        y: {\n          title: {\n            display: true,\n            text: 'Wartość (zł)'\n          }\n        }\n      }\n    }\n  });\n}\nasync function runMonteCarlo() {\n    const targetCurrency = currencyConfig.extendedStatsCurrency;\n    \n    const resultsContainer = document.getElementById('monteCarloResults');\n    resultsContainer.innerHTML = '<div class=\"simulation-loading\"><i class=\"fas fa-spinner fa-spin\"></i> Trwa symulacja...</div>';\n\n    try {\n        const returns = [];\n        const now = new Date();\n        const historyPromises = products.map(p => priceHistory.getPriceHistory(p.id));\n        const allHistories = await Promise.all(historyPromises);\n        \n        for (let i = 0; i < products.length; i++) {\n            const history = allHistories[i];\n            if (history.length < 2) continue;\n            \n            const firstEntry = history[0];\n            const lastEntry = history[history.length - 1];\n            const firstDate = new Date(firstEntry.date);\n            const lastDate = new Date(lastEntry.date);\n            const yearsDiff = (lastDate - firstDate) / (1000 * 60 * 60 * 24 * 365.25);\n            \n            if (yearsDiff < 0.08) continue;\n            \n            const firstPrice = convertToPLN(firstEntry.price, firstEntry.currency);\n            const lastPrice = convertToPLN(lastEntry.price, lastEntry.currency);\n            \n            if (firstPrice <= 0 || lastPrice <= 0) continue;\n            if (firstDate > lastDate) continue;\n            \n            const logReturn = Math.log(lastPrice / firstPrice);\n            const annualReturn = logReturn / yearsDiff;\n            \n            if (Math.abs(annualReturn) < 1) {\n                returns.push(annualReturn);\n            }\n        }\n        \n        let avgReturn = 0.05;\n        let stdDev = 0.15;\n        \n        if (returns.length > 0) {\n            returns.sort((a, b) => a - b);\n            const trimCount = Math.floor(returns.length * 0.1);\n            const trimmedReturns = returns.slice(trimCount, returns.length - trimCount);\n            \n            avgReturn = trimmedReturns.reduce((sum, r) => sum + r, 0) / trimmedReturns.length;\n            \n            if (trimmedReturns.length > 1) {\n                const squaredDiffs = trimmedReturns.map(r => Math.pow(r - avgReturn, 2));\n                stdDev = Math.sqrt(squaredDiffs.reduce((sum, sd) => sum + sd, 0) / (trimmedReturns.length - 1));\n            }\n            \n            avgReturn = Math.max(Math.min(avgReturn, 0.5), -0.5);\n            stdDev = Math.min(stdDev, 0.5);\n        }\n        \n        const currentValue = parseFloat(\n            document.getElementById('currentValue').textContent\n                .replace(' zł', '')\n                .replace(/\\s/g, '')\n                .replace(',', '.')\n        );\n        \n        const years = [1, 3, 5, 10];\n        let scenariosHTML = '';\n        \n        years.forEach(year => {\n            const simulations = [];\n            for (let i = 0; i < 1000; i++) {\n                let portfolioValue = currentValue;\n                for (let y = 0; y < year; y++) {\n                    const growth = avgReturn + stdDev * gaussianRandom();\n                    portfolioValue *= (1 + growth);\n                }\n                simulations.push(portfolioValue);\n            }\n            simulations.sort((a, b) => a - b);\n            const p10 = simulations[100];\n            const median = simulations[500];\n            const p90 = simulations[900];\n            const convertedP10 = convertToCurrency(p10, 'PLN', targetCurrency);\n            const convertedMedian = convertToCurrency(median, 'PLN', targetCurrency);\n            const convertedP90 = convertToCurrency(p90, 'PLN', targetCurrency);\n            \n            scenariosHTML += `\n                <div class=\"simulation-scenario\">\n                    <span>Po ${year} ${year === 1 ? 'roku' : 'latach'}:</span>\n                    <div class=\"simulation-range\">\n                        <span class=\"value-min\">${formatCurrency(convertedP10, targetCurrency, true, 'extendedStats')}</span>\n                        <span class=\"value-median\">${formatCurrency(convertedMedian, targetCurrency, true, 'extendedStats')}</span>\n                        <span class=\"value-max\">${formatCurrency(convertedP90, targetCurrency, true, 'extendedStats')}</span>\n                    </div>\n                    <div class=\"simulation-bar\">\n                        <div class=\"simulation-range-bar\" style=\"width: 80%; left: 10%;\"></div>\n                    </div>\n                    <div class=\"simulation-labels\">\n                        <span>10%</span>\n                        <span>Mediana</span>\n                        <span>90%</span>\n                    </div>\n                </div>\n            `;\n        });\n        \n        const convertedCurrentValue = convertToCurrency(currentValue, 'PLN', targetCurrency);\n        \n        resultsContainer.innerHTML = `\n            <h4>Symulacja Monte Carlo (${returns.length}/${products.length} produktów)</h4>\n            ${scenariosHTML}\n            <div class=\"simulation-note\">\n                Średni zwrot: ${(avgReturn * 100).toFixed(2)}% | \n                Ryzyko: ${(stdDev * 100).toFixed(2)}% |\n                Wartość początkowa: ${formatCurrency(convertedCurrentValue, targetCurrency, true, 'extendedStats')}\n            </div>\n        `;\n        \n    } catch (error) {\n        resultsContainer.innerHTML = '<div class=\"error\">Błąd podczas symulacji</div>';\n    }\n}\nfunction formatNumber(value) {\n    if (isNaN(value)) return \"0 zł\";\n    if (value < 1000) return value.toFixed(2) + \" zł\";\n    if (value < 1000000) return (value/1000).toFixed(1) + \" tys. zł\";\n    return (value/1000000).toFixed(1) + \" mln zł\";\n}\nfunction gaussianRandom() {\n    let u = 0, v = 0;\n    while(u === 0) u = Math.random();\n    while(v === 0) v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n}\nfunction showExtendedStats() {\n    const modal = document.getElementById('statsModal');\n    const content = document.getElementById('extendedStatsContent');\n    const targetCurrency = currencyConfig.extendedStatsCurrency;\n\n    let totalValue = 0;\n    let purchaseValue = 0;\n    let currentValue = 0;\n    let profitValue = 0;\n    let lossValue = 0;\n    let productsWithCurrentPrice = 0;\n    let profitProducts = 0;\n    let lossProducts = 0;\n    let neutralProducts = 0;\n    const valueByCurrency = {};\n    const valueByYear = {};\n    const valueByCategory = {};\n    const profitDistribution = {\n        highProfit: 0,\n        mediumProfit: 0,\n        lowProfit: 0,\n        noChange: 0,\n        lowLoss: 0,\n        mediumLoss: 0,\n        highLoss: 0\n    };\n\n    products.forEach(p => {\n        const purchasePLN = convertToPLN(p.price, p.currency);\n        const totalPurchase = p.quantity * purchasePLN;\n        const currentPrice = p.currentPrice !== null && p.currentPrice !== undefined ? \n            convertToPLN(p.currentPrice, p.currentCurrency || p.currency) : \n            purchasePLN;\n        const totalCurrent = p.quantity * currentPrice;\n\n        totalValue += totalCurrent;\n        purchaseValue += totalPurchase;\n        currentValue += totalCurrent;\n\n        if (!valueByCurrency[p.currency]) {\n            valueByCurrency[p.currency] = 0;\n        }\n        valueByCurrency[p.currency] += totalPurchase;\n\n        if (!valueByYear[p.year]) {\n            valueByYear[p.year] = 0;\n        }\n        valueByYear[p.year] += totalPurchase;\n\n        if (!valueByCategory[p.category]) {\n            valueByCategory[p.category] = 0;\n        }\n        valueByCategory[p.category] += totalPurchase;\n\n        if (p.currentPrice !== null && p.currentPrice !== undefined) {\n            productsWithCurrentPrice++;\n            const diff = (currentPrice - purchasePLN) * p.quantity;\n            if (diff > 0) {\n                profitValue += diff;\n                profitProducts++;\n                const profitPercent = (diff / (purchasePLN * p.quantity)) * 100;\n                if (profitPercent > 50) profitDistribution.highProfit++;\n                else if (profitPercent > 20) profitDistribution.mediumProfit++;\n                else profitDistribution.lowProfit++;\n            } else if (diff < 0) {\n                lossValue += Math.abs(diff);\n                lossProducts++;\n                const lossPercent = (Math.abs(diff) / (purchasePLN * p.quantity)) * 100;\n                if (lossPercent > 50) profitDistribution.highLoss++;\n                else if (lossPercent > 20) profitDistribution.mediumLoss++;\n                else profitDistribution.lowLoss++;\n            } else {\n                neutralProducts++;\n                profitDistribution.noChange++;\n            }\n        }\n    });\n\n    const diff = currentValue - purchaseValue;\n\n    const topProfitValue = [];\n    const topLossValue = [];\n    const topProfitPercent = [];\n    const topLossPercent = [];\n\n    products.forEach(p => {\n        if (p.currentPrice !== null && p.currentPrice !== undefined) {\n            const purchasePLN = convertToPLN(p.price, p.currency);\n            const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n            const diff = (currentPLN - purchasePLN) * p.quantity;\n            const diffPercent = purchasePLN > 0 ? ((currentPLN - purchasePLN) / purchasePLN) * 100 : 0;\n\n            if (diff > 0) {\n                topProfitValue.push({...p, diff});\n                topProfitPercent.push({...p, diffPercent});\n            } else if (diff < 0) {\n                topLossValue.push({...p, diff: Math.abs(diff)});\n                topLossPercent.push({...p, diffPercent: Math.abs(diffPercent)});\n            }\n        }\n    });\n\n    topProfitValue.sort((a, b) => b.diff - a.diff).splice(5);\n    topLossValue.sort((a, b) => b.diff - a.diff).splice(5);\n    topProfitPercent.sort((a, b) => b.diffPercent - a.diffPercent).splice(10);\n    topLossPercent.sort((a, b) => b.diffPercent - a.diffPercent).splice(10);\n\n    const productsByCategory = {};\n    products.forEach(p => {\n        productsByCategory[p.category] = (productsByCategory[p.category] || 0) + 1;\n    });\n\n    const now = new Date();\n    let totalDays = 0;\n    const oldestProducts = [];\n    products.forEach(p => {\n        const addedDate = new Date(p.dateAdded);\n        const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n        totalDays += daysInStorage;\n        oldestProducts.push({...p, days: daysInStorage});\n    });\n\n    const avgDays = products.length > 0 ? Math.floor(totalDays / products.length) : 0;\n    const avgYears = (avgDays / 365).toFixed(1);\n\n    let totalPriceRatio = 0;\n    let productsWithPrices = 0;\n    const missingPrices = [];\n    const categoryPrices = {};\n\n    products.forEach(p => {\n        if (p.currentPrice !== null && p.currentPrice !== undefined) {\n            const purchasePLN = convertToPLN(p.price, p.currency);\n            const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n            const ratio = (currentPLN / purchasePLN) * 100;\n            totalPriceRatio += ratio;\n            productsWithPrices++;\n\n            if (!categoryPrices[p.category]) {\n                categoryPrices[p.category] = { totalPurchase: 0, totalCurrent: 0, count: 0 };\n            }\n            categoryPrices[p.category].totalPurchase += purchasePLN;\n            categoryPrices[p.category].totalCurrent += currentPLN;\n            categoryPrices[p.category].count++;\n        } else {\n            missingPrices.push(p);\n        }\n    });\n\n    const avgPriceRatio = productsWithPrices > 0 ? (totalPriceRatio / productsWithPrices).toFixed(1) : 0;\n\n    content.innerHTML = `\n        <div class=\"extended-stats-grid\">\n            <div class=\"currency-info\">\n                <h3><i class=\"fas fa-coins\"></i> Podstawowe informacje</h3>\n                <div class=\"currency-info-item\">\n                    <span>Wartość zakupu produktów:</span>\n                    <span class=\"currency-value\">${formatCurrency(purchaseValue, 'PLN', true, 'extendedStats')}</span>\n                </div>\n                <div class=\"currency-info-item\">\n                    <span>Aktualna wartość całego magazynu:</span>\n                    <span class=\"currency-value\">${formatCurrency(currentValue, 'PLN', true, 'extendedStats')}</span>\n                </div>\n                <div class=\"currency-info-item\">\n                    <span>Różnica wartości między aktualną ceną a tym za ile zakupiłem:</span>\n                    <span class=\"currency-value ${diff > 0 ? 'profit' : diff < 0 ? 'loss' : ''}\">\n                        ${formatCurrency(diff, 'PLN', true, 'extendedStats')}\n                    </span>\n                </div>\n                <div class=\"currency-info-item\">\n                    <span>Ilość produktów:</span>\n                    <span class=\"currency-value\">${products.length}</span>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-tags\"></i> Rozkład wartości według kategorii (${getCurrencySymbol(targetCurrency)})</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"categoryChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-coins\"></i> Rozkład wartości według waluty zakupu</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"currencyChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-calendar-alt\"></i> Wartość według roku (${getCurrencySymbol(targetCurrency)})</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"yearChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-chart-pie\"></i> Rozkład zysków i strat</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"profitLossChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-tags\"></i> Liczba produktów w kategoriach</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"productsByCategoryChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <h3 class=\"chart-title\"><i class=\"fas fa-chart-bar\"></i> Porównanie wartości (${getCurrencySymbol(targetCurrency)})</h3>\n                <div class=\"chart-container\">\n                    <canvas id=\"valueComparisonChart\"></canvas>\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <div class=\"avg-storage-header\">\n                    <i class=\"fas fa-clock\"></i> Średni czas w magazynie\n                </div>\n                <div class=\"avg-storage-value\">${avgYears} lat</div>\n                <h4>Najstarsze produkty:</h4>\n                <div class=\"extended-list\" id=\"oldestProducts\">\n                    ${oldestProducts\n                        .sort((a, b) => b.days - a.days)\n                        .slice(0, 5)\n                        .map(p => `\n                            <div class=\"extended-list-item\">\n                                <span class=\"extended-list-name\">${p.name}</span>\n                                <span>${(p.days/365).toFixed(1)} lat</span>\n                            </div>\n                        `).join('')}\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <div class=\"avg-storage-header\">\n                    <i class=\"fas fa-money-bill-wave\"></i> Analiza cen\n                </div>\n                <div class=\"avg-storage-value\">${avgPriceRatio}%</div>\n                <h4>Średnia cena w kategoriach:</h4>\n                <div class=\"extended-list\" id=\"categoryPrices\">\n                    ${Object.entries(categoryPrices)\n                        .map(([category, data]) => {\n                            const avgPurchaseVal = data.totalPurchase / data.count;\n                            const avgCurrentVal = data.totalCurrent / data.count;\n                            const ratio = ((avgCurrentVal / avgPurchaseVal) * 100).toFixed(1);\n                            return `\n                                <div class=\"extended-list-item\">\n                                    <span class=\"extended-list-name\">${category}</span>\n                                    <span>${formatCurrency(avgPurchaseVal, 'PLN', true, 'extendedStats')} → ${formatCurrency(avgCurrentVal, 'PLN', true, 'extendedStats')} (${ratio}%)</span>\n                                </div>\n                            `;\n                        }).join('')}\n                </div>\n            </div>\n\n            <div class=\"chart-box\">\n                <div class=\"avg-storage-header\">\n                    <i class=\"fas fa-exclamation-triangle\"></i> Brakujące ceny\n                </div>\n                <div class=\"extended-stat-value\">${missingPrices.length}</div>\n                <h4>Produkty bez aktualnej ceny:</h4>\n                <div class=\"extended-list\" id=\"missingPricesList\">\n                    ${missingPrices\n                        .slice(0, 5)\n                        .map(p => `\n                            <div class=\"extended-list-item\">\n                                <span class=\"extended-list-name\">${p.name}</span>\n                                <span>${p.category}</span>\n                            </div>\n                        `).join('')}\n                </div>\n            </div>\n\n            <div class=\"table-box\">\n                <h3><i class=\"fas fa-arrow-up\"></i> Największe zyski (wartość)</h3>\n                <table class=\"stat-table\">\n                    <thead>\n                        <tr>\n                            <th>Produkt</th>\n                            <th>Zysk (${getCurrencySymbol(targetCurrency)})</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${topProfitValue.map(p => `\n                            <tr>\n                                <td>${p.name}</td>\n                                <td class=\"profit\">${formatCurrency(p.diff, 'PLN', true, 'extendedStats')}</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n\n            <div class=\"table-box\">\n                <h3><i class=\"fas fa-arrow-down\"></i> Największe straty (wartość)</h3>\n                <table class=\"stat-table\">\n                    <thead>\n                        <tr>\n                            <th>Produkt</th>\n                            <th>Strata (${getCurrencySymbol(targetCurrency)})</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${topLossValue.map(p => `\n                            <tr>\n                                <td>${p.name}</td>\n                                <td class=\"loss\">${formatCurrency(p.diff, 'PLN', true, 'extendedStats')}</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n\n            <div class=\"table-box\">\n                <h3><i class=\"fas fa-percentage\"></i> Największe zyski (%)</h3>\n                <table class=\"stat-table\">\n                    <thead>\n                        <tr>\n                            <th>Produkt</th>\n                            <th>Zysk (%)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${topProfitPercent.map(p => `\n                            <tr>\n                                <td>${p.name}</td>\n                                <td class=\"profit\">+${p.diffPercent.toFixed(2).replace('.', ',')}%</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n\n            <div class=\"table-box\">\n                <h3><i class=\"fas fa-percentage\"></i> Największe straty (%)</h3>\n                <table class=\"stat-table\">\n                    <thead>\n                        <tr>\n                            <th>Produkt</th>\n                            <th>Strata (%)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${topLossPercent.map(p => `\n                            <tr>\n                                <td>${p.name}</td>\n                                <td class=\"loss\">-${p.diffPercent.toFixed(2).replace('.', ',')}%</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    `;\n\n    const categoryEfficiency = calculateCategoryEfficiency();\n    content.innerHTML += `\n        <div class=\"chart-box efficiency-box\" style=\"height:auto;\">\n            <h3 class=\"chart-title\"><i class=\"fas fa-tachometer-alt\"></i> Efektywność kategorii</h3>\n            <div class=\"efficiency-grid\">\n                ${Object.entries(categoryEfficiency).map(([category, data]) => `\n                    <div class=\"efficiency-category\">\n                        <div class=\"efficiency-header\" style=\"background: ${getCategoryColor(category).bg}; color: ${getCategoryColor(category).text}\">\n                            ${category}\n                        </div>\n                        <div class=\"efficiency-stats\">\n                            <div class=\"efficiency-stat\">\n                                <span>Produkty:</span>\n                                <span>${data.productCount}</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>Wartość zakupu:</span>\n                                <span>${formatCurrency(data.totalPurchase, 'PLN', true, 'extendedStats')}</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>Aktualna wartość:</span>\n                                <span>${formatCurrency(data.totalCurrent, 'PLN', true, 'extendedStats')}</span>\n                            </div>\n                            <div class=\"efficiency-stat ${data.diff > 0 ? 'profit' : data.diff < 0 ? 'loss' : ''}\">\n                                <span>Różnica:</span>\n                                <span>${formatCurrency(data.diff, 'PLN', true, 'extendedStats')} (${data.diffPercent.toFixed(2)}%)</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>ROI:</span>\n                                <span>${data.roi.toFixed(2)}%</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>Śr. czas magazynowania:</span>\n                                <span>${(data.avgDays / 365).toFixed(1)} lat</span>\n                            </div>\n                            <div class=\"efficiency-stat\">\n                                <span>Produkty z ceną:</span>\n                                <span>${data.productsWithPrice}/${data.productCount}</span>\n                            </div>\n                            <div class=\"efficiency-stat profit\">\n                                <span>Zysk:</span>\n                                <span>${formatCurrency(data.profit, 'PLN', true, 'extendedStats')}</span>\n                            </div>\n                            <div class=\"efficiency-stat loss\">\n                                <span>Strata:</span>\n                                <span>${formatCurrency(data.loss, 'PLN', true, 'extendedStats')}</span>\n                            </div>\n                        </div>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n\n        <div class=\"stats-section\">\n            <h3><i class=\"fas fa-shield-alt\"></i> Analiza Ryzyka Inwestycji</h3>\n            <div class=\"risk-analysis\">\n                <div class=\"risk-metric\">\n                    <h4>Value at Risk (VaR)</h4>\n                    <div class=\"metric-value\" id=\"varValue\">0 ${getCurrencySymbol(targetCurrency)}</div>\n                    <p>Maksymalna potencjalna strata w ciągu 30 dni</p>\n                </div>\n                <div class=\"risk-metric\">\n                    <h4>Współczynnik Sharpe'a</h4>\n                    <div class=\"metric-value\" id=\"sharpeRatio\">0.0</div>\n                    <p>Stosunek zysku do ryzyka</p>\n                </div>\n                <div class=\"chart-container\">\n                    <canvas id=\"densityChart\"></canvas>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"stats-section\">\n            <h3><i class=\"fas fa-tachometer-alt\"></i> Analiza Płynności</h3>\n            <div class=\"liquidity-metric\">\n                <h4>Średni czas magazynowania</h4>\n                <div class=\"metric-value\" id=\"avgStorageTime\">0 dni</div>\n            </div>\n        </div>\n\n        <div class=\"stats-section\">\n            <h3><i class=\"fas fa-crystal-ball\"></i> Prognozowanie</h3>\n            <div class=\"forecasting\">\n                <div class=\"forecast-metric\">\n                    <h4>Prognozowana wartość za 6 miesięcy</h4>\n                    <div class=\"metric-value\" id=\"sixMonthForecast\">0 ${getCurrencySymbol(targetCurrency)}</div>\n                </div>\n                <div class=\"simulation-controls\">\n                    <button class=\"btn-info\" onclick=\"runMonteCarlo()\">\n                        <i class=\"fas fa-dice\"></i> Uruchom symulację\n                    </button>\n                    <div class=\"simulation-results\" id=\"monteCarloResults\"></div>\n                </div>\n            </div>\n        </div>\n    `;\n\n    modal.classList.add('show');\n    setTimeout(() => {\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n\n    setTimeout(() => {\n        const commonChartOptions = {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'bottom',\n                    labels: {\n                        boxWidth: 12,\n                        font: {\n                            size: 11\n                        },\n                        padding: 15\n                    }\n                }\n            },\n            layout: {\n                padding: {\n                    bottom: 30\n                }\n            }\n        };\n\n        const convertedValueByCategory = {};\n        for (const category in valueByCategory) {\n            convertedValueByCategory[category] = convertToCurrency(valueByCategory[category], 'PLN', targetCurrency);\n        }\n\n        const convertedValueByYear = {};\n        for (const year in valueByYear) {\n            convertedValueByYear[year] = convertToCurrency(valueByYear[year], 'PLN', targetCurrency);\n        }\n\n        const categoryCtx = document.getElementById('categoryChart').getContext('2d');\n        new Chart(categoryCtx, {\n            type: 'doughnut',\n            data: {\n                labels: Object.keys(convertedValueByCategory),\n                datasets: [{\n                    data: Object.values(convertedValueByCategory),\n                    backgroundColor: [\n                        '#4DB6AC', '#FF9800', '#9C27B0', '#2196F3', '#FF5722', '#607D8B', '#795548'\n                    ]\n                }]\n            },\n            options: {\n                ...commonChartOptions,\n                plugins: {\n                    ...commonChartOptions.plugins,\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const value = context.parsed;\n                                const total = Object.values(convertedValueByCategory).reduce((a, b) => a + b, 0);\n                                const percentage = Math.round((value / total) * 100);\n                                return `${context.label}: ${formatCurrency(value, targetCurrency, false, 'extendedStats')} (${percentage}%)`;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        const currencyCtx = document.getElementById('currencyChart').getContext('2d');\n        new Chart(currencyCtx, {\n            type: 'pie',\n            data: {\n                labels: Object.keys(valueByCurrency).map(code => `${code} (${getCurrencySymbol(code)})`),\n                datasets: [{\n                    data: Object.values(valueByCurrency),\n                    backgroundColor: [\n                        '#4DB6AC', '#FF9800', '#9C27B0', '#2196F3', '#FF5722', '#607D8B'\n                    ]\n                }]\n            },\n            options: commonChartOptions\n        });\n\n        const yearCtx = document.getElementById('yearChart').getContext('2d');\n        const years = Object.keys(convertedValueByYear).sort();\n        new Chart(yearCtx, {\n            type: 'bar',\n            data: {\n                labels: years,\n                datasets: [{\n                    label: `Wartość zakupu (${getCurrencySymbol(targetCurrency)})`,\n                    data: years.map(year => convertedValueByYear[year]),\n                    backgroundColor: '#4DB6AC',\n                    borderWidth: 1\n                }]\n            },\n            options: commonChartOptions\n        });\n\n        const profitLossCtx = document.getElementById('profitLossChart').getContext('2d');\n        new Chart(profitLossCtx, {\n            type: 'bar',\n            data: {\n                labels: [\n                    'Wysoki zysk (>50%)', 'Średni zysk (20-50%)', 'Niski zysk (<20%)',\n                    'Bez zmiany',\n                    'Niska strata (<20%)', 'Średnia strata (20-50%)', 'Wysoka strata (>50%)'\n                ],\n                datasets: [{\n                    label: 'Liczba produktów',\n                    data: [\n                        profitDistribution.highProfit,\n                        profitDistribution.mediumProfit,\n                        profitDistribution.lowProfit,\n                        profitDistribution.noChange,\n                        profitDistribution.lowLoss,\n                        profitDistribution.mediumLoss,\n                        profitDistribution.highLoss\n                    ],\n                    backgroundColor: [\n                        '#2E7D32', '#4CAF50', '#81C784',\n                        '#BDBDBD',\n                        '#FF8A65', '#F4511E', '#D32F2F'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                ...commonChartOptions,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        title: {\n                            display: true,\n                            text: 'Liczba produktów'\n                        }\n                    },\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Kategorie zysków i strat'\n                        },\n                        ticks: {\n                            autoSkip: false,\n                            maxRotation: 45,\n                            minRotation: 45\n                        }\n                    }\n                },\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                }\n            }\n        });\n\n        const productsByCategoryCtx = document.getElementById('productsByCategoryChart').getContext('2d');\n        new Chart(productsByCategoryCtx, {\n            type: 'bar',\n            data: {\n                labels: Object.keys(productsByCategory),\n                datasets: [{\n                    label: 'Liczba produktów',\n                    data: Object.values(productsByCategory),\n                    backgroundColor: '#4DB6AC',\n                    borderWidth: 1\n                }]\n            },\n            options: commonChartOptions\n        });\n\n        const convertedPurchaseValue = convertToCurrency(purchaseValue, 'PLN', targetCurrency);\n        const convertedCurrentValue = convertToCurrency(currentValue, 'PLN', targetCurrency);\n        \n        const valueComparisonCtx = document.getElementById('valueComparisonChart').getContext('2d');\n        new Chart(valueComparisonCtx, {\n            type: 'bar',\n            data: {\n                labels: ['Wartość zakupu', 'Aktualna wartość'],\n                datasets: [{\n                    label: `Wartość (${getCurrencySymbol(targetCurrency)})`,\n                    data: [convertedPurchaseValue, convertedCurrentValue],\n                    backgroundColor: [\n                        'rgba(77, 182, 172, 0.7)',\n                        'rgba(255, 152, 0, 0.7)'\n                    ],\n                    borderColor: [\n                        'rgba(77, 182, 172, 1)',\n                        'rgba(255, 152, 0, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: commonChartOptions\n        });\n\n        calculateRiskMetrics();\n        calculateLiquidityMetrics();\n        renderAdvancedVisualizations();\n        calculatePortfolioMetrics();\n        calculateForecasts();\n        generateCorrelationMatrix();\n    }, 100);\n}\nfunction initCategoryChart(data, currency) {\n    const ctx = document.getElementById('categoryChart').getContext('2d');\n    if (!ctx) return;\n\n    new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n            labels: Object.keys(data),\n            datasets: [{\n                data: Object.values(data),\n                backgroundColor: ['#4DB6AC', '#FF9800', '#9C27B0', '#2196F3', '#FF5722', '#607D8B', '#795548']\n            }]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                tooltip: {\n                    callbacks: {\n                        label: (context) => {\n                            return `${context.label}: ${context.parsed.toFixed(2)} ${getCurrencySymbol(currency)}`;\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\nfunction initYearChart(data, currency) {\n    const ctx = document.getElementById('yearChart').getContext('2d');\n    if (!ctx) return;\n\n    const years = Object.keys(data).sort();\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: years,\n            datasets: [{\n                label: `Wartość (${getCurrencySymbol(currency)})`,\n                data: years.map(year => data[year]),\n                backgroundColor: '#4DB6AC'\n            }]\n        },\n        options: {\n            responsive: true,\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: `Wartość (${getCurrencySymbol(currency)})`\n                    }\n                }\n            }\n        }\n    });\n}\nfunction initValueComparisonChart(purchaseVal, currentVal, currency) {\n    const ctx = document.getElementById('valueComparisonChart').getContext('2d');\n    if (!ctx) return;\n\n    const purchaseConverted = convertToCurrency(purchaseVal, 'PLN', currency);\n    const currentConverted = convertToCurrency(currentVal, 'PLN', currency);\n\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: ['Wartość zakupu', 'Aktualna wartość'],\n            datasets: [{\n                label: `Wartość (${getCurrencySymbol(currency)})`,\n                data: [purchaseConverted, currentConverted],\n                backgroundColor: ['#4DB6AC', '#FF9800']\n            }]\n        },\n        options: {\n            responsive: true,\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: `Wartość (${getCurrencySymbol(currency)})`\n                    }\n                }\n            }\n        }\n    });\n}\nfunction getCategoryColor(categoryName) {\n  const category = categories.find(c => c.name === categoryName);\n  return category ? { bg: category.bg, text: category.text } : { bg: '#ededed', text: '#333' };\n}\nasync function initializeExchangeRates() {\n    if (!exchangeRates.lastUpdated) {\n        await fetchExchangeRates();\n    } else {\n        const lastUpdated = new Date(exchangeRates.lastUpdated);\n        const now = new Date();\n        const hoursSinceLastUpdate = (now - lastUpdated) / (1000 * 60 * 60);\n        if (hoursSinceLastUpdate > 1) {\n            await fetchExchangeRates();\n        }\n    }\n    if (!exchangeRates.GOLD) {\n        await fetchGoldPrice();\n    }\n}\ndocument.addEventListener('DOMContentLoaded', function() {\n  soundPermissionGiven = true;\n  soundAllowed = true;\n  localStorage.setItem('soundPermission', 'true');\n  const changeSoundBtn = document.getElementById('changeSoundSettings');\n  if (changeSoundBtn) {\n    changeSoundBtn.onclick = () => {\n      localStorage.removeItem('soundPermission');\n      showSoundPermissionModal();\n    };\n  }\n  startExchangeRateMonitoring();\n  setTimeout(initializeExchangeRates, 2000);\n});\nfunction showSoundPermissionModal() {\n  const savedPermission = localStorage.getItem('soundPermission');\n  if (savedPermission !== null) {\n    soundPermissionGiven = savedPermission === 'true';\n    return;\n  }\n  const modal = document.getElementById('soundPermissionModal');\n  modal.classList.add('show');\n  \n\n  setTimeout(() => {\n    const content = modal.querySelector('.modal-content');\n    const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n    if (content) content.scrollTop = 0;\n    if (scrollBtn) scrollBtn.classList.remove('show');\n  }, 100);\n  document.getElementById('soundPermissionAccept').onclick = () => {\n    soundPermissionGiven = true;\n    soundAllowed = true;\n    localStorage.setItem('soundPermission', 'true');\n    modal.classList.remove('show');\n    showNotification('Dźwięki zostały włączone', 'success');\n\tplayNotificationSound('success');\n  };\n  document.getElementById('soundPermissionReject').onclick = () => {\n    soundPermissionGiven = false;\n    soundAllowed = false;\n    localStorage.setItem('soundPermission', 'false');\n    modal.classList.remove('show');\n    showNotification('Dźwięki zostały wyłączone', 'info');\n  };\n  document.getElementById('playSuccessSound').onclick = () => {\n    playDemoSound('success');\n  };\n  document.getElementById('playAlertSound').onclick = () => {\n    playDemoSound('alert');\n  };\n}\nfunction generateNewStatistics() {\n  const now = new Date();\n  let totalDays = 0;\n  const oldestProducts = [];\n  const newestProducts = [];\n  products.forEach(p => {\n    const addedDate = new Date(p.dateAdded);\n    const daysInStorage = Math.floor((now - addedDate) / (1000 * 60 * 60 * 24));\n    totalDays += daysInStorage;\n    oldestProducts.push({...p, days: daysInStorage});\n    if (daysInStorage <= 30) {\n      newestProducts.push({...p, days: daysInStorage});\n    }\n  });\n  const avgDays = products.length > 0 ? Math.floor(totalDays / products.length) : 0;\n  const avgYears = (avgDays / 365).toFixed(1);\n  const setTextIfExists = (elementId, text) => {\n    const el = document.getElementById(elementId);\n    if (el) el.textContent = text;\n  };\n  setTextIfExists('avgStorageTime', `${avgYears} lat`);\n  setTextIfExists('recentProducts', newestProducts.length);\n  const heatmap = document.getElementById('activityHeatmap');\n  if (heatmap) {\n    generateActivityHeatmap();\n  }\n  const oldestList = document.getElementById('oldestProducts');\n  if (oldestList) {\n    oldestList.innerHTML = '';\n    oldestProducts.sort((a, b) => b.days - a.days).slice(0, 5).forEach(p => {\n      const years = (p.days / 365).toFixed(1);\n      const item = document.createElement('div');\n      item.className = 'old-product-item';\n      item.innerHTML = `\n        <span class=\"old-product-name\">${p.name}</span>\n        <span class=\"old-product-years\">${years} lat</span>\n      `;\n      oldestList.appendChild(item);\n    });\n  }\n  const newestList = document.getElementById('newestProducts');\n  if (newestList) {\n    newestList.innerHTML = '';\n    newestProducts.slice(0, 5).forEach(p => {\n      const item = document.createElement('div');\n      item.className = 'old-product-item';\n      item.innerHTML = `\n        <span class=\"old-product-name\">${p.name}</span>\n        <span class=\"old-product-years\">${p.days} dni</span>\n      `;\n      newestList.appendChild(item);\n    });\n  }\n  let totalPriceRatio = 0;\n  let productsWithPrices = 0;\n  const missingPrices = [];\n  const categoryPrices = {};\n  products.forEach(p => {\n    if (p.currentPrice !== null && p.currentPrice !== undefined) {\n      const purchasePLN = convertToPLN(p.price, p.currency);\n      const currentPLN = convertToPLN(p.currentPrice, p.currentCurrency || p.currency);\n      const ratio = (currentPLN / purchasePLN) * 100;\n      totalPriceRatio += ratio;\n      productsWithPrices++;\n      if (!categoryPrices[p.category]) {\n        categoryPrices[p.category] = { totalPurchase: 0, totalCurrent: 0, count: 0 };\n      }\n      categoryPrices[p.category].totalPurchase += purchasePLN;\n      categoryPrices[p.category].totalCurrent += currentPLN;\n      categoryPrices[p.category].count++;\n    } else {\n      missingPrices.push(p);\n    }\n  });\n  const avgPriceRatio = productsWithPrices > 0 ? (totalPriceRatio / productsWithPrices).toFixed(1) : 0;\n  setTextIfExists('avgPriceRatio', `${avgPriceRatio}%`);\n  setTextIfExists('missingPricesCount', missingPrices.length);\n  const missingList = document.getElementById('missingPricesList');\n  if (missingList) {\n    missingList.innerHTML = '';\n    missingPrices.slice(0, 10).forEach(p => {\n      const item = document.createElement('div');\n      item.className = 'missing-price-item';\n      item.innerHTML = `\n        <span class=\"missing-price-name\">${p.name}</span>\n        <span class=\"missing-price-category\">${p.category}</span>\n      `;\n      missingList.appendChild(item);\n    });\n  }\n  const categoryList = document.getElementById('categoryPrices');\n  if (categoryList) {\n    categoryList.innerHTML = '';\n    for (const [category, data] of Object.entries(categoryPrices)) {\n      const avgPurchase = data.totalPurchase / data.count;\n      const avgCurrent = data.totalCurrent / data.count;\n      const ratio = ((avgCurrent / avgPurchase) * 100).toFixed(1);\n      \n      const item = document.createElement('div');\n      item.className = 'missing-price-item';\n      item.innerHTML = `\n        <span class=\"missing-price-name\">${category}</span>\n        <span>${formatCurrency(avgPurchase, 'PLN', true, 'extendedStats')} → ${formatCurrency(avgCurrent, 'PLN', true, 'extendedStats')} (${ratio}%)</span>\n      `;\n      categoryList.appendChild(item);\n    }\n  }\n  \n  generateActivityHeatmap();\n}\nfunction generateActivityHeatmap() {\n\tconst heatmap = document.getElementById('activityHeatmap');\n\tif (!heatmap) return; \n\theatmap.innerHTML = '';\n\tconst now = new Date();\n\tconst months = [];\n\tfor (let i = 11; i >= 0; i--) {\n\t\tconst monthDate = new Date(now);\n\t\tmonthDate.setMonth(now.getMonth() - i);\n\t\tmonths.push(monthDate);\n\t}\n\tconst activityData = {};\n\tproducts.forEach(p => {\n\t\tconst addedDate = new Date(p.dateAdded);\n\t\tconst dateKey = addedDate.toISOString().split('T')[0];\n\t\tif (!activityData[dateKey]) {\n\t\t\tactivityData[dateKey] = 0;\n\t\t}\n\t\tactivityData[dateKey]++;\n\t});\n\tmonths.forEach(month => {\n\t\tconst daysInMonth = new Date(month.getFullYear(), month.getMonth() + 1, 0).getDate();\n\t\tconst monthName = month.toLocaleString('pl-PL', { month: 'short' });\n\t\tconst monthHeader = document.createElement('div');\n\t\tmonthHeader.style.gridColumn = 'span 7';\n\t\tmonthHeader.style.textAlign = 'center';\n\t\tmonthHeader.style.fontSize = '0.9rem';\n\t\tmonthHeader.style.marginTop = '0.5rem';\n\t\tmonthHeader.textContent = monthName;\n\t\theatmap.appendChild(monthHeader);\n\t\tconst firstDay = new Date(month.getFullYear(), month.getMonth(), 1).getDay();\n\t\tfor (let i = 0; i < (firstDay === 0 ? 6 : firstDay - 1); i++) {\n\t\t\tconst emptyDay = document.createElement('div');\n\t\t\temptyDay.className = 'heatmap-day';\n\t\t\theatmap.appendChild(emptyDay);\n\t\t}\n\t\tfor (let day = 1; day <= daysInMonth; day++) {\n\t\t\tconst dayDate = new Date(month.getFullYear(), month.getMonth(), day);\n\t\t\tconst dateKey = dayDate.toISOString().split('T')[0];\n\t\t\tconst count = activityData[dateKey] || 0;\n\t\t\tconst dayElement = document.createElement('div');\n\t\t\tdayElement.className = count > 0 ? 'heatmap-day has-data' : 'heatmap-day';\n\t\t\tdayElement.style.opacity = count > 0 ? Math.min(0.3 + (count / 5), 1) : 0.3;\n\t\t\tif (count > 0) {\n\t\t\t\tconst tooltip = document.createElement('div');\n\t\t\t\ttooltip.className = 'heatmap-tooltip';\n\t\t\t\ttooltip.textContent = `${count} produktów - ${dayDate.toLocaleDateString('pl-PL')}`;\n\t\t\t\tdayElement.appendChild(tooltip);\n\t\t\t}\n\t\t\theatmap.appendChild(dayElement);\n\t\t}\n\t});\n}\nfunction closeStatsModal() {\n  logEvent('Modal statystyk został zamknięty');\n  document.getElementById('statsModal').classList.remove('show');\n}\nfunction toggleGallerySelectionMode() {\n    logEvent(`Przełączanie trybu selekcji galerii: ${!gallerySelectionMode ? 'ON' : 'OFF'}`);\n\tif (galleryOpenMode !== 'manage') return;\n\tgallerySelectionMode = !gallerySelectionMode;\n\tdocument.getElementById('gallerySelectionControls').style.display = \n\t\tgallerySelectionMode ? 'flex' : 'none';\n\tdocument.getElementById('gallerySelectBtn').style.display = \n\t\tgallerySelectionMode ? 'none' : 'inline-block';\n\tdocument.getElementById('galleryUploadBtn').style.display = \n\t\tgallerySelectionMode ? 'none' : 'inline-block';\n\tselectedGalleryImages = [];\n\trenderGallery();\n}\nfunction openGalleryImagePreview(index) {\n    const img = galleryImages[index];\n    const imageSrc = img.source === 'github' ? img.url : img.data;\n    document.getElementById('fullPreviewImg').src = imageSrc;\n    document.getElementById('imagePreviewModal').classList.add('show');\n}\nfunction openGallery() {\n    galleryOpenMode = 'manage';\n    gallerySelectionMode = false;\n    selectedGalleryImages = [];\n    galleryCurrentPage = 1;\n    document.getElementById('gallerySelectBtn').style.display = 'inline-block';\n    document.getElementById('galleryUploadBtn').style.display = 'inline-block';\n    document.getElementById('gallerySelectionControls').style.display = 'none';\n    document.getElementById('galleryUploadPanel').style.display = 'none';\n    const uploadBtn = document.getElementById('galleryUploadBtn');\n    uploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj zdjęcia';\n    uploadBtn.className = 'btn-success';\n    \n    if (window.matchMedia(\"(max-width: 768px)\").matches) {\n        const galleryGrid = document.getElementById('galleryContent');\n        galleryGrid.style.maxHeight = 'calc(98vh - 250px)';\n        galleryGrid.style.overflowY = 'auto';\n    }\n    renderGallery();\n    document.getElementById('galleryModal').classList.add('show');\n  \n  \n    setTimeout(() => {\n        const modal = document.getElementById('galleryModal');\n        const content = modal.querySelector('.modal-content');\n        const scrollBtn = modal.querySelector('.modal-scroll-to-top');\n        if (content) content.scrollTop = 0;\n        if (scrollBtn) scrollBtn.classList.remove('show');\n    }, 100);\n}\nasync function updateBackgroundsFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    \n    try {\n        const files = await fetchGitHubFiles('images/backgrounds');\n        if (!files) {\n            throw new Error('Brak plików tła na GitHub');\n        }\n        \n        let addedCount = 0;\n        let skippedCount = 0;\n        let errorCount = 0;\n        \n        if (window.isUpdatingBackgrounds) {\n            showNotification('Aktualizacja tła już trwa', 'warning');\n            loader.reset();\n            return;\n        }\n        \n        window.isUpdatingBackgrounds = true;\n        \n        const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.svg'];\n        const imageFiles = files.filter(file => {\n            const fileName = file.name.toLowerCase();\n            return imageExtensions.some(ext => fileName.endsWith(ext));\n        });\n\n        for (let i = 0; i < imageFiles.length; i++) {\n            const file = imageFiles[i];\n            loader.update(10 + (i / imageFiles.length) * 80);\n            \n            let fileName = file.name.replace(/\\.[^/.]+$/, \"\");\n            fileName = fileName.replace(/_/g, ' ');\n            \n            const exists = backgroundImages.some(bg => {\n                const existingName = bg.name.toLowerCase().trim().replace(/\\s+/g, ' ');\n                const newName = fileName.toLowerCase().trim().replace(/\\s+/g, ' ');\n                return existingName === newName && bg.source === 'github';\n            });\n            \n            if (exists) {\n                skippedCount++;\n                continue;\n            }\n            \n            try {\n                backgroundImages.push({\n                    id: generateUniqueId(),\n                    name: fileName,\n                    url: file.download_url,\n                    dateAdded: new Date().toISOString(),\n                    source: 'github'\n                });\n                addedCount++;\n            } catch (fetchError) {\n                errorCount++;\n            }\n        }\n        \n        if (addedCount > 0) {\n            await saveBackgrounds();\n            renderBackgrounds();\n            updateBackgroundCount();\n            playNotificationSound('success');\n        } else if (skippedCount > 0) {\n        } else {\n        }\n        \n        loader.complete();\n        setTimeout(() => {\n            loader.reset();\n            window.isUpdatingBackgrounds = false;\n        }, 500);\n    } catch (error) {\n        loader.reset();\n        window.isUpdatingBackgrounds = false;\n        showNotification('Błąd podczas aktualizacji tła: ' + error.message, 'danger');\n    }\n}\nfunction closeGallery() {\n\tlogEvent('Galeria zdjęć została zamknięta');\n\tcancelGallerySelection();\n\tdocument.getElementById('galleryModal').classList.remove('show');\n\tgallerySelectionMode = false;\n\tselectedGalleryImages = [];\n\tgalleryOpenMode = null;\n\tdocument.getElementById('gallerySelectBtn').style.display = 'inline-block';\n\tdocument.getElementById('galleryUploadBtn').style.display = 'inline-block';\n\tdocument.getElementById('gallerySelectionControls').style.display = 'none';\n\tdocument.getElementById('galleryUploadPanel').style.display = 'none';\n\tconst uploadBtn = document.getElementById('galleryUploadBtn');\n\tuploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj zdjęcia';\n\tuploadBtn.className = 'btn-success';\n\tgallerySearchTerm = '';\n\tdocument.getElementById('gallerySearchInput').value = '';\n}\nfunction openGalleryForSelection() {\n\tselectedImageUrl = null;\n\tgalleryOpenMode = 'selectForProduct';\n\tgallerySelectionMode = false;\n\tselectedGalleryImages = [];\n\tdocument.getElementById('gallerySelectBtn').style.display = 'none';\n\tdocument.getElementById('galleryUploadBtn').style.display = 'none';\n\tdocument.getElementById('gallerySelectionControls').style.display = 'none';\n\trenderGallery(true);\n\tdocument.getElementById('galleryModal').classList.add('show');\n}\nfunction toggleUploadPanel() {\n\tconst panel = document.getElementById('galleryUploadPanel');\n\tconst uploadBtn = document.getElementById('galleryUploadBtn');\n\tlogEvent(`${panel.style.display === 'none' ? 'Otwarto' : 'Zamknięto'} panel uploadu galerii`);\n\tif (panel.style.display === 'none') {\n\t\tpanel.style.display = 'block';\n\t\tuploadBtn.innerHTML = '<i class=\"fas fa-times\"></i> Anuluj dodawanie';\n\t\tuploadBtn.className = 'btn-danger';\n\t\tdocument.getElementById('gallerySelectBtn').style.display = 'none';\n\t} else {\n\t\tpanel.style.display = 'none';\n\t\tuploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj zdjęcia';\n\t\tuploadBtn.className = 'btn-success';\n\t\tdocument.getElementById('gallerySelectBtn').style.display = 'inline-block';\n\t}\n}\nfunction selectGalleryImage(index) {\n    const img = galleryImages[index];\n    logEvent(`Wybrano obraz z galerii: ${img.name}`);\n    showNotification(`Wybrano zdjęcie: ${img.name}`, 'success');\n    \n    if (img.source === 'github') {\n        selectedImageUrl = img.url;\n        selectedImageSource = 'github';\n        selectedImageId = img.id;\n    } else {\n        selectedImageUrl = img.data;\n        selectedImageSource = 'local';\n        selectedImageId = img.id;\n    }\n    \n    if (galleryOpenMode === 'selectForProduct') {\n        if (editingProductIndex !== null) {\n            const previewContainer = document.getElementById(`editImagePreview-${editingProductIndex}`);\n            const previewImg = previewContainer.querySelector('img');\n            previewImg.src = selectedImageUrl;\n            previewContainer.style.display = 'flex';\n            \n            products[editingProductIndex].image = selectedImageUrl;\n            products[editingProductIndex].imageId = selectedImageId;\n            products[editingProductIndex].imageSource = selectedImageSource;\n        } else {\n            document.getElementById('previewImg').src = selectedImageUrl;\n            document.getElementById('imagePreview').style.display = 'flex';\n            document.getElementById('image').value = '';\n        }\n    }\n    closeGallery();\n}\nasync function uploadToGallery() {\n    logEvent(`Rozpoczęto przesyłanie zdjęć do galerii`);\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(10);\n    try {\n        const input = document.getElementById('galleryUploadInput');\n        if (!input.files || input.files.length === 0) {\n            showNotification('Wybierz przynajmniej jedno zdjęcie', 'warning');\n            loader.reset();\n            return;\n        }\n        const files = Array.from(input.files);\n        const skippedFiles = [];\n        const addedFiles = [];\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            loader.update(10 + (i/files.length)*80);\n            const name = document.getElementById('galleryImageName').value.trim() || file.name.replace(/\\.[^/.]+$/, \"\");\n            if (!isImageNameUnique(name)) {\n                skippedFiles.push(file.name);\n                continue;\n            }\n            const reader = new FileReader();\n            const imageData = await new Promise((resolve) => {\n                reader.onload = function(e) {\n                    resolve(e.target.result);\n                };\n                reader.readAsDataURL(file);\n            });\n            galleryImages.push({\n                id: generateUniqueId(),\n                name: name,\n                data: imageData,\n                dateAdded: new Date().toISOString()\n            });\n            addedFiles.push(name);\n        }\n        if (skippedFiles.length > 0) {\n            const filesList = skippedFiles.join(', ');\n            showNotification(`Pominięto zdjęcia: ${filesList} - nazwa już istnieje`, 'warning', 5000);\n        }\n        if (addedFiles.length > 0) {\n\t\t\tlogEvent(`Dodano ${addedFiles.length} zdjęć do galerii`);\n            showNotification(`Dodano ${addedFiles.length} zdjęć do galerii`, 'success');\n\t\t\tplayNotificationSound('success');\n            await saveGallery();\n            renderGallery();\n        } else {\n            showNotification('Nie dodano żadnych zdjęć', 'info');\n        }\n        input.value = '';\n        document.getElementById('galleryImageName').value = '';\n        document.getElementById('galleryUploadPanel').style.display = 'none';\n        const uploadBtn = document.getElementById('galleryUploadBtn');\n        uploadBtn.innerHTML = '<i class=\"fas fa-upload\"></i> Dodaj zdjęcia';\n        uploadBtn.className = 'btn-success';\n        document.getElementById('gallerySelectBtn').style.display = 'inline-block';\n        updateGalleryCount();\n        loader.complete();\n        setTimeout(() => loader.reset(), 1000);\n    } catch (error) {\n        loader.reset();\n        showNotification(`Błąd podczas przetwarzania zdjęć: ${error.message}`, 'danger');\n    }\n    logEvent(`Dodano ${addedFiles.length} zdjęć do galerii`);\n}\nfunction deleteGalleryImage(index) {\n    const imgName = galleryImages[index].name;\n    logEvent(`Próba usunięcia zdjęcia z galerii: ${imgName}`);\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć zdjęcie \"${imgName}\"? Ta operacja usunie również to zdjęcie z wszystkich produktów, które go używają.`,\n        async function(confirmed) {\n            if (!confirmed) return;\n            const loader = new PokeballLoader('pokeballLoader').start(0);\n            loader.update(30);\n            try {\n                galleryImages.splice(index, 1);\n                loader.update(60);\n                \n                let updatedProducts = 0;\n                products.forEach(product => {\n                    if (product.image === galleryImages[index]?.data || \n                        (product.imageId && product.imageId === galleryImages[index]?.id)) {\n                        delete product.image;\n                        delete product.imageId;\n                        updatedProducts++;\n                    }\n                });\n                await saveGallery();\n                await saveProducts();\n                loader.update(80);\n                renderGallery();\n                renderProducts(applyAllFilters());\n                loader.complete();\n                setTimeout(() => {\n                    loader.reset();\n                    showNotification(`Usunięto zdjęcie i zaktualizowano ${updatedProducts} produktów`, 'success');\n\t\t\t\t\tplayNotificationSound('success');\n                    logEvent(`Usunięto zdjęcie z galerii: ${imgName}`);\n                }, 500);\n                updateGalleryCount();\n            } catch (error) {\n                loader.reset();\n                showNotification('Błąd usuwania zdjęcia: ' + error.message, 'danger');\n            }\n        }\n    );\n}\nfunction requestDeleteGalleryImage(index) {\n    deleteGalleryImage(index);\n}\nasync function deleteSelectedGalleryImages() {\n    if (!selectedGalleryImages.length) {\n        showNotification('Nie zaznaczono żadnych zdjęć', 'warning');\n        return;\n    }\n    const count = selectedGalleryImages.length;\n    showConfirmation(\n        'Potwierdzenie usunięcia',\n        `Czy na pewno chcesz usunąć ${count} zaznaczonych zdjęć? Ta operacja usunie również te zdjęcia z produktów, które ich używają.`,\n        async function(confirmed) {\n            if (!confirmed) return;\n            const loader = new PokeballLoader('pokeballLoader').start(0);\n            loader.update(10);\n            try {\n                const deletedImages = selectedGalleryImages.map(i => galleryImages[i]);\n                selectedGalleryImages.sort((a, b) => b - a).forEach(i => {\n                    galleryImages.splice(i, 1);\n                });\n                loader.update(30);\n                let updatedProducts = 0;\n                deletedImages.forEach(image => {\n                    products.forEach(product => {\n                        if (product.image === image.data || \n                            (product.imageId && product.imageId === image.id)) {\n                            \n                            delete product.image;\n                            delete product.imageId;\n                            updatedProducts++;\n                        }\n                    });\n                });\n                loader.update(60);\n                await saveGallery();\n                await saveProducts();\n                loader.update(80);\n                selectedGalleryImages = [];\n                galleryCurrentPage = 1;\n                cancelGallerySelection();\n                renderGallery();\n                renderProducts(applyAllFilters());\n                loader.complete();\n                setTimeout(() => {\n                    loader.reset();\n                    showNotification(`Usunięto ${count} zdjęć i zaktualizowano ${updatedProducts} produktów`, 'success');\n\t\t\t\t\tplayNotificationSound('success');\n                }, 500);\n                updateGalleryCount();\n            } catch (error) {\n                loader.reset();\n                showNotification('Błąd usuwania zdjęć: ' + error.message, 'danger');\n            }\n        }\n    );\n}\nfunction cancelGallerySelection() {\n  gallerySelectionMode = false;\n  document.getElementById('gallerySelectionControls').style.display = 'none';\n  document.getElementById('gallerySelectBtn').style.display = 'inline-block';\n  document.getElementById('galleryUploadBtn').style.display = 'inline-block';\n  selectedGalleryImages = [];\n  const counter = document.getElementById('gallerySelectionCounter');\n  if (counter) counter.remove();\n  renderGallery();\n}\nfunction searchGallery() {\n    const term = document.getElementById('gallerySearchInput').value.trim();\n    logEvent(`Wyszukiwanie w galerii: \"${term}\"`);\n  gallerySearchTerm = document.getElementById('gallerySearchInput').value.toLowerCase().trim();\n  galleryCurrentPage = 1;\n  const selectMode = galleryOpenMode === 'selectForProduct';\n  renderGallery(selectMode);\n}\nfunction sortGallery(criteria) {\n\tswitch(criteria) {\n\t\tcase 'name-asc':\n\t\t\tgalleryImages.sort((a, b) => a.name.localeCompare(b.name));\n\t\t\tbreak;\n\t\tcase 'name-desc':\n\t\t\tgalleryImages.sort((a, b) => b.name.localeCompare(a.name));\n\t\t\tbreak;\n\t\tcase 'date-asc':\n\t\t\tgalleryImages.sort((a, b) => new Date(a.dateAdded) - new Date(b.dateAdded));\n\t\t\tbreak;\n\t\tcase 'date-desc':\n\t\t\tgalleryImages.sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded));\n\t\t\tbreak;\n\t\tcase 'size-asc':\n\t\t\tgalleryImages.sort((a, b) => a.data.length - b.data.length);\n\t\t\tbreak;\n\t\tcase 'size-desc':\n\t\t\tgalleryImages.sort((a, b) => b.data.length - a.data.length);\n\t\t\tbreak;\n\t}\n\trenderGallery();\n}\nfunction formatFileSize(dataUrl) {\n\tconst sizeInBytes = Math.floor(dataUrl.length * 0.75);\n\tif (sizeInBytes < 1024) {\n\t\treturn sizeInBytes + ' B';\n\t} else if (sizeInBytes < 1024 * 1024) {\n\t\treturn (sizeInBytes / 1024).toFixed(1) + ' KB';\n\t} else {\n\t\treturn (sizeInBytes / (1024 * 1024)).toFixed(1) + ' MB';\n\t}\n}\nfunction renderGallery(selectMode = false) {\n  const galleryContent = document.getElementById('galleryContent');\n  galleryContent.innerHTML = '';\n  galleryFilteredImages = [];\n  galleryDisplayedIndexes = [];\n  \n  if (gallerySearchTerm) {\n    galleryImages.forEach((img, index) => {\n      if (img.name.toLowerCase().includes(gallerySearchTerm)) {\n        galleryFilteredImages.push(img);\n        galleryDisplayedIndexes.push(index);\n      }\n    });\n  } else {\n    galleryFilteredImages = [...galleryImages];\n    galleryDisplayedIndexes = galleryImages.map((_, index) => index);\n  }\n  \n  galleryTotalPages = Math.ceil(galleryFilteredImages.length / paginationConfig.galleryItemsPerPage);\n  galleryCurrentPage = Math.min(galleryCurrentPage, galleryTotalPages);\n  \n  const startIndex = (galleryCurrentPage - 1) * paginationConfig.galleryItemsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.galleryItemsPerPage, galleryFilteredImages.length);\n  const currentPageImages = galleryFilteredImages.slice(startIndex, endIndex);\n  const currentPageIndexes = galleryDisplayedIndexes.slice(startIndex, endIndex);\n  \n  updateGalleryCount();\n  \n  if (galleryFilteredImages.length === 0) {\n    galleryContent.innerHTML = `\n      <div class=\"gallery-empty\">\n        <i class=\"fas fa-image\"></i>\n        <h3>${gallerySearchTerm ? 'Brak wyników' : 'Brak zdjęć'}</h3>\n        <p>${gallerySearchTerm ? 'Spróbuj innej frazy' : 'Dodaj zdjęcia'}</p>\n      </div>\n    `;\n    return;\n  }\n  \n  currentPageImages.forEach((img, pageIndex) => {\n    const originalIndex = currentPageIndexes[pageIndex];\n    const item = document.createElement('div');\n    item.className = 'gallery-item';\n    \n    const isGitHubImage = img.source === 'github';\n    \n    if (gallerySelectionMode) {\n      if (!isGitHubImage) {\n        item.classList.add('selectable');\n      } else {\n        item.classList.add('github-disabled');\n      }\n      if (selectedGalleryImages.includes(originalIndex)) {\n        item.classList.add('selected');\n      }\n    }\n    \n    const showActionButtons = galleryOpenMode === 'manage' && !gallerySelectionMode && !isGitHubImage;\n    item.setAttribute('data-index', originalIndex);\n    \n    const imageSrc = isGitHubImage ? img.url : img.data;\n    \n    item.innerHTML = `\n      <div class=\"gallery-image-container\">\n        <div class=\"image-placeholder\">\n          <i class=\"fas fa-spinner\"></i>\n        </div>\n        <img data-src=\"${imageSrc}\" alt=\"${img.name}\" class=\"lazy\" \n             data-source=\"${img.source || 'local'}\" \n             ${isGitHubImage ? 'data-github-url=\"' + img.url + '\"' : ''}>\n      </div>\n      <span>\n        ${img.name} \n      </span>\n      <div class=\"image-info\">\n        ${isGitHubImage ? 'Online' : formatFileSize(img.data)}\n        ${isGitHubImage ? '<i class=\"fa fa-globe\" title=\"Obraz online\" style=\"margin-left: 5px; color: #333; font-size: 0.8em;\"></i>' : ''}\n      </div>\n      ${showActionButtons ? `\n        <button class=\"delete-btn\" title=\"Usuń zdjęcie\">\n          <i class=\"fas fa-times\"></i>\n        </button>\n        <button class=\"edit-btn\" title=\"Edytuj nazwę\">\n          <i class=\"fas fa-edit\"></i>\n        </button>\n      ` : ''}\n    `;\n    \n    if (gallerySelectionMode) {\n      if (!isGitHubImage) {\n        item.addEventListener('click', () => toggleGalleryImageSelection(originalIndex));\n      }\n    } else if (selectMode) {\n      item.addEventListener('click', () => selectGalleryImage(originalIndex));\n    } else {\n      const imgElement = item.querySelector('img');\n      imgElement.addEventListener('click', () => openGalleryImagePreview(originalIndex));\n      \n      if (showActionButtons) {\n        const deleteBtn = item.querySelector('.delete-btn');\n        deleteBtn.addEventListener('click', (e) => {\n          e.stopPropagation();\n          requestDeleteGalleryImage(originalIndex);\n        });\n        \n        const editBtn = item.querySelector('.edit-btn');\n        editBtn.addEventListener('click', (e) => {\n          e.stopPropagation();\n          editGalleryImageName(originalIndex);\n        });\n      }\n    }\n    \n    galleryContent.appendChild(item);\n  });\n  \n  renderPagination();\n  setTimeout(initLazyLoading, 100);\n}\n\nfunction renderBackgrounds() {\n  const content = document.getElementById('backgroundContent');\n  content.innerHTML = '';\n  \n  backgroundTotalPages = Math.ceil(backgroundImages.length / paginationConfig.backgroundItemsPerPage);\n  backgroundCurrentPage = Math.min(backgroundCurrentPage, backgroundTotalPages);\n  \n  const startIndex = (backgroundCurrentPage - 1) * paginationConfig.backgroundItemsPerPage;\n  const endIndex = Math.min(startIndex + paginationConfig.backgroundItemsPerPage, backgroundImages.length);\n  const currentPageImages = backgroundImages.slice(startIndex, endIndex);\n  \n  if (backgroundImages.length === 0) {\n    content.innerHTML = `\n      <div class=\"background-empty\">\n        <i class=\"fas fa-image\"></i>\n        <h3>Brak zdjęć tła</h3>\n        <p>Dodaj tła, aby zmienić wygląd aplikacji</p>\n      </div>\n    `;\n    return;\n  }\n  \n  currentPageImages.forEach((img, index) => {\n    const globalIndex = startIndex + index;\n    const isSelected = selectedBackgroundId === img.id;\n    const isGitHubBackground = img.source === 'github';\n    const item = document.createElement('div');\n    item.className = 'background-item';\n    \n    if (isSelected) {\n      item.classList.add('active-background');\n    }\n    \n    const imageSrc = isGitHubBackground ? img.url : img.data;\n    \n    item.innerHTML = `\n      <div class=\"background-checkbox\">\n        <input type=\"checkbox\" id=\"bgCheck-${globalIndex}\" \n            ${isSelected ? 'checked' : ''}\n            onchange=\"selectBackground(${globalIndex}, this.checked)\">\n        <label for=\"bgCheck-${globalIndex}\"></label>\n      </div>\n      <div class=\"background-image-container\">\n        <img src=\"${imageSrc}\" alt=\"${img.name}\" \n            onclick=\"openBackgroundPreview(${globalIndex})\"\n            data-source=\"${img.source || 'local'}\"\n            ${isGitHubBackground ? 'data-github-url=\"' + img.url + '\"' : ''}>\n      </div>\n      <div style=\"align-items: center;display: flex;justify-content: center;flex-direction: column;\">\n        <span>\n          ${img.name} \n          ${isGitHubBackground ? '<i class=\"fa fa-globe\" title=\"Obraz online\" style=\"margin-left: 5px; color: #333; font-size: 0.8em;\"></i>' : ''}\n        </span>\n        <div class=\"background-info\">\n          ${!isGitHubBackground ? `\n            <div class=\"background-actions\">\n              <button class=\"btn-info edit-icon-btn\" onclick=\"editBackgroundName(${globalIndex})\">\n                <i class=\"fas fa-edit\"></i>\n              </button>\n              <button class=\"btn-info edit-icon-btn\" style=\"background-color:var(--danger); color:white;width: 30px; height: 30px;\" onclick=\"requestDeleteBackground(${globalIndex})\">\n                <i class=\"fas fa-trash\"></i>\n              </button>\n            </div>\n          ` : ''}\n        </div>\n      </div>\n    `;\n    \n    content.appendChild(item);\n  });\n  \n  renderBackgroundPagination();\n}\nasync function saveImageToDB(imageData, storeName) {\n\treturn new Promise(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst db = await openDB();\n\t\t\tconst tx = db.transaction(storeName, 'readwrite');\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst id = generateUniqueId();\n\t\t\tawait store.put({ id, data: imageData });\n\t\t\tresolve(id);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n}\nasync function migrateToImageReferences() {\n    logEvent('Rozpoczęcie migracji obrazów');\n\tconst loader = new PokeballLoader('pokeballLoader').start(0);\n\ttry {\n\t\tfor (const product of products) {\n\t\t\tif (product.image && !product.imageId) {\n\t\t\t\tproduct.imageId = await saveImageToDB(product.image, 'productImages');\n\t\t\t}\n\t\t}\n\t\tfor (const galleryImage of galleryImages) {\n\t\t\tif (galleryImage.data && !galleryImage.id) {\n\t\t\t\tconst imageId = await saveImageToDB(galleryImage.data, 'galleryImages');\n\t\t\t\tgalleryImage.id = imageId;\n\t\t\t}\n\t\t}\n\t\tlocalStorage.setItem('products', JSON.stringify(products));\n\t\tawait saveGallery();\n\t\tloader.complete();\n\t\tsetTimeout(() => loader.reset(), 500);\n\t} catch (error) {\n\t\tloader.reset();\n\t\tshowNotification('Błąd migracji danych. Skontaktuj się z supportem.', 'danger');\n\t}\n}\nfunction initLazyLoading() {\n  const lazyImages = document.querySelectorAll('img.lazy');\n  const observer = new IntersectionObserver((entries, observer) => {\n\tentries.forEach(entry => {\n\t  if (entry.isIntersecting) {\n\t\tconst img = entry.target;\n\t\tconst originalSrc = img.dataset.src;\n\t\timg.src = originalSrc;\n\t\timg.onload = function() {\n\t\t\timg.classList.add('loaded');\n\t\t\tconst placeholder = img.parentElement.querySelector('.image-placeholder');\n\t\t\tif (placeholder) {\n\t\t\t\tplaceholder.style.display = 'none';\n\t\t\t}\n\t\t};\n\t\timg.onerror = function() {\n\t\t\tconst placeholder = img.parentElement.querySelector('.image-placeholder');\n\t\t\tif (placeholder) {\n\t\t\t\tplaceholder.innerHTML = '<i class=\"fas fa-times-circle\"></i> Błąd ładowania';\n\t\t\t}\n\t\t};\n\t\timg.classList.remove('lazy');\n\t\tobserver.unobserve(img);\n\t  }\n\t});\n  });\n  lazyImages.forEach(img => {\n\tobserver.observe(img);\n  });\n}\nfunction renderPagination() {\n  const galleryContainer = document.getElementById('galleryModal').querySelector('.modal-content');\n  const oldPagination = galleryContainer.querySelector('.pagination-container');\n  if (oldPagination) oldPagination.remove();\n  const paginationContainer = document.createElement('div');\n  paginationContainer.className = 'pagination-container';\n  paginationContainer.style.display = 'flex';\n  paginationContainer.style.flexDirection = 'column';\n  paginationContainer.style.alignItems = 'center';\n  paginationContainer.style.marginTop = '1rem';\n  paginationContainer.style.width = '100%';\n  const buttonsContainer = document.createElement('div');\n  buttonsContainer.className = 'pagination';\n  const prevButton = document.createElement('button');\n  prevButton.innerHTML = '<i class=\"fas fa-chevron-left\" style=\"color: white;\"></i>';\n  prevButton.disabled = galleryCurrentPage === 1;\n  prevButton.addEventListener('click', () => {\n\tif (galleryCurrentPage > 1) {\n\t  galleryCurrentPage--;\n\t  renderGallery();\n\t}\n  });\n  const nextButton = document.createElement('button');\n  nextButton.innerHTML = '<i class=\"fas fa-chevron-right\" style=\"color: white;\"></i>';\n  nextButton.disabled = galleryCurrentPage === galleryTotalPages;\n  nextButton.addEventListener('click', () => {\n\tif (galleryCurrentPage < galleryTotalPages) {\n\t  galleryCurrentPage++;\n\t  renderGallery();\n\t}\n  });\n  buttonsContainer.appendChild(prevButton);\n  buttonsContainer.appendChild(nextButton);\n  const paginationInfo = document.createElement('div');\n  paginationInfo.className = 'gallery-pagination-info';\n  paginationInfo.textContent = `Strona ${galleryCurrentPage} z ${galleryTotalPages} • ${galleryFilteredImages.length} zdjęć`;\n  paginationContainer.appendChild(buttonsContainer);\n  paginationContainer.appendChild(paginationInfo);\n  galleryContainer.appendChild(paginationContainer);\n  setTimeout(initLazyLoading, 100);\n}\nfunction generateUniqueId() {\n\treturn Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n}\nasync function saveProductImagesToDB() {\n\ttry {\n\t\tconst db = await openDB();\n\t\tconst tx = db.transaction('productImages', 'readwrite');\n\t\tconst store = tx.objectStore('productImages');\n\t\tawait store.clear();\n\t\tproducts.forEach(p => {\n\t\t\tif (p.image) {\n\t\t\t\tstore.put({\n\t\t\t\t\tid: p.name,\n\t\t\t\t\tdata: p.image\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t}\n}\nfunction loadProductImage(product) {\n    if (product.imageSource === 'github' && product.imageId) {\n        const galleryImage = galleryImages.find(img => img.id === product.imageId && img.source === 'github');\n        return galleryImage ? galleryImage.url : (product.image || '');\n    } else {\n        return product.image || '';\n    }\n}\nasync function loadProductImagesFromDB() {\n\ttry {\n\t\tconst db = await openDB();\n\t\tconst tx = db.transaction('productImages', 'readonly');\n\t\tconst store = tx.objectStore('productImages');\n\t\tconst request = store.getAll();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\trequest.onsuccess = function() {\n\t\t\t\tconst images = request.result || [];\n\t\t\t\timages.forEach(img => {\n\t\t\t\t\tconst product = products.find(p => p.name === img.id);\n\t\t\t\t\tif (product) {\n\t\t\t\t\t\tproduct.image = img.data;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresolve();\n\t\t\t};\n\t\t\trequest.onerror = function() {\n\t\t\t\treject('Błąd ładowania obrazów produktów');\n\t\t\t};\n\t\t});\n\t} catch (error) {\n\t\tlogEvent('Błąd ładowania obrazów:', error);\n\t}\n}\nasync function migrateProductImageReferences() {\n\tlet needsMigration = false;\n\tproducts = products.map(product => {\n\t\tif (product.image && !product.imageId) {\n\t\t\tconst galleryImage = galleryImages.find(img => img.data === product.image);\n\t\t\tif (galleryImage) {\n\t\t\t\tneedsMigration = true;\n\t\t\t\treturn {\n\t\t\t\t\t...product,\n\t\t\t\t\timageId: galleryImage.id\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn product;\n\t});\n\tif (needsMigration) {\n\t\tawait saveProducts();\n\t}\n}\nfunction toggleGalleryImageSelection(index) {\n    const img = galleryImages[index];\n    if (img.source === 'github') {\n        return;\n    }\n    const idx = selectedGalleryImages.indexOf(index);\n    if (idx > -1) {\n        selectedGalleryImages.splice(idx, 1);\n    } else {\n        selectedGalleryImages.push(index);\n    }\n    const item = document.querySelector(`.gallery-item[data-index=\"${index}\"]`);\n    if (item) item.classList.toggle('selected', selectedGalleryImages.includes(index));\n    updateSelectionCounter();\n}\nfunction updateSelectionCounter() {\n  const counter = document.getElementById('gallerySelectionCounter');\n  if (!counter) {\n\tconst selectionControls = document.getElementById('gallerySelectionControls');\n\tconst counterEl = document.createElement('div');\n\tcounterEl.id = 'gallerySelectionCounter';\n\tcounterEl.className = 'selection-counter';\n\tcounterEl.innerHTML = `<i class=\"fas fa-check-circle\"></i> Zaznaczono: ${selectedGalleryImages.length}`;\n\tselectionControls.insertBefore(counterEl, selectionControls.firstChild);\n  } else {\n\tcounter.innerHTML = `<i class=\"fas fa-check-circle\"></i> Zaznaczono: ${selectedGalleryImages.length}`;\n  }\n}\nfunction checkIOSConnection() {\n  return new Promise(resolve => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('HEAD', 'https://www.google.com/favicon.ico?cache=' + Math.random(), true);\n    xhr.timeout = 5000;\n    xhr.onload = function() {\n      resolve(true);\n    };\n    xhr.onerror = function() {\n      resolve(false);\n    };\n    xhr.ontimeout = function() {\n      resolve(false);\n    };\n    try {\n      xhr.send();\n    } catch (error) {\n      resolve(false);\n    }\n  });\n}\nfunction setupConnectionMonitoring() {\n  setInterval(async () => {\n    const isOnline = await checkInternetConnection();\n    if (!isOnline && !document.querySelector('.no-internet-container')) {\n      showNoInternetMessage();\n    }\n  }, 10000);\n  window.addEventListener('online', async () => {\n    const isReallyOnline = await checkInternetConnection();\n    if (isReallyOnline) {\n      hideNoInternetMessage();\n      showNotification('Połączenie internetowe zostało przywrócone', 'success');\n      setTimeout(() => {\n        location.reload();\n      }, 1000);\n    }\n  });\n  window.addEventListener('offline', () => {\n    showNoInternetMessage();\n    showNotification('Utracono połączenie internetowe', 'danger');\n  });\n}\ndocument.addEventListener('DOMContentLoaded', async function() {\n  const isOnline = await checkInternetConnection();\n  if (!isOnline) {\n    showNoInternetMessage();\n    return;\n  }\n  setupConnectionMonitoring();\n  const blockedBrowsers = [\n    { \n      name: \"Microsoft Edge\", \n      pattern: /Edg/,\n      message: \"Microsoft Edge nie jest kompatybilny z tą aplikacją\"\n    },\n  ];\n  const userAgent = navigator.userAgent;\n  let blockedBrowser = null;\n  for (const browser of blockedBrowsers) {\n    if (browser.pattern.test(userAgent)) {\n      blockedBrowser = browser;\n      break;\n    }\n  }\n  if (blockedBrowser) {\n    document.body.classList.add('edge-blocked');\n    const contentHTML = `\n      <div class=\"edge-blocked-content\">\n        <div class=\"pokeball-container\">\n          <div class=\"pokeball bounce\">\n            <div class=\"pokeball-top\"></div>\n            <div class=\"pokeball-bottom\"></div>\n            <div class=\"pokeball-center\"></div>\n          </div>\n        </div>\n        <h1>\n          <i class=\"fas fa-exclamation-triangle\"></i> ${blockedBrowser.name} nie jest obsługiwany\n        </h1>\n        <p>\n          ${blockedBrowser.message}. Prosimy skorzystać z jednej z zalecanych przeglądarek:\n        </p>\n        <div class=\"browser-list\">\n          <a href=\"https://www.mozilla.org/firefox/\" target=\"_blank\" class=\"browser-item\">\n            <i class=\"fab fa-firefox-browser\"></i>\n            Firefox\n          </a>\n          <a href=\"https://www.google.com/chrome/\" target=\"_blank\" class=\"browser-item\">\n            <i class=\"fab fa-chrome\"></i>\n            Google Chrome\n          </a>\n          <a href=\"https://brave.com/\" target=\"_blank\" class=\"browser-item\">\n            <i class=\"fab fa-brave\"></i>\n            Brave\n          </a>\n          <a href=\"https://www.opera.com/\" target=\"_blank\" class=\"browser-item\">\n            <i class=\"fab fa-opera\"></i>\n            Opera\n          </a>\n        </div>\n        <p class=\"note\">\n          Po zainstalowaniu nowej przeglądarki, uruchom narzędzie ponownie.\n        </p>\n      </div>\n    `;\n    document.body.innerHTML = contentHTML;\n    const style = document.createElement('style');\n    style.textContent = `\n      body {background: #000 !important;color: #fff;display: flex;flex-direction: column;justify-content: center;align-items: center;height: 100vh;text-align: center;padding: 20px;font-family: Arial, sans-serif;margin: 0;}\n      .edge-blocked-content {max-width: 800px;width: 100%;display: flex;flex-direction: column;align-items: center;}\n      .pokeball-container {display: flex;flex-direction: column;align-items: center;justify-content: center;margin-bottom: 30px;}\n      .pokeball {width: 100px;height: 100px;position: relative;margin: 0 auto;}\n      .pokeball-top {position: absolute;top: 0;left: 0;width: 100%;height: 50%;background: #ff3a30;border-radius: 50px 50px 0 0;border-bottom: 2px solid #000;}\n      .pokeball-bottom {position: absolute;bottom: 0;left: 0;width: 100%;height: 50%;background: #fff;border-radius: 0 0 50px 50px;border-top: 2px solid #000;}\n      .pokeball-center {position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);width: 20px;height: 20px;background: #3a3a3a;border-radius: 50%;border: 3px solid #000;z-index: 10;}\n      @keyframes bounce {0%, 100% { transform: translateY(0) rotate(0deg); }25% { transform: translateY(-20px) rotate(10deg); }50% { transform: translateY(0) rotate(0deg); }75% { transform: translateY(-15px) rotate(-10deg); }}\n      .bounce {animation: bounce 1.5s ease-in-out infinite;}\n      .browser-list {display: grid;grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));gap: 25px;margin: 40px 0;width: 100%;}\n      .browser-item {color: #fff;text-decoration: none;transition: transform 0.3s;display: block;}\n      .browser-item:hover {background: #000 !important;transform: translateY(-5px);}\n      .browser-item i {font-size: 3rem;display: block;margin-bottom: 15px;}\n      .browser-item:nth-child(1) i { color: #FF9500; }\n      .browser-item:nth-child(2) i { color: #4CAF50; }\n      .browser-item:nth-child(3) i { color: #FF2000; }\n      .browser-item:nth-child(4) i { color: #FF1B2D; }\n      h1 {margin-bottom: 20px;font-size: 2rem;color: #ff3a30;text-align: center;}\n      p {margin-bottom: 30px;font-size: 1.2rem;line-height: 1.6;text-align: center;}\n      .note {font-size: 0.9rem;color: #aaa;text-align: center;}\n      .loader-text {margin-top: 15px;font-size: 1.2rem;text-align: center;}\n    `;\n    document.head.appendChild(style);\n    let progress = 0;\n    const loaderText = document.querySelector('.loader-text');\n    const interval = setInterval(() => {\n      progress += 5;\n      loaderText.textContent = `${progress}%`;\n      if (progress >= 100) {\n        clearInterval(interval);\n        loaderText.innerHTML = '<i class=\"fas fa-ban\"></i> Blokada';\n      }\n    }, 100);\n    const fontAwesome = document.createElement('link');\n    fontAwesome.rel = 'stylesheet';\n    fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css';\n    document.head.appendChild(fontAwesome);\n    return;\n  }\n  const loader = document.getElementById('pokeballLoader');\n  const loaderText = loader.querySelector('.loader-text');\n  const startTime = Date.now();\n  const minLoadTime = 1500;\n  const updateLoaderText = (text) => {\n    if (loaderText) loaderText.textContent = text;\n  };\n  const updateProgress = (current, total) => {\n    const percent = Math.round((current / total) * 100);\n    updateLoaderText(`Ładowanie aplikacji... ${percent}%`);\n    return percent;\n  };\n  const tasks = [\n    { action: async () => await loadBackgrounds(), weight: 10, name: 'Ładowanie tła' },\n    { action: async () => {\n        const savedBackgroundId = localStorage.getItem('selectedBackground');\n        if (savedBackgroundId) {\n            const img = backgroundImages.find(bg => bg.id === savedBackgroundId);\n            if (img) {\n                selectedBackgroundId = savedBackgroundId;\n                applyBackgroundStyle();\n            }\n        }\n    }, weight: 5, name: 'Stosowanie tła' },\n    { action: async () => await openDB(), weight: 15, name: 'Inicjalizacja bazy danych' },\n    { \n        action: async () => {\n            products = JSON.parse(localStorage.getItem('products')) || [];\n            categories = JSON.parse(localStorage.getItem('categories')) || [];\n            exchangeRates = JSON.parse(localStorage.getItem('exchangeRates')) || { EUR: 4.25, USD: 3.62, PLN: 1.0, lastUpdated: null };\n            currencySymbols = JSON.parse(localStorage.getItem('currencySymbols')) || { PLN: 'zł', EUR: '€', USD: '$' };\n            let localShops = JSON.parse(localStorage.getItem('shops')) || [];\n            if (localShops.length === 0) {\n                const githubShops = await fetchShopsFromGitHub();\n                if (githubShops && githubShops.length > 0) {\n                    shops = githubShops;\n                    localStorage.setItem('shops', JSON.stringify(shops));\n                    showNotification('Pobrano listę sklepów', 'success');\n                } else {\n                    shops = [];\n                }\n            } else {\n                shops = localShops;\n            }\n            effects = JSON.parse(localStorage.getItem('effects')) || [];\n            if (categories.length === 0) {\n                const githubCategories = await fetchCategoriesFromGitHub();\n                if (githubCategories && githubCategories.length > 0) {\n                    categories = githubCategories;\n                    localStorage.setItem('categories', JSON.stringify(categories));\n                    showNotification('Pobrano kategorie', 'success');\n                }\n            }\n            if (effects.length === 0) {\n                const githubEffects = await fetchEffectsFromGitHub();\n                if (githubEffects && githubEffects.length > 0) {\n                    effects = githubEffects;\n                    localStorage.setItem('effects', JSON.stringify(effects));\n                    showNotification('Pobrano efekty', 'success');\n                }\n            }\n            defaultCategories.forEach(defaultCat => {\n                const exists = categories.some(cat => cat.name === defaultCat.name);\n                if (!exists) {\n                    categories.push(defaultCat);\n                }\n            });\n            defaultEffects.forEach(defaultEffect => {\n                const exists = effects.some(effect => effect === defaultEffect);\n                if (!exists) {\n                    effects.push(defaultEffect);\n                }\n            });\n            const hasSingles = categories.some(c => c.name === 'Singles');\n            if (!hasSingles) {\n                categories.push({\n                    name: 'Singles',\n                    bg: '#6a1b9a',\n                    text: '#ffffff'\n                });\n                saveCategories();\n            }\n        }, \n        weight: 10, \n        name: 'Wczytywanie danych' \n    },\n    { action: async () => {\n        for (const product of products) {\n          if (!product.id) {\n            product.id = generateUniqueId();\n          }\n          const history = await priceHistory.getPriceHistory(product.id);\n          if (history.length === 0) {\n            const initialPrice = product.currentPrice !== null ? \n              product.currentPrice : product.price;\n            const initialCurrency = product.currentPrice !== null ? \n              (product.currentCurrency || product.currency) : product.currency;\n            await priceHistory.addPricePoint(\n              product.id,\n              initialPrice,\n              initialCurrency,\n              new Date(product.dateAdded)\n            );\n          }\n        }\n    }, weight: 15, name: 'Migracja danych produktów' },\n    { action: async () => await loadGallery(), weight: 10, name: 'Ładowanie galerii' },\n    { action: async () => {\n        const złotoExists = categories.some(cat => cat.name === 'Złoto');\n        if (!złotoExists) {\n            categories.push({name: 'Złoto', bg: '#FFD700', text: '#000'});\n            localStorage.setItem('categories', JSON.stringify(categories));\n        }\n    }, weight: 5, name: 'Migracja kategorii' },\n    { action: async () => {\n        const needsMigration =\n          products.some(p => p.image && !p.imageId) ||\n          galleryImages.some(img => img.data && !img.id);\n        if (needsMigration) {\n          await migrateToImageReferences();\n          localStorage.setItem('products', JSON.stringify(products));\n          localStorage.setItem('galleryImages', JSON.stringify(galleryImages));\n        }\n    }, weight: 10, name: 'Migracja referencji obrazów' },\n    { action: async () => await loadProductImagesFromDB(), weight: 5, name: 'Ładowanie obrazów produktów' },\n    { action: async () => {\n        checkEmptyState();\n        initSearch();\n        updateCurrencySelects();\n        updateCategorySelects();\n        fillEffectSelect();\n        updateSummary();\n    }, weight: 5, name: 'Inicjalizacja interfejsu' },\n    { action: async () => await renderProducts(applyAllFilters()), weight: 5, name: 'Renderowanie produktów' },\n    { action: async () => {\n        await startDailyPriceUpdate();\n        await removeDuplicatePricePoints();\n        await checkExchangeRates();\n        startExchangeRateUpdater();\n        await updateAllFromGitHub();\n    }, weight: 5, name: 'Aktualizacja danych' }\n  ];\n  let totalWeight = tasks.reduce((sum, task) => sum + task.weight, 0);\n  let completedWeight = 0;\n  try {\n    logEvent('Rozpoczęcie ładowania aplikacji');\n    for (const task of tasks) {\n      logEvent(`Rozpoczęcie: ${task.name}`);\n      await task.action();\n      completedWeight += task.weight;\n      const progressPercent = updateProgress(completedWeight, totalWeight);\n      logEvent(`Zakończono: ${task.name} (${progressPercent}%)`);\n    }\n    initLazyLoading();\n    document.getElementById('sortSelect').value = 'date-asc';\n    renderProducts(applyAllFilters());\n    sortProducts();\n    if (products.length > 0) {\n      await migrateExistingProducts();\n    }\n    if (products.some(p => p.category === 'Złoto')) {\n      setTimeout(() => {\n        updateGoldPrices();\n      }, 3000);\n    }\n    paginationConfig = JSON.parse(localStorage.getItem('paginationConfig')) || paginationConfig;\n    updateLoaderText('Narzędzie gotowe! 100%');\n    const elapsed = Date.now() - startTime;\n    const remaining = Math.max(minLoadTime - elapsed, 0);\n    setTimeout(() => {\n      loader.style.opacity = '0';\n      setTimeout(() => {\n        loader.style.display = 'none';\n        showNotification('Aplikacja gotowa!', 'success');\n        logEvent('Aplikacja w pełni załadowana');\n      }, 500);\n    }, remaining);\n  } catch (error) {\n    logEvent('Błąd ładowania aplikacji:', error);\n    updateLoaderText('Błąd ładowania!');\n    if (loaderText) loaderText.style.color = '#ff6b6b';\n    setTimeout(() => {\n      loader.style.display = 'none';\n    }, 3000);\n    logEvent('Krytyczny błąd ładowania: ' + error.message);\n  }\n});\nasync function updateShopsFromGitHub() {\n    const loader = new PokeballLoader('pokeballLoader').start(0);\n    loader.update(30);\n    \n    try {\n        const githubShops = await fetchShopsFromGitHub();\n        if (githubShops && githubShops.length > 0) {\n            const existingShopIds = new Set(shops.map(shop => shop.id));\n            const newShops = githubShops.filter(shop => !existingShopIds.has(shop.id));\n            if (newShops.length > 0) {\n                shops.push(...newShops);\n                saveShops();\n                renderShopsList();\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n                showNotification(`Dodano ${newShops.length} nowych sklepów`, 'success');\n                playNotificationSound('success');\n            } else {\n                loader.complete();\n                setTimeout(() => loader.reset(), 500);\n            }\n        } else {\n            throw new Error('Nie udało się pobrać sklepów');\n        }\n    } catch (error) {\n        loader.reset();\n        showNotification('Błąd podczas aktualizacji sklepów: ' + error.message, 'danger');\n    }\n}\n\ndocument.getElementById('gallerySelectBtn').addEventListener('click', toggleGallerySelectionMode);\ndocument.getElementById('gallerySelectionControls').querySelector('.btn-danger').addEventListener('click', deleteSelectedGalleryImages);\ndocument.getElementById('gallerySelectionControls').querySelector('.btn-info').addEventListener('click', cancelGallerySelection);\ndocument.getElementById('galleryUploadBtn').addEventListener('click', toggleUploadPanel);\ndocument.addEventListener('keydown', function(e) {\n\tif (e.key === 'Escape') {\n\t\tdocument.querySelectorAll('.modal').forEach(modal => {\n\t\t\tmodal.classList.remove('show');\n\t\t});\n\t}\n\tif ((e.ctrlKey || e.metaKey) && e.key === 'n') {\n\t\tdocument.getElementById('name').focus();\n\t\te.preventDefault();\n\t}\n\tif ((e.ctrlKey || e.metaKey) && e.key === 'f') {\n\t\tdocument.getElementById('searchInput').focus();\n\t\te.preventDefault();\n\t}\n\tif ((e.ctrlKey || e.metaKey) && e.key === 's') {\n\t\tsaveProducts();\n\t\tshowNotification('Dane zapisane', 'success', 2000);\n\t\tplayNotificationSound('success');\n\t\te.preventDefault();\n\t}\n\tif (e.key === 'Escape') {\n\t\tdocument.querySelectorAll('.modal.show').forEach(modal => {\n\t\t\tmodal.classList.remove('show');\n\t\t});\n\t}\n});\ndocument.querySelectorAll('#productForm input').forEach(input => {\n\tinput.addEventListener('keydown', function(e) {\n\t\tif (e.key === 'Enter') {\n\t\t\tdocument.getElementById('productForm').dispatchEvent(new Event('submit'));\n\t\t}\n\t});\n});\ndocument.addEventListener('click', function(e) {\n\tif (e.target.classList.contains('modal')) {\n\t\tcloseExchangeModal();\n\t\tcloseImagePreview();\n\t\tcloseProductPreview();\n\t\tcloseCategoriesModal();\n\t\tcloseInstructionModal();\n\t\tcloseStatsModal();\n\t\tcloseGallery();\n\t\tcloseCurrencyEditModal();\n\t}\n});\ndocument.getElementById('searchInput').addEventListener('keydown', function(e) {\n\tif (e.key === 'Enter') {\n\t\tsearchProducts();\n\t}\n});\n(function() {\n  const selectors = [\n\t'button',\n\t'.btn-success',\n\t'.btn-danger',\n\t'.btn-info',\n\t'.btn-warning',\n\t'.btn-primary',\n\t'.btn-shop',\n\t'.btn-gallery',\n\t'.btn-category',\n\t'.btn-stats',\n\t'.btn-instruction',\n\t'.btn-select',\n\t'.btn-update',\n\t'.custom-file-btn',\n\t'.edit-icon-btn',\n\t'.close-modal',\n\t'.hamburger',\n\t'.close-notification',\n\t'.delete-btn',\n\t'.edit-btn',\n\t'.btn-cardmarket',\n\t'.gallery-header-buttons button',\n\t'.gallery-sort-controls button',\n\t'.confirmation-buttons button',\n\t'.shop-item .actions button',\n\t'.category-item .actions button',\n\t'.add-shop-form button',\n\t'.add-currency-form button',\n\t'.add-category-form button',\n\t'.category-edit-form button',\n\t'.import-btn-wrapper'\n  ].join(', ');\n\n  function addShimmerToElement(el) {\n\tif (el.tagName === 'BUTTON' && el.closest('.import-btn-wrapper')) return;\n\tif (el.querySelector(':scope > .shimmer')) return;\n\tconst oldChildren = Array.from(el.childNodes);\n\tconst shimmer  = document.createElement('span');\n\tshimmer.className = 'shimmer';\n\tconst textWrap = document.createElement('span');\n\ttextWrap.className = 'text';\n\ttextWrap.style.display = 'contents';\n\toldChildren.forEach(n => textWrap.appendChild(n));\n\tconst cs = getComputedStyle(el);\n\tif (cs.position === 'static') el.style.position = 'relative';\n\tif (cs.overflow !== 'hidden') el.style.overflow = 'hidden';\n\tel.insertBefore(shimmer, el.firstChild);\n\tel.appendChild(textWrap);\n\tshimmer.style.animationPlayState = 'paused';\n\tel.addEventListener('mouseenter', () => {\n\t  shimmer.style.animationPlayState = 'running';\n\t});\n\tel.addEventListener('mouseleave', () => {\n\t  shimmer.style.animationPlayState = 'paused';\n\t});\n\tel.addEventListener('focusin', () => {\n\t  shimmer.style.animationPlayState = 'running';\n\t});\n\tel.addEventListener('focusout', () => {\n\t  shimmer.style.animationPlayState = 'paused';\n\t});\n  }\n  function scanAll() {\n\tdocument.querySelectorAll(selectors).forEach(addShimmerToElement);\n  }\n  document.addEventListener('DOMContentLoaded', scanAll);\n  scanAll();\n  new MutationObserver(muts => {\n\tmuts.forEach(m => {\n\t  if (m.addedNodes.length) scanAll();\n\t});\n  }).observe(document.body, { childList: true, subtree: true });\n})();\nconst img       = document.getElementById('card3dImage');\nconst container = document.getElementById('card3dContainer');\nconst card      = container.querySelector('.card');\nconst faces     = container.querySelectorAll('.card-face');\nimg.addEventListener('load', () => {\n  const w = img.naturalWidth;\n  const h = img.naturalHeight;\n  [ container, card, ...faces ].forEach(el => {\n    el.style.width  = w + 'px';\n    el.style.height = h + 'px';\n  });\n  container.style.display = 'block';\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  const container = document.querySelector('.card-container');\n  const card = container.querySelector('.card');\n  const cardShine = container.querySelector('.card__shine');\n  const cardGlare = container.querySelector('.card__glare');\n  let isInteracting = false;\n  function updateCardVars(x, y) {\n    const rect = container.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    const dx = x - centerX;\n    const dy = y - centerY;\n    const pointerFromLeft = (x - rect.left) / rect.width;\n    const pointerFromTop = (y - rect.top) / rect.height;\n    const pointerFromCenter = Math.min(Math.sqrt((dx / rect.width) ** 2 + (dy / rect.height) ** 2), 1);\n    const rotateY = dx / 10;\n    const rotateX = -dy / 10;\n    card.style.setProperty('--rotate-x', `${rotateX}deg`);\n    card.style.setProperty('--rotate-y', `${rotateY}deg`);\n    card.style.setProperty('--pointer-from-center', pointerFromCenter);\n    card.style.setProperty('--pointer-from-left', pointerFromLeft);\n    card.style.setProperty('--pointer-from-top', pointerFromTop);\n    cardShine.style.setProperty('--pointer-x', `${x}px`);\n    cardShine.style.setProperty('--pointer-y', `${y}px`);\n    cardGlare.style.setProperty('--pointer-x', `${pointerFromLeft * 100}%`);\n    cardGlare.style.setProperty('--pointer-y', `${pointerFromTop * 100}%`);\n  }\n  function resetCardVars() {\n    card.style.setProperty('--rotate-x', `0deg`);\n    card.style.setProperty('--rotate-y', `0deg`);\n  }\n  container.addEventListener('mousemove', e => {\n    isInteracting = true;\n    updateCardVars(e.clientX, e.clientY);\n  });\n  container.addEventListener('mouseleave', () => {\n    isInteracting = false;\n    resetCardVars();\n  });\n  container.addEventListener('touchstart', e => {\n    isInteracting = true;\n    const t = e.touches[0];\n    updateCardVars(t.clientX, t.clientY);\n  }, { passive: false });\n  container.addEventListener('touchmove', e => {\n    if (!isInteracting) return;\n    const t = e.touches[0];\n    updateCardVars(t.clientX, t.clientY);\n  }, { passive: false });\n  container.addEventListener('touchend', () => {\n    isInteracting = false;\n    resetCardVars();\n  });\n  updateCardVars(window.innerWidth / 2, window.innerHeight / 2);\n});",
  "localStorage": "localStorage",
  "magazynproduktowapp@gmail.com": "magazynproduktowapp@gmail.com",
  "musi być dokładnie taka sama jak na Cardmarket": "musi być dokładnie taka sama jak na Cardmarket",
  "np. PLN": "np. PLN",
  "np. zł": "np. zł",
  "×": "×",
  "Łączna strata": "Łączna strata",
  "Łączny zysk": "Łączny zysk",
  "Łączny zysk i stratę": "Łączny zysk i stratę",
  "Łączną wartość magazynu": "Łączną wartość magazynu",
  "Śledź dostępne miejsce i podejmij działania, jeśli zaczyna go brakować.": "Śledź dostępne miejsce i podejmij działania, jeśli zaczyna go brakować.",
  "Średni czas przechowywania produktów": "Średni czas przechowywania produktów",
  "↑": "↑"
}